
IMU_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b8a8  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b8a8  0040b8a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20000000  0040b8b0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002ea4  20000998  0040c248  00018994  2**3
                  ALLOC
  4 .stack        00000804  2000383c  0040f0ec  00018994  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018994  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000189bd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00013c39  00000000  00000000  00018a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b80  00000000  00000000  0002c651  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ab6b  00000000  00000000  000301d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f30  00000000  00000000  0003ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ec8  00000000  00000000  0003bc6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00014144  00000000  00000000  0003cb34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000139a9  00000000  00000000  00050c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000491ca  00000000  00000000  00064621  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000032f4  00000000  00000000  000ad7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20004040 	.word	0x20004040
  400004:	004015e9 	.word	0x004015e9
  400008:	004015e5 	.word	0x004015e5
  40000c:	004015e5 	.word	0x004015e5
  400010:	004015e5 	.word	0x004015e5
  400014:	004015e5 	.word	0x004015e5
  400018:	004015e5 	.word	0x004015e5
	...
  40002c:	004018bd 	.word	0x004018bd
  400030:	004015e5 	.word	0x004015e5
  400034:	00000000 	.word	0x00000000
  400038:	00401939 	.word	0x00401939
  40003c:	00401975 	.word	0x00401975
  400040:	004015e5 	.word	0x004015e5
  400044:	004015e5 	.word	0x004015e5
  400048:	004015e5 	.word	0x004015e5
  40004c:	004015e5 	.word	0x004015e5
  400050:	004015e5 	.word	0x004015e5
  400054:	004015e5 	.word	0x004015e5
  400058:	004015e5 	.word	0x004015e5
  40005c:	004015e5 	.word	0x004015e5
  400060:	00400749 	.word	0x00400749
  400064:	00400759 	.word	0x00400759
  400068:	004015e5 	.word	0x004015e5
  40006c:	00401291 	.word	0x00401291
  400070:	004012a5 	.word	0x004012a5
  400074:	004012b9 	.word	0x004012b9
  400078:	004015e5 	.word	0x004015e5
  40007c:	004015e5 	.word	0x004015e5
  400080:	004015e5 	.word	0x004015e5
  400084:	004015e5 	.word	0x004015e5
  400088:	004015e5 	.word	0x004015e5
  40008c:	00400569 	.word	0x00400569
  400090:	00400579 	.word	0x00400579
  400094:	00403049 	.word	0x00403049
  400098:	004015e5 	.word	0x004015e5
  40009c:	004015e5 	.word	0x004015e5
  4000a0:	004015e5 	.word	0x004015e5
  4000a4:	004015e5 	.word	0x004015e5
  4000a8:	004015e5 	.word	0x004015e5
  4000ac:	004015e5 	.word	0x004015e5
  4000b0:	004015e5 	.word	0x004015e5
  4000b4:	004015e5 	.word	0x004015e5
  4000b8:	004015e5 	.word	0x004015e5
  4000bc:	004015e5 	.word	0x004015e5
  4000c0:	004015e5 	.word	0x004015e5

004000c4 <__do_global_dtors_aux>:
  4000c4:	b510      	push	{r4, lr}
  4000c6:	4c05      	ldr	r4, [pc, #20]	; (4000dc <__do_global_dtors_aux+0x18>)
  4000c8:	7823      	ldrb	r3, [r4, #0]
  4000ca:	b933      	cbnz	r3, 4000da <__do_global_dtors_aux+0x16>
  4000cc:	4b04      	ldr	r3, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x1c>)
  4000ce:	b113      	cbz	r3, 4000d6 <__do_global_dtors_aux+0x12>
  4000d0:	4804      	ldr	r0, [pc, #16]	; (4000e4 <__do_global_dtors_aux+0x20>)
  4000d2:	f3af 8000 	nop.w
  4000d6:	2301      	movs	r3, #1
  4000d8:	7023      	strb	r3, [r4, #0]
  4000da:	bd10      	pop	{r4, pc}
  4000dc:	20000998 	.word	0x20000998
  4000e0:	00000000 	.word	0x00000000
  4000e4:	0040b8b0 	.word	0x0040b8b0

004000e8 <frame_dummy>:
  4000e8:	b508      	push	{r3, lr}
  4000ea:	4b06      	ldr	r3, [pc, #24]	; (400104 <frame_dummy+0x1c>)
  4000ec:	b11b      	cbz	r3, 4000f6 <frame_dummy+0xe>
  4000ee:	4806      	ldr	r0, [pc, #24]	; (400108 <frame_dummy+0x20>)
  4000f0:	4906      	ldr	r1, [pc, #24]	; (40010c <frame_dummy+0x24>)
  4000f2:	f3af 8000 	nop.w
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x28>)
  4000f8:	6803      	ldr	r3, [r0, #0]
  4000fa:	b113      	cbz	r3, 400102 <frame_dummy+0x1a>
  4000fc:	4b05      	ldr	r3, [pc, #20]	; (400114 <frame_dummy+0x2c>)
  4000fe:	b103      	cbz	r3, 400102 <frame_dummy+0x1a>
  400100:	4798      	blx	r3
  400102:	bd08      	pop	{r3, pc}
  400104:	00000000 	.word	0x00000000
  400108:	0040b8b0 	.word	0x0040b8b0
  40010c:	2000099c 	.word	0x2000099c
  400110:	0040b8b0 	.word	0x0040b8b0
  400114:	00000000 	.word	0x00000000

00400118 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400118:	b5f0      	push	{r4, r5, r6, r7, lr}
  40011a:	b083      	sub	sp, #12
  40011c:	4605      	mov	r5, r0
  40011e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400120:	2300      	movs	r3, #0
  400122:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400124:	4b18      	ldr	r3, [pc, #96]	; (400188 <usart_serial_getchar+0x70>)
  400126:	4298      	cmp	r0, r3
  400128:	d107      	bne.n	40013a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40012a:	461f      	mov	r7, r3
  40012c:	4e17      	ldr	r6, [pc, #92]	; (40018c <usart_serial_getchar+0x74>)
  40012e:	4638      	mov	r0, r7
  400130:	4621      	mov	r1, r4
  400132:	47b0      	blx	r6
  400134:	2800      	cmp	r0, #0
  400136:	d1fa      	bne.n	40012e <usart_serial_getchar+0x16>
  400138:	e017      	b.n	40016a <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40013a:	4b15      	ldr	r3, [pc, #84]	; (400190 <usart_serial_getchar+0x78>)
  40013c:	4298      	cmp	r0, r3
  40013e:	d107      	bne.n	400150 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400140:	461e      	mov	r6, r3
  400142:	4d12      	ldr	r5, [pc, #72]	; (40018c <usart_serial_getchar+0x74>)
  400144:	4630      	mov	r0, r6
  400146:	4621      	mov	r1, r4
  400148:	47a8      	blx	r5
  40014a:	2800      	cmp	r0, #0
  40014c:	d1fa      	bne.n	400144 <usart_serial_getchar+0x2c>
  40014e:	e018      	b.n	400182 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400150:	4b10      	ldr	r3, [pc, #64]	; (400194 <usart_serial_getchar+0x7c>)
  400152:	4298      	cmp	r0, r3
  400154:	d109      	bne.n	40016a <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400156:	461e      	mov	r6, r3
  400158:	4d0f      	ldr	r5, [pc, #60]	; (400198 <usart_serial_getchar+0x80>)
  40015a:	4630      	mov	r0, r6
  40015c:	a901      	add	r1, sp, #4
  40015e:	47a8      	blx	r5
  400160:	2800      	cmp	r0, #0
  400162:	d1fa      	bne.n	40015a <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400164:	9b01      	ldr	r3, [sp, #4]
  400166:	7023      	strb	r3, [r4, #0]
  400168:	e00b      	b.n	400182 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40016a:	4b0c      	ldr	r3, [pc, #48]	; (40019c <usart_serial_getchar+0x84>)
  40016c:	429d      	cmp	r5, r3
  40016e:	d108      	bne.n	400182 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400170:	461e      	mov	r6, r3
  400172:	4d09      	ldr	r5, [pc, #36]	; (400198 <usart_serial_getchar+0x80>)
  400174:	4630      	mov	r0, r6
  400176:	a901      	add	r1, sp, #4
  400178:	47a8      	blx	r5
  40017a:	2800      	cmp	r0, #0
  40017c:	d1fa      	bne.n	400174 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  40017e:	9b01      	ldr	r3, [sp, #4]
  400180:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400182:	b003      	add	sp, #12
  400184:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400186:	bf00      	nop
  400188:	400e0600 	.word	0x400e0600
  40018c:	004015a5 	.word	0x004015a5
  400190:	400e0800 	.word	0x400e0800
  400194:	40024000 	.word	0x40024000
  400198:	004015cd 	.word	0x004015cd
  40019c:	40028000 	.word	0x40028000

004001a0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4001a0:	b570      	push	{r4, r5, r6, lr}
  4001a2:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001a4:	4b1a      	ldr	r3, [pc, #104]	; (400210 <usart_serial_putchar+0x70>)
  4001a6:	4298      	cmp	r0, r3
  4001a8:	d107      	bne.n	4001ba <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001aa:	461e      	mov	r6, r3
  4001ac:	4d19      	ldr	r5, [pc, #100]	; (400214 <usart_serial_putchar+0x74>)
  4001ae:	4630      	mov	r0, r6
  4001b0:	4621      	mov	r1, r4
  4001b2:	47a8      	blx	r5
  4001b4:	2800      	cmp	r0, #0
  4001b6:	d1fa      	bne.n	4001ae <usart_serial_putchar+0xe>
  4001b8:	e020      	b.n	4001fc <usart_serial_putchar+0x5c>
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001ba:	4b17      	ldr	r3, [pc, #92]	; (400218 <usart_serial_putchar+0x78>)
  4001bc:	4298      	cmp	r0, r3
  4001be:	d107      	bne.n	4001d0 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001c0:	461e      	mov	r6, r3
  4001c2:	4d14      	ldr	r5, [pc, #80]	; (400214 <usart_serial_putchar+0x74>)
  4001c4:	4630      	mov	r0, r6
  4001c6:	4621      	mov	r1, r4
  4001c8:	47a8      	blx	r5
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d1fa      	bne.n	4001c4 <usart_serial_putchar+0x24>
  4001ce:	e017      	b.n	400200 <usart_serial_putchar+0x60>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001d0:	4b12      	ldr	r3, [pc, #72]	; (40021c <usart_serial_putchar+0x7c>)
  4001d2:	4298      	cmp	r0, r3
  4001d4:	d107      	bne.n	4001e6 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
  4001d6:	461e      	mov	r6, r3
  4001d8:	4d11      	ldr	r5, [pc, #68]	; (400220 <usart_serial_putchar+0x80>)
  4001da:	4630      	mov	r0, r6
  4001dc:	4621      	mov	r1, r4
  4001de:	47a8      	blx	r5
  4001e0:	2800      	cmp	r0, #0
  4001e2:	d1fa      	bne.n	4001da <usart_serial_putchar+0x3a>
  4001e4:	e00e      	b.n	400204 <usart_serial_putchar+0x64>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4001e6:	4b0f      	ldr	r3, [pc, #60]	; (400224 <usart_serial_putchar+0x84>)
  4001e8:	4298      	cmp	r0, r3
  4001ea:	d10d      	bne.n	400208 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
  4001ec:	461e      	mov	r6, r3
  4001ee:	4d0c      	ldr	r5, [pc, #48]	; (400220 <usart_serial_putchar+0x80>)
  4001f0:	4630      	mov	r0, r6
  4001f2:	4621      	mov	r1, r4
  4001f4:	47a8      	blx	r5
  4001f6:	2800      	cmp	r0, #0
  4001f8:	d1fa      	bne.n	4001f0 <usart_serial_putchar+0x50>
  4001fa:	e007      	b.n	40020c <usart_serial_putchar+0x6c>
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  4001fc:	2001      	movs	r0, #1
  4001fe:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  400200:	2001      	movs	r0, #1
  400202:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  400204:	2001      	movs	r0, #1
  400206:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400208:	2000      	movs	r0, #0
  40020a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  40020c:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
  40020e:	bd70      	pop	{r4, r5, r6, pc}
  400210:	400e0600 	.word	0x400e0600
  400214:	00401595 	.word	0x00401595
  400218:	400e0800 	.word	0x400e0800
  40021c:	40024000 	.word	0x40024000
  400220:	004015b9 	.word	0x004015b9
  400224:	40028000 	.word	0x40028000

00400228 <printf_mux>:
#include <asf.h>
#include <stdarg.h>

xSemaphoreHandle xMux;

void printf_mux( const char * format, ... ){
  400228:	b40f      	push	{r0, r1, r2, r3}
  40022a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40022c:	b083      	sub	sp, #12
  40022e:	ac08      	add	r4, sp, #32
  400230:	f854 6b04 	ldr.w	r6, [r4], #4
	xSemaphoreTake(xMux, portMAX_DELAY);
  400234:	4d0d      	ldr	r5, [pc, #52]	; (40026c <printf_mux+0x44>)
  400236:	6828      	ldr	r0, [r5, #0]
  400238:	2100      	movs	r1, #0
  40023a:	f04f 32ff 	mov.w	r2, #4294967295
  40023e:	460b      	mov	r3, r1
  400240:	4f0b      	ldr	r7, [pc, #44]	; (400270 <printf_mux+0x48>)
  400242:	47b8      	blx	r7
	va_list(args);
	va_start(args, format);
  400244:	9401      	str	r4, [sp, #4]
	vprintf(format, args);
  400246:	4630      	mov	r0, r6
  400248:	4621      	mov	r1, r4
  40024a:	4b0a      	ldr	r3, [pc, #40]	; (400274 <printf_mux+0x4c>)
  40024c:	4798      	blx	r3
	printf("\n");
  40024e:	480a      	ldr	r0, [pc, #40]	; (400278 <printf_mux+0x50>)
  400250:	4b0a      	ldr	r3, [pc, #40]	; (40027c <printf_mux+0x54>)
  400252:	4798      	blx	r3
	va_end(args);
	xSemaphoreGive(xMux);
  400254:	6828      	ldr	r0, [r5, #0]
  400256:	2100      	movs	r1, #0
  400258:	460a      	mov	r2, r1
  40025a:	460b      	mov	r3, r1
  40025c:	4c08      	ldr	r4, [pc, #32]	; (400280 <printf_mux+0x58>)
  40025e:	47a0      	blx	r4
}
  400260:	b003      	add	sp, #12
  400262:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  400266:	b004      	add	sp, #16
  400268:	4770      	bx	lr
  40026a:	bf00      	nop
  40026c:	20003810 	.word	0x20003810
  400270:	00401f39 	.word	0x00401f39
  400274:	00405951 	.word	0x00405951
  400278:	0040b5c8 	.word	0x0040b5c8
  40027c:	00403241 	.word	0x00403241
  400280:	00401d29 	.word	0x00401d29

00400284 <configure_console>:

/**
 * \brief Configure the console UART.
 */
void configure_console(void){
  400284:	b530      	push	{r4, r5, lr}
  400286:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400288:	2008      	movs	r0, #8
  40028a:	4d15      	ldr	r5, [pc, #84]	; (4002e0 <configure_console+0x5c>)
  40028c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40028e:	4c15      	ldr	r4, [pc, #84]	; (4002e4 <configure_console+0x60>)
  400290:	4b15      	ldr	r3, [pc, #84]	; (4002e8 <configure_console+0x64>)
  400292:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400294:	4a15      	ldr	r2, [pc, #84]	; (4002ec <configure_console+0x68>)
  400296:	4b16      	ldr	r3, [pc, #88]	; (4002f0 <configure_console+0x6c>)
  400298:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40029a:	4a16      	ldr	r2, [pc, #88]	; (4002f4 <configure_console+0x70>)
  40029c:	4b16      	ldr	r3, [pc, #88]	; (4002f8 <configure_console+0x74>)
  40029e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4002a0:	4b16      	ldr	r3, [pc, #88]	; (4002fc <configure_console+0x78>)
  4002a2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  4002a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4002a8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  4002aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4002ae:	9303      	str	r3, [sp, #12]
  4002b0:	2008      	movs	r0, #8
  4002b2:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4002b4:	4620      	mov	r0, r4
  4002b6:	a901      	add	r1, sp, #4
  4002b8:	4b11      	ldr	r3, [pc, #68]	; (400300 <configure_console+0x7c>)
  4002ba:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4002bc:	4d11      	ldr	r5, [pc, #68]	; (400304 <configure_console+0x80>)
  4002be:	682b      	ldr	r3, [r5, #0]
  4002c0:	6898      	ldr	r0, [r3, #8]
  4002c2:	2100      	movs	r1, #0
  4002c4:	4c10      	ldr	r4, [pc, #64]	; (400308 <configure_console+0x84>)
  4002c6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4002c8:	682b      	ldr	r3, [r5, #0]
  4002ca:	6858      	ldr	r0, [r3, #4]
  4002cc:	2100      	movs	r1, #0
  4002ce:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	xMux = xSemaphoreCreateMutex();
  4002d0:	2001      	movs	r0, #1
  4002d2:	4b0e      	ldr	r3, [pc, #56]	; (40030c <configure_console+0x88>)
  4002d4:	4798      	blx	r3
  4002d6:	4b0e      	ldr	r3, [pc, #56]	; (400310 <configure_console+0x8c>)
  4002d8:	6018      	str	r0, [r3, #0]
  4002da:	b005      	add	sp, #20
  4002dc:	bd30      	pop	{r4, r5, pc}
  4002de:	bf00      	nop
  4002e0:	004013b5 	.word	0x004013b5
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	2000381c 	.word	0x2000381c
  4002ec:	004001a1 	.word	0x004001a1
  4002f0:	20003818 	.word	0x20003818
  4002f4:	00400119 	.word	0x00400119
  4002f8:	20003814 	.word	0x20003814
  4002fc:	02dc6c00 	.word	0x02dc6c00
  400300:	00401545 	.word	0x00401545
  400304:	20000520 	.word	0x20000520
  400308:	004033e9 	.word	0x004033e9
  40030c:	00401e45 	.word	0x00401e45
  400310:	20003810 	.word	0x20003810

00400314 <sysclk_init>:
{
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400314:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400316:	480e      	ldr	r0, [pc, #56]	; (400350 <sysclk_init+0x3c>)
  400318:	4b0e      	ldr	r3, [pc, #56]	; (400354 <sysclk_init+0x40>)
  40031a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40031c:	2000      	movs	r0, #0
  40031e:	213e      	movs	r1, #62	; 0x3e
  400320:	4b0d      	ldr	r3, [pc, #52]	; (400358 <sysclk_init+0x44>)
  400322:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400324:	4c0d      	ldr	r4, [pc, #52]	; (40035c <sysclk_init+0x48>)
  400326:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400328:	2800      	cmp	r0, #0
  40032a:	d0fc      	beq.n	400326 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40032c:	4b0c      	ldr	r3, [pc, #48]	; (400360 <sysclk_init+0x4c>)
  40032e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400330:	4a0c      	ldr	r2, [pc, #48]	; (400364 <sysclk_init+0x50>)
  400332:	4b0d      	ldr	r3, [pc, #52]	; (400368 <sysclk_init+0x54>)
  400334:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400336:	4c0d      	ldr	r4, [pc, #52]	; (40036c <sysclk_init+0x58>)
  400338:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40033a:	2800      	cmp	r0, #0
  40033c:	d0fc      	beq.n	400338 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40033e:	2010      	movs	r0, #16
  400340:	4b0b      	ldr	r3, [pc, #44]	; (400370 <sysclk_init+0x5c>)
  400342:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400344:	4b0b      	ldr	r3, [pc, #44]	; (400374 <sysclk_init+0x60>)
  400346:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400348:	4801      	ldr	r0, [pc, #4]	; (400350 <sysclk_init+0x3c>)
  40034a:	4b02      	ldr	r3, [pc, #8]	; (400354 <sysclk_init+0x40>)
  40034c:	4798      	blx	r3
  40034e:	bd10      	pop	{r4, pc}
  400350:	02dc6c00 	.word	0x02dc6c00
  400354:	200000a1 	.word	0x200000a1
  400358:	00401331 	.word	0x00401331
  40035c:	00401385 	.word	0x00401385
  400360:	00401395 	.word	0x00401395
  400364:	20073f01 	.word	0x20073f01
  400368:	400e0400 	.word	0x400e0400
  40036c:	004013a5 	.word	0x004013a5
  400370:	004012cd 	.word	0x004012cd
  400374:	00401699 	.word	0x00401699

00400378 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  400378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40037c:	b082      	sub	sp, #8
  40037e:	4606      	mov	r6, r0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  400380:	2300      	movs	r3, #0
  400382:	9301      	str	r3, [sp, #4]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  400384:	0103      	lsls	r3, r0, #4
  400386:	4a6e      	ldr	r2, [pc, #440]	; (400540 <local_twi_handler+0x1c8>)
  400388:	58d5      	ldr	r5, [r2, r3]

	twi_status = twi_get_interrupt_status(twi_port);
  40038a:	4628      	mov	r0, r5
  40038c:	4b6d      	ldr	r3, [pc, #436]	; (400544 <local_twi_handler+0x1cc>)
  40038e:	4798      	blx	r3
  400390:	4607      	mov	r7, r0
	twi_status &= twi_get_interrupt_mask(twi_port);
  400392:	4628      	mov	r0, r5
  400394:	4b6c      	ldr	r3, [pc, #432]	; (400548 <local_twi_handler+0x1d0>)
  400396:	4798      	blx	r3
  400398:	4007      	ands	r7, r0

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  40039a:	f417 5f00 	tst.w	r7, #8192	; 0x2000
  40039e:	d049      	beq.n	400434 <local_twi_handler+0xbc>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  4003a0:	4b67      	ldr	r3, [pc, #412]	; (400540 <local_twi_handler+0x1c8>)
  4003a2:	eb03 1306 	add.w	r3, r3, r6, lsl #4
  4003a6:	6858      	ldr	r0, [r3, #4]
  4003a8:	f44f 7100 	mov.w	r1, #512	; 0x200
  4003ac:	4b67      	ldr	r3, [pc, #412]	; (40054c <local_twi_handler+0x1d4>)
  4003ae:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  4003b0:	4628      	mov	r0, r5
  4003b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4003b6:	4b66      	ldr	r3, [pc, #408]	; (400550 <local_twi_handler+0x1d8>)
  4003b8:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  4003ba:	2400      	movs	r4, #0

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4003bc:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_TXRDY) {
  4003be:	f013 0f04 	tst.w	r3, #4
  4003c2:	d104      	bne.n	4003ce <local_twi_handler+0x56>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4003c4:	3401      	adds	r4, #1
  4003c6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4003ca:	d1f7      	bne.n	4003bc <local_twi_handler+0x44>
  4003cc:	e002      	b.n	4003d4 <local_twi_handler+0x5c>
static void local_twi_handler(const portBASE_TYPE twi_index)
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  4003ce:	f04f 0800 	mov.w	r8, #0
  4003d2:	e001      	b.n	4003d8 <local_twi_handler+0x60>
			if (status & TWI_SR_TXRDY) {
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				transfer_timeout = true;
  4003d4:	f04f 0801 	mov.w	r8, #1
				break;
			}
		}
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  4003d8:	2302      	movs	r3, #2
  4003da:	602b      	str	r3, [r5, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  4003dc:	4b5d      	ldr	r3, [pc, #372]	; (400554 <local_twi_handler+0x1dc>)
  4003de:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
  4003e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4003e6:	685b      	ldr	r3, [r3, #4]
  4003e8:	4413      	add	r3, r2
  4003ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4003ee:	636b      	str	r3, [r5, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  4003f0:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_TXCOMP) {
  4003f2:	f013 0f01 	tst.w	r3, #1
  4003f6:	d105      	bne.n	400404 <local_twi_handler+0x8c>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4003f8:	3401      	adds	r4, #1
  4003fa:	f1b4 3fff 	cmp.w	r4, #4294967295
  4003fe:	d1f7      	bne.n	4003f0 <local_twi_handler+0x78>
				transfer_timeout = true;
  400400:	f04f 0801 	mov.w	r8, #1
				break;
			}
		}
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  400404:	4b54      	ldr	r3, [pc, #336]	; (400558 <local_twi_handler+0x1e0>)
  400406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40040a:	6858      	ldr	r0, [r3, #4]
  40040c:	b128      	cbz	r0, 40041a <local_twi_handler+0xa2>
			xSemaphoreGiveFromISR(
  40040e:	2100      	movs	r1, #0
  400410:	aa01      	add	r2, sp, #4
  400412:	460b      	mov	r3, r1
  400414:	f8df c144 	ldr.w	ip, [pc, #324]	; 40055c <local_twi_handler+0x1e4>
  400418:	47e0      	blx	ip
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  40041a:	f1b4 3fff 	cmp.w	r4, #4294967295
  40041e:	d00b      	beq.n	400438 <local_twi_handler+0xc0>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  400420:	4b4d      	ldr	r3, [pc, #308]	; (400558 <local_twi_handler+0x1e0>)
  400422:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
  400426:	b138      	cbz	r0, 400438 <local_twi_handler+0xc0>
				xSemaphoreGiveFromISR(
  400428:	2100      	movs	r1, #0
  40042a:	aa01      	add	r2, sp, #4
  40042c:	460b      	mov	r3, r1
  40042e:	4c4b      	ldr	r4, [pc, #300]	; (40055c <local_twi_handler+0x1e4>)
  400430:	47a0      	blx	r4
  400432:	e001      	b.n	400438 <local_twi_handler+0xc0>
static void local_twi_handler(const portBASE_TYPE twi_index)
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  400434:	f04f 0800 	mov.w	r8, #0
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  400438:	f417 5f80 	tst.w	r7, #4096	; 0x1000
  40043c:	d052      	beq.n	4004e4 <local_twi_handler+0x16c>
		uint32_t timeout_counter = 0;
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  40043e:	4b40      	ldr	r3, [pc, #256]	; (400540 <local_twi_handler+0x1c8>)
  400440:	eb03 1306 	add.w	r3, r3, r6, lsl #4
  400444:	6858      	ldr	r0, [r3, #4]
  400446:	2102      	movs	r1, #2
  400448:	4b40      	ldr	r3, [pc, #256]	; (40054c <local_twi_handler+0x1d4>)
  40044a:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  40044c:	4628      	mov	r0, r5
  40044e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400452:	4b3f      	ldr	r3, [pc, #252]	; (400550 <local_twi_handler+0x1d8>)
  400454:	4798      	blx	r3
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
		uint32_t timeout_counter = 0;
  400456:	2400      	movs	r4, #0

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400458:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_RXRDY) {
  40045a:	f013 0f02 	tst.w	r3, #2
  40045e:	d103      	bne.n	400468 <local_twi_handler+0xf0>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400460:	3401      	adds	r4, #1
  400462:	f1b4 3fff 	cmp.w	r4, #4294967295
  400466:	d1f7      	bne.n	400458 <local_twi_handler+0xe0>
				break;
			}
		}
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  400468:	2302      	movs	r3, #2
  40046a:	602b      	str	r3, [r5, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  40046c:	4b39      	ldr	r3, [pc, #228]	; (400554 <local_twi_handler+0x1dc>)
  40046e:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
  400472:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  400476:	685a      	ldr	r2, [r3, #4]
  400478:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40047a:	188b      	adds	r3, r1, r2
  40047c:	f803 0c02 	strb.w	r0, [r3, #-2]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400480:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_RXRDY) {
  400482:	f013 0f02 	tst.w	r3, #2
  400486:	d104      	bne.n	400492 <local_twi_handler+0x11a>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400488:	3401      	adds	r4, #1
  40048a:	f1b4 3fff 	cmp.w	r4, #4294967295
  40048e:	d1f7      	bne.n	400480 <local_twi_handler+0x108>
  400490:	e011      	b.n	4004b6 <local_twi_handler+0x13e>
				break;
			}
		}

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400492:	f1b4 3fff 	cmp.w	r4, #4294967295
  400496:	d00e      	beq.n	4004b6 <local_twi_handler+0x13e>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  400498:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40049a:	440a      	add	r2, r1
  40049c:	f802 3c01 	strb.w	r3, [r2, #-1]
			timeout_counter = 0;
  4004a0:	2400      	movs	r4, #0
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  4004a2:	6a2b      	ldr	r3, [r5, #32]
				if (status & TWI_SR_TXCOMP) {
  4004a4:	f013 0f01 	tst.w	r3, #1
  4004a8:	d105      	bne.n	4004b6 <local_twi_handler+0x13e>
					break;
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4004aa:	3401      	adds	r4, #1
  4004ac:	f1b4 3fff 	cmp.w	r4, #4294967295
  4004b0:	d1f7      	bne.n	4004a2 <local_twi_handler+0x12a>
					transfer_timeout = true;
  4004b2:	f04f 0801 	mov.w	r8, #1
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4004b6:	4b28      	ldr	r3, [pc, #160]	; (400558 <local_twi_handler+0x1e0>)
  4004b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4004bc:	6858      	ldr	r0, [r3, #4]
  4004be:	b128      	cbz	r0, 4004cc <local_twi_handler+0x154>
			xSemaphoreGiveFromISR(
  4004c0:	2100      	movs	r1, #0
  4004c2:	aa01      	add	r2, sp, #4
  4004c4:	460b      	mov	r3, r1
  4004c6:	f8df c094 	ldr.w	ip, [pc, #148]	; 40055c <local_twi_handler+0x1e4>
  4004ca:	47e0      	blx	ip
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  4004cc:	f1b4 3fff 	cmp.w	r4, #4294967295
  4004d0:	d008      	beq.n	4004e4 <local_twi_handler+0x16c>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  4004d2:	4b23      	ldr	r3, [pc, #140]	; (400560 <local_twi_handler+0x1e8>)
  4004d4:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
  4004d8:	b120      	cbz	r0, 4004e4 <local_twi_handler+0x16c>
				xSemaphoreGiveFromISR(
  4004da:	2100      	movs	r1, #0
  4004dc:	aa01      	add	r2, sp, #4
  4004de:	460b      	mov	r3, r1
  4004e0:	4c1e      	ldr	r4, [pc, #120]	; (40055c <local_twi_handler+0x1e4>)
  4004e2:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  4004e4:	f417 7f50 	tst.w	r7, #832	; 0x340
  4004e8:	d102      	bne.n	4004f0 <local_twi_handler+0x178>
  4004ea:	f1b8 0f00 	cmp.w	r8, #0
  4004ee:	d01f      	beq.n	400530 <local_twi_handler+0x1b8>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  4004f0:	4b13      	ldr	r3, [pc, #76]	; (400540 <local_twi_handler+0x1c8>)
  4004f2:	eb03 1306 	add.w	r3, r3, r6, lsl #4
  4004f6:	6858      	ldr	r0, [r3, #4]
  4004f8:	f240 2102 	movw	r1, #514	; 0x202
  4004fc:	4b13      	ldr	r3, [pc, #76]	; (40054c <local_twi_handler+0x1d4>)
  4004fe:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  400500:	f417 7f80 	tst.w	r7, #256	; 0x100
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  400504:	bf04      	itt	eq
  400506:	2302      	moveq	r3, #2
  400508:	602b      	streq	r3, [r5, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  40050a:	4628      	mov	r0, r5
  40050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400510:	4c0f      	ldr	r4, [pc, #60]	; (400550 <local_twi_handler+0x1d8>)
  400512:	47a0      	blx	r4
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  400514:	4628      	mov	r0, r5
  400516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40051a:	47a0      	blx	r4

		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  40051c:	4b0e      	ldr	r3, [pc, #56]	; (400558 <local_twi_handler+0x1e0>)
  40051e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
  400522:	6870      	ldr	r0, [r6, #4]
  400524:	b120      	cbz	r0, 400530 <local_twi_handler+0x1b8>
			xSemaphoreGiveFromISR(
  400526:	2100      	movs	r1, #0
  400528:	aa01      	add	r2, sp, #4
  40052a:	460b      	mov	r3, r1
  40052c:	4c0b      	ldr	r4, [pc, #44]	; (40055c <local_twi_handler+0x1e4>)
  40052e:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  400530:	9b01      	ldr	r3, [sp, #4]
  400532:	b10b      	cbz	r3, 400538 <local_twi_handler+0x1c0>
  400534:	4b0b      	ldr	r3, [pc, #44]	; (400564 <local_twi_handler+0x1ec>)
  400536:	4798      	blx	r3
}
  400538:	b002      	add	sp, #8
  40053a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40053e:	bf00      	nop
  400540:	0040ae18 	.word	0x0040ae18
  400544:	0040153d 	.word	0x0040153d
  400548:	00401541 	.word	0x00401541
  40054c:	00400ed9 	.word	0x00400ed9
  400550:	00401535 	.word	0x00401535
  400554:	200009bc 	.word	0x200009bc
  400558:	200009c4 	.word	0x200009c4
  40055c:	00401ea9 	.word	0x00401ea9
  400560:	200009b4 	.word	0x200009b4
  400564:	004018dd 	.word	0x004018dd

00400568 <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  400568:	b508      	push	{r3, lr}
	local_twi_handler(0);
  40056a:	2000      	movs	r0, #0
  40056c:	4b01      	ldr	r3, [pc, #4]	; (400574 <TWI0_Handler+0xc>)
  40056e:	4798      	blx	r3
  400570:	bd08      	pop	{r3, pc}
  400572:	bf00      	nop
  400574:	00400379 	.word	0x00400379

00400578 <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  400578:	b508      	push	{r3, lr}
	local_twi_handler(1);
  40057a:	2001      	movs	r0, #1
  40057c:	4b01      	ldr	r3, [pc, #4]	; (400584 <TWI1_Handler+0xc>)
  40057e:	4798      	blx	r3
  400580:	bd08      	pop	{r3, pc}
  400582:	bf00      	nop
  400584:	00400379 	.word	0x00400379

00400588 <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t uart_index,
		enum buffer_operations operation_performed)
{
  400588:	b570      	push	{r4, r5, r6, lr}
	freertos_pdc_rx_control_t *rx_buffer_definition;

	rx_buffer_definition = &(rx_buffer_definitions[uart_index]);
  40058a:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
  40058e:	4b1f      	ldr	r3, [pc, #124]	; (40060c <configure_rx_dma+0x84>)
  400590:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  400594:	699c      	ldr	r4, [r3, #24]
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  400596:	689a      	ldr	r2, [r3, #8]
	rx_buffer_definition = &(rx_buffer_definitions[uart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  400598:	4294      	cmp	r4, r2
  40059a:	d10a      	bne.n	4005b2 <configure_rx_dma+0x2a>
		/* The read pointer and the write pointer are equal.  If this function
		was called because data was added to the buffer, then there is no free
		space in the buffer remaining.  If this function was called because data
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
  40059c:	b929      	cbnz	r1, 4005aa <configure_rx_dma+0x22>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
  40059e:	2200      	movs	r2, #0
  4005a0:	60da      	str	r2, [r3, #12]
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr+
  4005a2:	685b      	ldr	r3, [r3, #4]
  4005a4:	429c      	cmp	r4, r3
  4005a6:	d929      	bls.n	4005fc <configure_rx_dma+0x74>
  4005a8:	e010      	b.n	4005cc <configure_rx_dma+0x44>
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  4005aa:	6859      	ldr	r1, [r3, #4]
  4005ac:	1b09      	subs	r1, r1, r4
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
  4005ae:	60d9      	str	r1, [r3, #12]
  4005b0:	e007      	b.n	4005c2 <configure_rx_dma+0x3a>
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  4005b2:	4294      	cmp	r4, r2
  4005b4:	d902      	bls.n	4005bc <configure_rx_dma+0x34>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  4005b6:	1aa4      	subs	r4, r4, r2
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  4005b8:	60dc      	str	r4, [r3, #12]
  4005ba:	e002      	b.n	4005c2 <configure_rx_dma+0x3a>
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  4005bc:	6859      	ldr	r1, [r3, #4]
  4005be:	1a89      	subs	r1, r1, r2
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  4005c0:	60d9      	str	r1, [r3, #12]
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr+
  4005c2:	68d9      	ldr	r1, [r3, #12]
  4005c4:	440a      	add	r2, r1
  4005c6:	685c      	ldr	r4, [r3, #4]
  4005c8:	42a2      	cmp	r2, r4
  4005ca:	d903      	bls.n	4005d4 <configure_rx_dma+0x4c>
  4005cc:	4b10      	ldr	r3, [pc, #64]	; (400610 <configure_rx_dma+0x88>)
  4005ce:	4798      	blx	r3
  4005d0:	bf00      	nop
  4005d2:	e7fd      	b.n	4005d0 <configure_rx_dma+0x48>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
  4005d4:	b191      	cbz	r1, 4005fc <configure_rx_dma+0x74>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
  4005d6:	4d0f      	ldr	r5, [pc, #60]	; (400614 <configure_rx_dma+0x8c>)
  4005d8:	0104      	lsls	r4, r0, #4
  4005da:	192a      	adds	r2, r5, r4
  4005dc:	6856      	ldr	r6, [r2, #4]
  4005de:	4630      	mov	r0, r6
  4005e0:	f103 0108 	add.w	r1, r3, #8
  4005e4:	2200      	movs	r2, #0
  4005e6:	4b0c      	ldr	r3, [pc, #48]	; (400618 <configure_rx_dma+0x90>)
  4005e8:	4798      	blx	r3
				all_uart_definitions[uart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
  4005ea:	4630      	mov	r0, r6
  4005ec:	2101      	movs	r1, #1
  4005ee:	4b0b      	ldr	r3, [pc, #44]	; (40061c <configure_rx_dma+0x94>)
  4005f0:	4798      	blx	r3
				all_uart_definitions[uart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		uart_enable_interrupt(
  4005f2:	5928      	ldr	r0, [r5, r4]
  4005f4:	2109      	movs	r1, #9
  4005f6:	4b0a      	ldr	r3, [pc, #40]	; (400620 <configure_rx_dma+0x98>)
  4005f8:	4798      	blx	r3
  4005fa:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		uart_disable_interrupt(
				all_uart_definitions[uart_index].peripheral_base_address,
  4005fc:	0100      	lsls	r0, r0, #4
				UART_IER_ENDRX | UART_IER_RXRDY);
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		uart_disable_interrupt(
  4005fe:	4b05      	ldr	r3, [pc, #20]	; (400614 <configure_rx_dma+0x8c>)
  400600:	5818      	ldr	r0, [r3, r0]
  400602:	2109      	movs	r1, #9
  400604:	4b07      	ldr	r3, [pc, #28]	; (400624 <configure_rx_dma+0x9c>)
  400606:	4798      	blx	r3
  400608:	bd70      	pop	{r4, r5, r6, pc}
  40060a:	bf00      	nop
  40060c:	200009cc 	.word	0x200009cc
  400610:	004018ed 	.word	0x004018ed
  400614:	0040ae28 	.word	0x0040ae28
  400618:	00400eb5 	.word	0x00400eb5
  40061c:	00400ecd 	.word	0x00400ecd
  400620:	0040157d 	.word	0x0040157d
  400624:	00401581 	.word	0x00401581

00400628 <local_uart_handler>:
/*
 * For internal use only.
 * A common UART interrupt handler that is called for all UART peripherals.
 */
static void local_uart_handler(const portBASE_TYPE uart_index)
{
  400628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40062c:	b083      	sub	sp, #12
  40062e:	4604      	mov	r4, r0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  400630:	2300      	movs	r3, #0
  400632:	9301      	str	r3, [sp, #4]
	uint32_t uart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	uart_status = uart_get_status(
			all_uart_definitions[uart_index].peripheral_base_address);
  400634:	0103      	lsls	r3, r0, #4
  400636:	4a39      	ldr	r2, [pc, #228]	; (40071c <local_uart_handler+0xf4>)
  400638:	58d6      	ldr	r6, [r2, r3]
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t uart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	uart_status = uart_get_status(
  40063a:	4630      	mov	r0, r6
  40063c:	4b38      	ldr	r3, [pc, #224]	; (400720 <local_uart_handler+0xf8>)
  40063e:	4798      	blx	r3
  400640:	4605      	mov	r5, r0
			all_uart_definitions[uart_index].peripheral_base_address);
	uart_status &= uart_get_interrupt_mask(
  400642:	4630      	mov	r0, r6
  400644:	4b37      	ldr	r3, [pc, #220]	; (400724 <local_uart_handler+0xfc>)
  400646:	4798      	blx	r3
  400648:	4005      	ands	r5, r0
			all_uart_definitions[uart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[uart_index]);
  40064a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 400744 <local_uart_handler+0x11c>
  40064e:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
  400652:	ea4f 0888 	mov.w	r8, r8, lsl #2
  400656:	eb09 0708 	add.w	r7, r9, r8

	/* Has the PDC completed a transmission? */
	if ((uart_status & UART_SR_ENDTX) != 0UL) {
  40065a:	f015 0f10 	tst.w	r5, #16
  40065e:	d018      	beq.n	400692 <local_uart_handler+0x6a>
		uart_disable_interrupt(
  400660:	4630      	mov	r0, r6
  400662:	2110      	movs	r1, #16
  400664:	4b30      	ldr	r3, [pc, #192]	; (400728 <local_uart_handler+0x100>)
  400666:	4798      	blx	r3
				all_uart_definitions[uart_index].peripheral_base_address,
				UART_IDR_ENDTX);

		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[uart_index].peripheral_access_mutex != NULL) {
  400668:	4b30      	ldr	r3, [pc, #192]	; (40072c <local_uart_handler+0x104>)
  40066a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40066e:	6858      	ldr	r0, [r3, #4]
  400670:	b128      	cbz	r0, 40067e <local_uart_handler+0x56>
			xSemaphoreGiveFromISR(
  400672:	2100      	movs	r1, #0
  400674:	aa01      	add	r2, sp, #4
  400676:	460b      	mov	r3, r1
  400678:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 400738 <local_uart_handler+0x110>
  40067c:	47e0      	blx	ip
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (tx_dma_control[uart_index].transaction_complete_notification_semaphore != NULL) {
  40067e:	4b2b      	ldr	r3, [pc, #172]	; (40072c <local_uart_handler+0x104>)
  400680:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  400684:	b128      	cbz	r0, 400692 <local_uart_handler+0x6a>
			xSemaphoreGiveFromISR(
  400686:	2100      	movs	r1, #0
  400688:	aa01      	add	r2, sp, #4
  40068a:	460b      	mov	r3, r1
  40068c:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 400738 <local_uart_handler+0x110>
  400690:	47e0      	blx	ip
					tx_dma_control[uart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((uart_status & UART_SR_ENDRX) != 0UL) {
  400692:	f015 0f08 	tst.w	r5, #8
  400696:	d021      	beq.n	4006dc <local_uart_handler+0xb4>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
  400698:	69bb      	ldr	r3, [r7, #24]
  40069a:	b91b      	cbnz	r3, 4006a4 <local_uart_handler+0x7c>
  40069c:	4b24      	ldr	r3, [pc, #144]	; (400730 <local_uart_handler+0x108>)
  40069e:	4798      	blx	r3
  4006a0:	bf00      	nop
  4006a2:	e7fd      	b.n	4006a0 <local_uart_handler+0x78>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
  4006a4:	2b01      	cmp	r3, #1
  4006a6:	d103      	bne.n	4006b0 <local_uart_handler+0x88>
  4006a8:	4b21      	ldr	r3, [pc, #132]	; (400730 <local_uart_handler+0x108>)
  4006aa:	4798      	blx	r3
  4006ac:	bf00      	nop
  4006ae:	e7fd      	b.n	4006ac <local_uart_handler+0x84>
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  4006b0:	68fa      	ldr	r2, [r7, #12]
  4006b2:	68bb      	ldr	r3, [r7, #8]
  4006b4:	4413      	add	r3, r2
  4006b6:	60bb      	str	r3, [r7, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  4006b8:	687a      	ldr	r2, [r7, #4]
  4006ba:	4293      	cmp	r3, r2
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
  4006bc:	bf24      	itt	cs
  4006be:	f859 3008 	ldrcs.w	r3, [r9, r8]
  4006c2:	60bb      	strcs	r3, [r7, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(uart_index, data_added);
  4006c4:	4620      	mov	r0, r4
  4006c6:	2100      	movs	r1, #0
  4006c8:	4b1a      	ldr	r3, [pc, #104]	; (400734 <local_uart_handler+0x10c>)
  4006ca:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  4006cc:	6938      	ldr	r0, [r7, #16]
  4006ce:	b128      	cbz	r0, 4006dc <local_uart_handler+0xb4>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  4006d0:	2100      	movs	r1, #0
  4006d2:	aa01      	add	r2, sp, #4
  4006d4:	460b      	mov	r3, r1
  4006d6:	f8df c060 	ldr.w	ip, [pc, #96]	; 400738 <local_uart_handler+0x110>
  4006da:	47e0      	blx	ip
	 * It happened only when in PDC mode with TXRDY and RXRDY interrupts since
	 * the flags has been cleared by PDC.
	 * As the TXRDY is never enabled in this service, here we
	 * check the RXRDY interrupt case.
	 */
	if (uart_status == 0UL) {
  4006dc:	b93d      	cbnz	r5, 4006ee <local_uart_handler+0xc6>
		/* Character has been placed into the Rx buffer. */
		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  4006de:	6938      	ldr	r0, [r7, #16]
  4006e0:	b1a8      	cbz	r0, 40070e <local_uart_handler+0xe6>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  4006e2:	2100      	movs	r1, #0
  4006e4:	aa01      	add	r2, sp, #4
  4006e6:	460b      	mov	r3, r1
  4006e8:	4c13      	ldr	r4, [pc, #76]	; (400738 <local_uart_handler+0x110>)
  4006ea:	47a0      	blx	r4
  4006ec:	e00f      	b.n	40070e <local_uart_handler+0xe6>
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((uart_status & SR_ERROR_INTERRUPTS) != 0) {
  4006ee:	f015 0fe0 	tst.w	r5, #224	; 0xe0
  4006f2:	d00c      	beq.n	40070e <local_uart_handler+0xe6>
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		uart_reset_status(
  4006f4:	4630      	mov	r0, r6
  4006f6:	4b11      	ldr	r3, [pc, #68]	; (40073c <local_uart_handler+0x114>)
  4006f8:	4798      	blx	r3
				all_uart_definitions[uart_index].peripheral_base_address);
		if (tx_dma_control[uart_index].peripheral_access_mutex != NULL) {
  4006fa:	4b0c      	ldr	r3, [pc, #48]	; (40072c <local_uart_handler+0x104>)
  4006fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  400700:	6860      	ldr	r0, [r4, #4]
  400702:	b120      	cbz	r0, 40070e <local_uart_handler+0xe6>
			xSemaphoreGiveFromISR(
  400704:	2100      	movs	r1, #0
  400706:	aa01      	add	r2, sp, #4
  400708:	460b      	mov	r3, r1
  40070a:	4c0b      	ldr	r4, [pc, #44]	; (400738 <local_uart_handler+0x110>)
  40070c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40070e:	9b01      	ldr	r3, [sp, #4]
  400710:	b10b      	cbz	r3, 400716 <local_uart_handler+0xee>
  400712:	4b0b      	ldr	r3, [pc, #44]	; (400740 <local_uart_handler+0x118>)
  400714:	4798      	blx	r3
}
  400716:	b003      	add	sp, #12
  400718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40071c:	0040ae28 	.word	0x0040ae28
  400720:	00401589 	.word	0x00401589
  400724:	00401585 	.word	0x00401585
  400728:	00401581 	.word	0x00401581
  40072c:	200009e8 	.word	0x200009e8
  400730:	004018ed 	.word	0x004018ed
  400734:	00400589 	.word	0x00400589
  400738:	00401ea9 	.word	0x00401ea9
  40073c:	0040158d 	.word	0x0040158d
  400740:	004018dd 	.word	0x004018dd
  400744:	200009cc 	.word	0x200009cc

00400748 <UART0_Handler>:
#endif /* UART */

#ifdef UART0

void UART0_Handler(void)
{
  400748:	b508      	push	{r3, lr}
	local_uart_handler(0);
  40074a:	2000      	movs	r0, #0
  40074c:	4b01      	ldr	r3, [pc, #4]	; (400754 <UART0_Handler+0xc>)
  40074e:	4798      	blx	r3
  400750:	bd08      	pop	{r3, pc}
  400752:	bf00      	nop
  400754:	00400629 	.word	0x00400629

00400758 <UART1_Handler>:
#endif /* UART0 */

#ifdef UART1

void UART1_Handler(void)
{
  400758:	b508      	push	{r3, lr}
	local_uart_handler(1);
  40075a:	2001      	movs	r0, #1
  40075c:	4b01      	ldr	r3, [pc, #4]	; (400764 <UART1_Handler+0xc>)
  40075e:	4798      	blx	r3
  400760:	bd08      	pop	{r3, pc}
  400762:	bf00      	nop
  400764:	00400629 	.word	0x00400629

00400768 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400768:	b510      	push	{r4, lr}
  40076a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  40076c:	4b10      	ldr	r3, [pc, #64]	; (4007b0 <spi_master_init+0x48>)
  40076e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400770:	2380      	movs	r3, #128	; 0x80
  400772:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400774:	6863      	ldr	r3, [r4, #4]
  400776:	f043 0301 	orr.w	r3, r3, #1
  40077a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40077c:	6863      	ldr	r3, [r4, #4]
  40077e:	f043 0310 	orr.w	r3, r3, #16
  400782:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400784:	6863      	ldr	r3, [r4, #4]
  400786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40078a:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40078c:	4620      	mov	r0, r4
  40078e:	2100      	movs	r1, #0
  400790:	4b08      	ldr	r3, [pc, #32]	; (4007b4 <spi_master_init+0x4c>)
  400792:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400794:	6863      	ldr	r3, [r4, #4]
  400796:	f023 0302 	bic.w	r3, r3, #2
  40079a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  40079c:	6863      	ldr	r3, [r4, #4]
  40079e:	f023 0304 	bic.w	r3, r3, #4
  4007a2:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4007a4:	4620      	mov	r0, r4
  4007a6:	2100      	movs	r1, #0
  4007a8:	4b03      	ldr	r3, [pc, #12]	; (4007b8 <spi_master_init+0x50>)
  4007aa:	4798      	blx	r3
  4007ac:	bd10      	pop	{r4, pc}
  4007ae:	bf00      	nop
  4007b0:	004013e1 	.word	0x004013e1
  4007b4:	004013f1 	.word	0x004013f1
  4007b8:	00401409 	.word	0x00401409

004007bc <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007be:	4605      	mov	r5, r0
  4007c0:	460c      	mov	r4, r1
  4007c2:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  4007c4:	4618      	mov	r0, r3
  4007c6:	4914      	ldr	r1, [pc, #80]	; (400818 <spi_master_setup_device+0x5c>)
  4007c8:	4b14      	ldr	r3, [pc, #80]	; (40081c <spi_master_setup_device+0x60>)
  4007ca:	4798      	blx	r3
  4007cc:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4007ce:	4628      	mov	r0, r5
  4007d0:	6821      	ldr	r1, [r4, #0]
  4007d2:	2200      	movs	r2, #0
  4007d4:	4613      	mov	r3, r2
  4007d6:	f8df c05c 	ldr.w	ip, [pc, #92]	; 400834 <spi_master_setup_device+0x78>
  4007da:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4007dc:	4628      	mov	r0, r5
  4007de:	6821      	ldr	r1, [r4, #0]
  4007e0:	2208      	movs	r2, #8
  4007e2:	4b0f      	ldr	r3, [pc, #60]	; (400820 <spi_master_setup_device+0x64>)
  4007e4:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4007e6:	4628      	mov	r0, r5
  4007e8:	6821      	ldr	r1, [r4, #0]
  4007ea:	b2fa      	uxtb	r2, r7
  4007ec:	4b0d      	ldr	r3, [pc, #52]	; (400824 <spi_master_setup_device+0x68>)
  4007ee:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4007f0:	4628      	mov	r0, r5
  4007f2:	6821      	ldr	r1, [r4, #0]
  4007f4:	2208      	movs	r2, #8
  4007f6:	4b0c      	ldr	r3, [pc, #48]	; (400828 <spi_master_setup_device+0x6c>)
  4007f8:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4007fa:	4628      	mov	r0, r5
  4007fc:	6821      	ldr	r1, [r4, #0]
  4007fe:	0872      	lsrs	r2, r6, #1
  400800:	4b0a      	ldr	r3, [pc, #40]	; (40082c <spi_master_setup_device+0x70>)
  400802:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400804:	f086 0201 	eor.w	r2, r6, #1
  400808:	4628      	mov	r0, r5
  40080a:	6821      	ldr	r1, [r4, #0]
  40080c:	f002 0201 	and.w	r2, r2, #1
  400810:	4b07      	ldr	r3, [pc, #28]	; (400830 <spi_master_setup_device+0x74>)
  400812:	4798      	blx	r3
  400814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400816:	bf00      	nop
  400818:	02dc6c00 	.word	0x02dc6c00
  40081c:	004014ed 	.word	0x004014ed
  400820:	004014d9 	.word	0x004014d9
  400824:	00401505 	.word	0x00401505
  400828:	00401495 	.word	0x00401495
  40082c:	00401455 	.word	0x00401455
  400830:	00401475 	.word	0x00401475
  400834:	0040151d 	.word	0x0040151d

00400838 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400838:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40083a:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  40083c:	f013 0f04 	tst.w	r3, #4
  400840:	d005      	beq.n	40084e <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400842:	6809      	ldr	r1, [r1, #0]
  400844:	290f      	cmp	r1, #15
  400846:	d80b      	bhi.n	400860 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400848:	4b06      	ldr	r3, [pc, #24]	; (400864 <spi_select_device+0x2c>)
  40084a:	4798      	blx	r3
  40084c:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  40084e:	680b      	ldr	r3, [r1, #0]
  400850:	2b03      	cmp	r3, #3
  400852:	d805      	bhi.n	400860 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400854:	2201      	movs	r2, #1
  400856:	fa02 f103 	lsl.w	r1, r2, r3
  40085a:	43c9      	mvns	r1, r1
  40085c:	4b01      	ldr	r3, [pc, #4]	; (400864 <spi_select_device+0x2c>)
  40085e:	4798      	blx	r3
  400860:	bd08      	pop	{r3, pc}
  400862:	bf00      	nop
  400864:	004013f1 	.word	0x004013f1

00400868 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40086c:	460c      	mov	r4, r1
  40086e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
  400870:	b960      	cbnz	r0, 40088c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
  400872:	2a00      	cmp	r2, #0
  400874:	dd0e      	ble.n	400894 <_read+0x2c>
  400876:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400878:	4e09      	ldr	r6, [pc, #36]	; (4008a0 <_read+0x38>)
  40087a:	4d0a      	ldr	r5, [pc, #40]	; (4008a4 <_read+0x3c>)
  40087c:	6830      	ldr	r0, [r6, #0]
  40087e:	4621      	mov	r1, r4
  400880:	682b      	ldr	r3, [r5, #0]
  400882:	4798      	blx	r3
		ptr++;
  400884:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400886:	42bc      	cmp	r4, r7
  400888:	d1f8      	bne.n	40087c <_read+0x14>
  40088a:	e006      	b.n	40089a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  40088c:	f04f 30ff 	mov.w	r0, #4294967295
  400890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
  400894:	2000      	movs	r0, #0
  400896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40089a:	4640      	mov	r0, r8
	}
	return nChars;
}
  40089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008a0:	2000381c 	.word	0x2000381c
  4008a4:	20003814 	.word	0x20003814

004008a8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4008a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008ac:	460e      	mov	r6, r1
  4008ae:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4008b0:	3801      	subs	r0, #1
  4008b2:	2802      	cmp	r0, #2
  4008b4:	d80f      	bhi.n	4008d6 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
  4008b6:	b192      	cbz	r2, 4008de <_write+0x36>
  4008b8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4008ba:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4008f8 <_write+0x50>
  4008be:	4f0d      	ldr	r7, [pc, #52]	; (4008f4 <_write+0x4c>)
  4008c0:	f8d8 0000 	ldr.w	r0, [r8]
  4008c4:	5d31      	ldrb	r1, [r6, r4]
  4008c6:	683b      	ldr	r3, [r7, #0]
  4008c8:	4798      	blx	r3
  4008ca:	2800      	cmp	r0, #0
  4008cc:	db0a      	blt.n	4008e4 <_write+0x3c>
			return -1;
		}
		++nChars;
  4008ce:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4008d0:	42a5      	cmp	r5, r4
  4008d2:	d1f5      	bne.n	4008c0 <_write+0x18>
  4008d4:	e00a      	b.n	4008ec <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4008d6:	f04f 30ff 	mov.w	r0, #4294967295
  4008da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
  4008de:	2000      	movs	r0, #0
  4008e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4008e4:	f04f 30ff 	mov.w	r0, #4294967295
  4008e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
  4008ec:	4620      	mov	r0, r4
	}
	return nChars;
}
  4008ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008f2:	bf00      	nop
  4008f4:	20003818 	.word	0x20003818
  4008f8:	2000381c 	.word	0x2000381c

004008fc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  4008fc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4008fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400902:	4b2e      	ldr	r3, [pc, #184]	; (4009bc <board_init+0xc0>)
  400904:	605a      	str	r2, [r3, #4]
  400906:	200b      	movs	r0, #11
  400908:	4c2d      	ldr	r4, [pc, #180]	; (4009c0 <board_init+0xc4>)
  40090a:	47a0      	blx	r4
  40090c:	200c      	movs	r0, #12
  40090e:	47a0      	blx	r4
  400910:	200d      	movs	r0, #13
  400912:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400914:	2017      	movs	r0, #23
  400916:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40091a:	4c2a      	ldr	r4, [pc, #168]	; (4009c4 <board_init+0xc8>)
  40091c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40091e:	202e      	movs	r0, #46	; 0x2e
  400920:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400924:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
  400926:	2019      	movs	r0, #25
  400928:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40092c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40092e:	200f      	movs	r0, #15
  400930:	4925      	ldr	r1, [pc, #148]	; (4009c8 <board_init+0xcc>)
  400932:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400934:	2010      	movs	r0, #16
  400936:	4925      	ldr	r1, [pc, #148]	; (4009cc <board_init+0xd0>)
  400938:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40093a:	4825      	ldr	r0, [pc, #148]	; (4009d0 <board_init+0xd4>)
  40093c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400940:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400944:	4b23      	ldr	r3, [pc, #140]	; (4009d4 <board_init+0xd8>)
  400946:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  400948:	2000      	movs	r0, #0
  40094a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40094e:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  400950:	2008      	movs	r0, #8
  400952:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400956:	47a0      	blx	r4
		gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#if (defined CONF_BOARD_SPI) || (defined CONF_BOARD_SD_MMC_SPI)
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400958:	200c      	movs	r0, #12
  40095a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40095e:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400960:	200d      	movs	r0, #13
  400962:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400966:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400968:	200e      	movs	r0, #14
  40096a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40096e:	47a0      	blx	r4

	#ifdef CONF_BOARD_SPI_NPCS1
		#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
		#else
			gpio_configure_pin(SPI_NPCS1_PA31_GPIO, SPI_NPCS1_PA31_FLAGS);
  400970:	201f      	movs	r0, #31
  400972:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400976:	47a0      	blx	r4

	#ifdef CONF_BOARD_SPI_NPCS2
		#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
		#else
			gpio_configure_pin(SPI_NPCS2_PA30_GPIO, SPI_NPCS2_PA30_FLAGS);
  400978:	201e      	movs	r0, #30
  40097a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40097e:	47a0      	blx	r4
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#ifdef CONF_BOARD_ILI9225
	/* Configure SPI LCD control pin */
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400980:	200c      	movs	r0, #12
  400982:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400986:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400988:	200d      	movs	r0, #13
  40098a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40098e:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400990:	200e      	movs	r0, #14
  400992:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400996:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS2_PA30_GPIO, SPI_NPCS2_PA30_FLAGS);
  400998:	201e      	movs	r0, #30
  40099a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40099e:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ILI9225_RS_GPIO, BOARD_ILI9225_RS_FLAGS);
  4009a0:	201c      	movs	r0, #28
  4009a2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009a6:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ILI9225_RSTN_GPIO, BOARD_ILI9225_RSTN_FLAGS);
  4009a8:	201d      	movs	r0, #29
  4009aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009ae:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3193
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  4009b0:	204d      	movs	r0, #77	; 0x4d
  4009b2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009b6:	47a0      	blx	r4
  4009b8:	bd10      	pop	{r4, pc}
  4009ba:	bf00      	nop
  4009bc:	400e1450 	.word	0x400e1450
  4009c0:	004013b5 	.word	0x004013b5
  4009c4:	00401039 	.word	0x00401039
  4009c8:	28000079 	.word	0x28000079
  4009cc:	28000059 	.word	0x28000059
  4009d0:	400e0e00 	.word	0x400e0e00
  4009d4:	0040115d 	.word	0x0040115d

004009d8 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  4009d8:	b470      	push	{r4, r5, r6}
  4009da:	b083      	sub	sp, #12
#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  4009dc:	f1c0 0011 	rsb	r0, r0, #17
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  4009e0:	2810      	cmp	r0, #16
  4009e2:	bf34      	ite	cc
  4009e4:	4606      	movcc	r6, r0
  4009e6:	2610      	movcs	r6, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  4009e8:	2e00      	cmp	r6, #0
  4009ea:	bf08      	it	eq
  4009ec:	2601      	moveq	r6, #1

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  4009ee:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4009f0:	4d0f      	ldr	r5, [pc, #60]	; (400a30 <aat31xx_set_backlight+0x58>)
  4009f2:	f44f 5400 	mov.w	r4, #8192	; 0x2000
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  4009f6:	2018      	movs	r0, #24
  4009f8:	636c      	str	r4, [r5, #52]	; 0x34
  4009fa:	9001      	str	r0, [sp, #4]
		while (ul_delay--) {
  4009fc:	9b01      	ldr	r3, [sp, #4]
  4009fe:	1e5a      	subs	r2, r3, #1
  400a00:	9201      	str	r2, [sp, #4]
  400a02:	2b00      	cmp	r3, #0
  400a04:	d1fa      	bne.n	4009fc <aat31xx_set_backlight+0x24>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a06:	632c      	str	r4, [r5, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  400a08:	9001      	str	r0, [sp, #4]
		while (ul_delay--) {
  400a0a:	9b01      	ldr	r3, [sp, #4]
  400a0c:	1e5a      	subs	r2, r3, #1
  400a0e:	9201      	str	r2, [sp, #4]
  400a10:	2b00      	cmp	r3, #0
  400a12:	d1fa      	bne.n	400a0a <aat31xx_set_backlight+0x32>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  400a14:	3101      	adds	r1, #1
  400a16:	428e      	cmp	r6, r1
  400a18:	d8ee      	bhi.n	4009f8 <aat31xx_set_backlight+0x20>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  400a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400a1e:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400a20:	9b01      	ldr	r3, [sp, #4]
  400a22:	1e5a      	subs	r2, r3, #1
  400a24:	9201      	str	r2, [sp, #4]
  400a26:	2b00      	cmp	r3, #0
  400a28:	d1fa      	bne.n	400a20 <aat31xx_set_backlight+0x48>
	}
}
  400a2a:	b003      	add	sp, #12
  400a2c:	bc70      	pop	{r4, r5, r6}
  400a2e:	4770      	bx	lr
  400a30:	400e1200 	.word	0x400e1200

00400a34 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  400a34:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a3a:	4b06      	ldr	r3, [pc, #24]	; (400a54 <aat31xx_disable_backlight+0x20>)
  400a3c:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  400a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400a42:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400a44:	9b01      	ldr	r3, [sp, #4]
  400a46:	1e5a      	subs	r2, r3, #1
  400a48:	9201      	str	r2, [sp, #4]
  400a4a:	2b00      	cmp	r3, #0
  400a4c:	d1fa      	bne.n	400a44 <aat31xx_disable_backlight+0x10>
	}
}
  400a4e:	b002      	add	sp, #8
  400a50:	4770      	bx	lr
  400a52:	bf00      	nop
  400a54:	400e1200 	.word	0x400e1200

00400a58 <ili9225_delay>:

/**
 * \brief Delay function.
 */
static void ili9225_delay(uint32_t ul_ms)
{
  400a58:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400a5a:	2300      	movs	r3, #0
  400a5c:	9301      	str	r3, [sp, #4]
  400a5e:	9b01      	ldr	r3, [sp, #4]
  400a60:	4298      	cmp	r0, r3
  400a62:	d911      	bls.n	400a88 <ili9225_delay+0x30>
		for(i = 0; i < 100000; i++) {
  400a64:	2100      	movs	r1, #0
  400a66:	4a09      	ldr	r2, [pc, #36]	; (400a8c <ili9225_delay+0x34>)
  400a68:	9101      	str	r1, [sp, #4]
  400a6a:	9b01      	ldr	r3, [sp, #4]
  400a6c:	4293      	cmp	r3, r2
  400a6e:	d805      	bhi.n	400a7c <ili9225_delay+0x24>
  400a70:	9b01      	ldr	r3, [sp, #4]
  400a72:	3301      	adds	r3, #1
  400a74:	9301      	str	r3, [sp, #4]
  400a76:	9b01      	ldr	r3, [sp, #4]
  400a78:	4293      	cmp	r3, r2
  400a7a:	d9f9      	bls.n	400a70 <ili9225_delay+0x18>
 */
static void ili9225_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400a7c:	9b01      	ldr	r3, [sp, #4]
  400a7e:	3301      	adds	r3, #1
  400a80:	9301      	str	r3, [sp, #4]
  400a82:	9b01      	ldr	r3, [sp, #4]
  400a84:	4283      	cmp	r3, r0
  400a86:	d3ef      	bcc.n	400a68 <ili9225_delay+0x10>
		for(i = 0; i < 100000; i++) {
		}
	}
}
  400a88:	b002      	add	sp, #8
  400a8a:	4770      	bx	lr
  400a8c:	0001869f 	.word	0x0001869f

00400a90 <ili9225_write_cmd>:
 * \brief Send command to LCD controller.
 *
 * \param uc_cmd command.
 */
static void ili9225_write_cmd(uint8_t uc_cmd)
{
  400a90:	b570      	push	{r4, r5, r6, lr}
  400a92:	4606      	mov	r6, r0
	/* Configure SPI Chip Select: SPI Mode 0, 8bits */
	spi_set_bits_per_transfer(BOARD_ILI9225_SPI, BOARD_ILI9225_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  400a94:	4c0b      	ldr	r4, [pc, #44]	; (400ac4 <ili9225_write_cmd+0x34>)
  400a96:	4620      	mov	r0, r4
  400a98:	2102      	movs	r1, #2
  400a9a:	2200      	movs	r2, #0
  400a9c:	4d0a      	ldr	r5, [pc, #40]	; (400ac8 <ili9225_write_cmd+0x38>)
  400a9e:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400aa0:	2301      	movs	r3, #1
  400aa2:	6023      	str	r3, [r4, #0]
	/* Enable SPI */
	spi_enable(BOARD_ILI9225_SPI);

	/* Transfer cmd */
	gpio_set_pin_low(BOARD_ILI9225_RS_GPIO);
  400aa4:	201c      	movs	r0, #28
  400aa6:	4b09      	ldr	r3, [pc, #36]	; (400acc <ili9225_write_cmd+0x3c>)
  400aa8:	4798      	blx	r3
	spi_write(BOARD_ILI9225_SPI, uc_cmd, BOARD_ILI9225_SPI_NPCS, 0);
  400aaa:	4620      	mov	r0, r4
  400aac:	4631      	mov	r1, r6
  400aae:	2202      	movs	r2, #2
  400ab0:	2300      	movs	r3, #0
  400ab2:	4e07      	ldr	r6, [pc, #28]	; (400ad0 <ili9225_write_cmd+0x40>)
  400ab4:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400ab6:	2102      	movs	r1, #2
  400ab8:	6021      	str	r1, [r4, #0]

	/* Disable SPI */
	spi_disable(BOARD_ILI9225_SPI);

	/* Back to the default config: SPI Mode 0, 16bits */
	spi_set_bits_per_transfer(BOARD_ILI9225_SPI, BOARD_ILI9225_SPI_NPCS, SPI_CSR_BITS_16_BIT);
  400aba:	4620      	mov	r0, r4
  400abc:	2280      	movs	r2, #128	; 0x80
  400abe:	47a8      	blx	r5
  400ac0:	bd70      	pop	{r4, r5, r6, pc}
  400ac2:	bf00      	nop
  400ac4:	40008000 	.word	0x40008000
  400ac8:	004014d9 	.word	0x004014d9
  400acc:	00400ff9 	.word	0x00400ff9
  400ad0:	0040141d 	.word	0x0040141d

00400ad4 <ili9225_write_ram>:
 * \brief Write data to LCD GRAM.
 *
 * \param us_data data.
 */
static void ili9225_write_ram(uint16_t us_data)
{
  400ad4:	b538      	push	{r3, r4, r5, lr}
  400ad6:	4605      	mov	r5, r0
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400ad8:	4c07      	ldr	r4, [pc, #28]	; (400af8 <ili9225_write_ram+0x24>)
  400ada:	2301      	movs	r3, #1
  400adc:	6023      	str	r3, [r4, #0]
	/* Enable SPI */
	spi_enable(BOARD_ILI9225_SPI);

	/* Transfer data */
	gpio_set_pin_high(BOARD_ILI9225_RS_GPIO);
  400ade:	201c      	movs	r0, #28
  400ae0:	4b06      	ldr	r3, [pc, #24]	; (400afc <ili9225_write_ram+0x28>)
  400ae2:	4798      	blx	r3
	spi_write(BOARD_ILI9225_SPI, us_data, BOARD_ILI9225_SPI_NPCS, 0);
  400ae4:	4620      	mov	r0, r4
  400ae6:	4629      	mov	r1, r5
  400ae8:	2202      	movs	r2, #2
  400aea:	2300      	movs	r3, #0
  400aec:	4d04      	ldr	r5, [pc, #16]	; (400b00 <ili9225_write_ram+0x2c>)
  400aee:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400af0:	2302      	movs	r3, #2
  400af2:	6023      	str	r3, [r4, #0]
  400af4:	bd38      	pop	{r3, r4, r5, pc}
  400af6:	bf00      	nop
  400af8:	40008000 	.word	0x40008000
  400afc:	00400fdd 	.word	0x00400fdd
  400b00:	0040141d 	.word	0x0040141d

00400b04 <ili9225_write_register>:
 *
 * \param uc_reg register address.
 * \param us_data data to be written.
 */
static void ili9225_write_register(uint8_t uc_reg, ili9225_color_t us_data)
{
  400b04:	b510      	push	{r4, lr}
  400b06:	460c      	mov	r4, r1
	ili9225_write_cmd(uc_reg);
  400b08:	4b02      	ldr	r3, [pc, #8]	; (400b14 <ili9225_write_register+0x10>)
  400b0a:	4798      	blx	r3
	ili9225_write_ram(us_data);
  400b0c:	4620      	mov	r0, r4
  400b0e:	4b02      	ldr	r3, [pc, #8]	; (400b18 <ili9225_write_register+0x14>)
  400b10:	4798      	blx	r3
  400b12:	bd10      	pop	{r4, pc}
  400b14:	00400a91 	.word	0x00400a91
  400b18:	00400ad5 	.word	0x00400ad5

00400b1c <ili9225_spi_handler>:
 *
 * \return The interrupt mask value.
 */
static inline uint32_t spi_read_interrupt_mask(Spi *p_spi)
{
	return p_spi->SPI_IMR;
  400b1c:	4b03      	ldr	r3, [pc, #12]	; (400b2c <ili9225_spi_handler+0x10>)
  400b1e:	69da      	ldr	r2, [r3, #28]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be disabled.
 */
static inline void spi_disable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IDR = ul_sources;
  400b20:	619a      	str	r2, [r3, #24]
	/* Disable interrupts */
	ul_spi_reg = spi_read_interrupt_mask(BOARD_ILI9225_SPI);
	spi_disable_interrupt(BOARD_ILI9225_SPI, ul_spi_reg);

	/* Set the flag to notify the end of transfer */
	g_by_transfend_flag = 1;
  400b22:	2201      	movs	r2, #1
  400b24:	4b02      	ldr	r3, [pc, #8]	; (400b30 <ili9225_spi_handler+0x14>)
  400b26:	701a      	strb	r2, [r3, #0]
  400b28:	4770      	bx	lr
  400b2a:	bf00      	nop
  400b2c:	40008000 	.word	0x40008000
  400b30:	20000b50 	.word	0x20000b50

00400b34 <ili9225_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9225_display_on(void)
{
  400b34:	b508      	push	{r3, lr}
	ili9225_write_register(ILI9225_DISP_CTRL1,
  400b36:	2007      	movs	r0, #7
  400b38:	f241 0117 	movw	r1, #4119	; 0x1017
  400b3c:	4b01      	ldr	r3, [pc, #4]	; (400b44 <ili9225_display_on+0x10>)
  400b3e:	4798      	blx	r3
  400b40:	bd08      	pop	{r3, pc}
  400b42:	bf00      	nop
  400b44:	00400b05 	.word	0x00400b05

00400b48 <ili9225_display_off>:

/**
 * \brief Turn off the LCD.
 */
void ili9225_display_off(void)
{
  400b48:	b508      	push	{r3, lr}
	ili9225_write_register(ILI9225_DISP_CTRL1, 0x0000);
  400b4a:	2007      	movs	r0, #7
  400b4c:	2100      	movs	r1, #0
  400b4e:	4b01      	ldr	r3, [pc, #4]	; (400b54 <ili9225_display_off+0xc>)
  400b50:	4798      	blx	r3
  400b52:	bd08      	pop	{r3, pc}
  400b54:	00400b05 	.word	0x00400b05

00400b58 <ili9225_set_foreground_color>:
	uint32_t i;
	ili9225_color_t w_color;

	/* Convert 24 bit RGB color into 5-6-5 RGB color */
	w_color = (ul_rgb24bits & 0xF80000) >> 8 |
			(ul_rgb24bits & 0x00FC00) >> 5 |
  400b58:	f400 417c 	and.w	r1, r0, #64512	; 0xfc00
{
	uint32_t i;
	ili9225_color_t w_color;

	/* Convert 24 bit RGB color into 5-6-5 RGB color */
	w_color = (ul_rgb24bits & 0xF80000) >> 8 |
  400b5c:	f400 0378 	and.w	r3, r0, #16252928	; 0xf80000
  400b60:	0a1b      	lsrs	r3, r3, #8
  400b62:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
			(ul_rgb24bits & 0x00FC00) >> 5 |
			(ul_rgb24bits & 0x0000F8) >> 3;
  400b66:	f3c0 00c4 	ubfx	r0, r0, #3, #5
{
	uint32_t i;
	ili9225_color_t w_color;

	/* Convert 24 bit RGB color into 5-6-5 RGB color */
	w_color = (ul_rgb24bits & 0xF80000) >> 8 |
  400b6a:	4301      	orrs	r1, r0
  400b6c:	4a04      	ldr	r2, [pc, #16]	; (400b80 <ili9225_set_foreground_color+0x28>)
  400b6e:	1e93      	subs	r3, r2, #2
  400b70:	f502 72af 	add.w	r2, r2, #350	; 0x15e
			(ul_rgb24bits & 0x00FC00) >> 5 |
			(ul_rgb24bits & 0x0000F8) >> 3;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = w_color;
  400b74:	f823 1f02 	strh.w	r1, [r3, #2]!
	w_color = (ul_rgb24bits & 0xF80000) >> 8 |
			(ul_rgb24bits & 0x00FC00) >> 5 |
			(ul_rgb24bits & 0x0000F8) >> 3;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400b78:	4293      	cmp	r3, r2
  400b7a:	d1fb      	bne.n	400b74 <ili9225_set_foreground_color+0x1c>
		g_ul_pixel_cache[i] = w_color;
	}
}
  400b7c:	4770      	bx	lr
  400b7e:	bf00      	nop
  400b80:	200009f0 	.word	0x200009f0

00400b84 <ili9225_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9225_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  400b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b86:	4606      	mov	r6, r0
  400b88:	460d      	mov	r5, r1
  400b8a:	461f      	mov	r7, r3
	Assert(ul_width <= (0xB0 - ul_x));
	Assert(ul_height <= (0xDC - ul_y));

	/* Set Horizontal Address End Position */
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,
			ILI9225_HORIZONTAL_WINDOW_ADDR1_HEA((uint16_t)(ul_x + ul_width - 1)));
  400b8c:	3a01      	subs	r2, #1
  400b8e:	1811      	adds	r1, r2, r0
	Assert(ul_y <= 0xDB);
	Assert(ul_width <= (0xB0 - ul_x));
	Assert(ul_height <= (0xDC - ul_y));

	/* Set Horizontal Address End Position */
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,
  400b90:	2036      	movs	r0, #54	; 0x36
  400b92:	b2c9      	uxtb	r1, r1
  400b94:	4c06      	ldr	r4, [pc, #24]	; (400bb0 <ili9225_set_window+0x2c>)
  400b96:	47a0      	blx	r4
			ILI9225_HORIZONTAL_WINDOW_ADDR1_HEA((uint16_t)(ul_x + ul_width - 1)));

	/* Set Horizontal Address Start Position */
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,
  400b98:	2037      	movs	r0, #55	; 0x37
  400b9a:	b2f1      	uxtb	r1, r6
  400b9c:	47a0      	blx	r4
			ILI9225_HORIZONTAL_WINDOW_ADDR2_HSA((uint16_t)ul_x));

	/* Set Vertical Address End Position */
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,
			ILI9225_VERTICAL_WINDOW_ADDR1_VEA((uint16_t)(ul_y + ul_height - 1)));
  400b9e:	3f01      	subs	r7, #1
  400ba0:	1979      	adds	r1, r7, r5
	/* Set Horizontal Address Start Position */
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,
			ILI9225_HORIZONTAL_WINDOW_ADDR2_HSA((uint16_t)ul_x));

	/* Set Vertical Address End Position */
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,
  400ba2:	2038      	movs	r0, #56	; 0x38
  400ba4:	b2c9      	uxtb	r1, r1
  400ba6:	47a0      	blx	r4
			ILI9225_VERTICAL_WINDOW_ADDR1_VEA((uint16_t)(ul_y + ul_height - 1)));

	/* Set Vertical Address Start Position */
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,
  400ba8:	2039      	movs	r0, #57	; 0x39
  400baa:	b2e9      	uxtb	r1, r5
  400bac:	47a0      	blx	r4
  400bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bb0:	00400b05 	.word	0x00400b05

00400bb4 <ili9225_set_cursor_position>:
 *
 * \param ul_x X coordinate of upper-left corner on LCD.
 * \param ul_y Y coordinate of upper-left corner on LCD.
 */
void ili9225_set_cursor_position(uint16_t ul_x, uint16_t ul_y)
{
  400bb4:	b538      	push	{r3, r4, r5, lr}
  400bb6:	460d      	mov	r5, r1
	/* GRAM Horizontal/Vertical Address Set (R20h, R21h) */
	ili9225_write_register(ILI9225_RAM_ADDR_SET1, ILI9225_RAM_ADDR_SET1_AD(ul_x));  /* column */
  400bb8:	b2c1      	uxtb	r1, r0
  400bba:	2020      	movs	r0, #32
  400bbc:	4c02      	ldr	r4, [pc, #8]	; (400bc8 <ili9225_set_cursor_position+0x14>)
  400bbe:	47a0      	blx	r4
	ili9225_write_register(ILI9225_RAM_ADDR_SET2, ILI9225_RAM_ADDR_SET2_AD(ul_y));  /* row */
  400bc0:	2021      	movs	r0, #33	; 0x21
  400bc2:	b2e9      	uxtb	r1, r5
  400bc4:	47a0      	blx	r4
  400bc6:	bd38      	pop	{r3, r4, r5, pc}
  400bc8:	00400b05 	.word	0x00400b05

00400bcc <ili9225_init>:
 * \param p_opt pointer to ILI9225 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9225_init(struct ili9225_opt_t *p_opt)
{
  400bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400bd0:	b085      	sub	sp, #20
  400bd2:	4681      	mov	r9, r0
	struct spi_device ILI9225_SPI_DEVICE = {
  400bd4:	f04f 0802 	mov.w	r8, #2
  400bd8:	af04      	add	r7, sp, #16
  400bda:	f847 8d04 	str.w	r8, [r7, #-4]!
		// Board specific chip select configuration
		.id = BOARD_ILI9225_SPI_NPCS
	};

	/* Reset LCD module */
	gpio_set_pin_high(BOARD_ILI9225_RSTN_GPIO);
  400bde:	201d      	movs	r0, #29
  400be0:	4c5e      	ldr	r4, [pc, #376]	; (400d5c <ili9225_init+0x190>)
  400be2:	47a0      	blx	r4
	ili9225_delay(2); /* wait for at least 2ms */
  400be4:	4640      	mov	r0, r8
  400be6:	4e5e      	ldr	r6, [pc, #376]	; (400d60 <ili9225_init+0x194>)
  400be8:	47b0      	blx	r6

	gpio_set_pin_low(BOARD_ILI9225_RSTN_GPIO);
  400bea:	201d      	movs	r0, #29
  400bec:	4b5d      	ldr	r3, [pc, #372]	; (400d64 <ili9225_init+0x198>)
  400bee:	4798      	blx	r3
	ili9225_delay(20); /* wait for at least 20ms */
  400bf0:	2014      	movs	r0, #20
  400bf2:	47b0      	blx	r6

	gpio_set_pin_high(BOARD_ILI9225_RSTN_GPIO);
  400bf4:	201d      	movs	r0, #29
  400bf6:	47a0      	blx	r4
	ili9225_delay(50); /* wait for at least 50ms */
  400bf8:	2032      	movs	r0, #50	; 0x32
  400bfa:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400bfc:	4c5a      	ldr	r4, [pc, #360]	; (400d68 <ili9225_init+0x19c>)
  400bfe:	f8c4 8000 	str.w	r8, [r4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400c02:	2380      	movs	r3, #128	; 0x80
  400c04:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  400c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400c0a:	6023      	str	r3, [r4, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400c0c:	4b57      	ldr	r3, [pc, #348]	; (400d6c <ili9225_init+0x1a0>)
  400c0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400c16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400c1a:	2500      	movs	r5, #0
  400c1c:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  400c20:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(BOARD_ILI9225_SPI_IRQN);
	NVIC_SetPriority(BOARD_ILI9225_SPI_IRQN, 0);
	NVIC_EnableIRQ(BOARD_ILI9225_SPI_IRQN);

	/* Init, select and configure the chip */
	spi_master_init(BOARD_ILI9225_SPI);
  400c22:	4620      	mov	r0, r4
  400c24:	4b52      	ldr	r3, [pc, #328]	; (400d70 <ili9225_init+0x1a4>)
  400c26:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9225_SPI, &ILI9225_SPI_DEVICE, SPI_MODE_0, ILI9225_SPI_BAUDRATE, 0);
  400c28:	9500      	str	r5, [sp, #0]
  400c2a:	4620      	mov	r0, r4
  400c2c:	4639      	mov	r1, r7
  400c2e:	462a      	mov	r2, r5
  400c30:	4b50      	ldr	r3, [pc, #320]	; (400d74 <ili9225_init+0x1a8>)
  400c32:	f8df c15c 	ldr.w	ip, [pc, #348]	; 400d90 <ili9225_init+0x1c4>
  400c36:	47e0      	blx	ip
	spi_select_device(BOARD_ILI9225_SPI, &ILI9225_SPI_DEVICE);
  400c38:	4620      	mov	r0, r4
  400c3a:	4639      	mov	r1, r7
  400c3c:	4b4e      	ldr	r3, [pc, #312]	; (400d78 <ili9225_init+0x1ac>)
  400c3e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400c40:	2701      	movs	r7, #1
  400c42:	6027      	str	r7, [r4, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400c44:	6167      	str	r7, [r4, #20]
	/* Enable the SPI peripheral */
	spi_enable(BOARD_ILI9225_SPI);
	spi_enable_interrupt(BOARD_ILI9225_SPI, SPI_IER_RDRF);

	/* Turn off LCD */
	ili9225_display_off();
  400c46:	4b4d      	ldr	r3, [pc, #308]	; (400d7c <ili9225_init+0x1b0>)
  400c48:	4798      	blx	r3

	/* Start Initial Sequence */
	/* Set SS bit and direction output from S528 to S1 */
	ili9225_write_register(ILI9225_DRIVER_OUTPUT_CTRL, ILI9225_DRIVER_OUTPUT_CTRL_SS |
  400c4a:	4638      	mov	r0, r7
  400c4c:	f44f 718e 	mov.w	r1, #284	; 0x11c
  400c50:	4c4b      	ldr	r4, [pc, #300]	; (400d80 <ili9225_init+0x1b4>)
  400c52:	47a0      	blx	r4
			ILI9225_DRIVER_OUTPUT_CTRL_NL(0x1c));
	/* Set 1 line inversion */
	ili9225_write_register(ILI9225_LCD_AC_DRIVING_CTRL, ILI9225_LCD_AC_DRIVING_CTRL_INV(0x01));
  400c54:	4640      	mov	r0, r8
  400c56:	f44f 7180 	mov.w	r1, #256	; 0x100
  400c5a:	47a0      	blx	r4
	/* Set GRAM write direction to horizontal */
	ili9225_write_register(ILI9225_ENTRY_MODE, ILI9225_ENTRY_MODE_BGR | ILI9225_ENTRY_MODE_ID(0x03));
  400c5c:	2003      	movs	r0, #3
  400c5e:	f241 0130 	movw	r1, #4144	; 0x1030
  400c62:	47a0      	blx	r4
	/* Set BP and FP */
	ili9225_write_register(ILI9225_BLANK_PERIOD_CTRL1, ILI9225_BLANK_PERIOD_CTRL1_BP(0x08) |
  400c64:	2008      	movs	r0, #8
  400c66:	f640 0108 	movw	r1, #2056	; 0x808
  400c6a:	47a0      	blx	r4
			ILI9225_BLANK_PERIOD_CTRL1_FP(0x08));
	/* RGB Input Interface Control:16-bit RGB interface */
	ili9225_write_register(ILI9225_INTERFACE_CTRL, ILI9225_INTERFACE_CTRL_RIM(0x01));
  400c6c:	200c      	movs	r0, #12
  400c6e:	4639      	mov	r1, r7
  400c70:	47a0      	blx	r4
	/* Set frame rate: 83Hz */
	ili9225_write_register(ILI9225_OSC_CTRL, ILI9225_OSC_CTRL_ON | ILI9225_OSC_CTRL_FOSC(0x0a));
  400c72:	200f      	movs	r0, #15
  400c74:	f640 2101 	movw	r1, #2561	; 0xa01
  400c78:	47a0      	blx	r4
	/* Set GRAM Address */
	ili9225_write_register(ILI9225_RAM_ADDR_SET1, ILI9225_RAM_ADDR_SET1_AD(ILI9225_LCD_WIDTH));
  400c7a:	2020      	movs	r0, #32
  400c7c:	21b0      	movs	r1, #176	; 0xb0
  400c7e:	47a0      	blx	r4
	/* Set GRAM Address */
	ili9225_write_register(ILI9225_RAM_ADDR_SET2, ILI9225_RAM_ADDR_SET2_AD(ILI9225_LCD_HEIGHT));
  400c80:	2021      	movs	r0, #33	; 0x21
  400c82:	21dc      	movs	r1, #220	; 0xdc
  400c84:	47a0      	blx	r4

	/* Power on sequence */
	/* Set the driving capability of source driver and disable standby */
	ili9225_write_register(ILI9225_POWER_CTRL1, ILI9225_POWER_CTRL1_SAP(0x0A));
  400c86:	2010      	movs	r0, #16
  400c88:	f44f 6120 	mov.w	r1, #2560	; 0xa00
  400c8c:	47a0      	blx	r4
	/* Control the booster circuit and set VCI1 voltage */
	ili9225_write_register(ILI9225_POWER_CTRL2, ILI9225_POWER_CTRL2_APON | ILI9225_POWER_CTRL2_AON |
  400c8e:	2011      	movs	r0, #17
  400c90:	f241 0138 	movw	r1, #4152	; 0x1038
  400c94:	47a0      	blx	r4
			ILI9225_POWER_CTRL2_VCI1 | ILI9225_POWER_CTRL2_VC(0x08));
	ili9225_delay(50); /* Wait for at least 50ms */
  400c96:	2032      	movs	r0, #50	; 0x32
  400c98:	47b0      	blx	r6

	/* Select the output factor and operating frequency of step-up circuit */
	ili9225_write_register(ILI9225_POWER_CTRL3, ILI9225_POWER_CTRL3_BT(0x01) |
  400c9a:	2012      	movs	r0, #18
  400c9c:	f241 1121 	movw	r1, #4385	; 0x1121
  400ca0:	47a0      	blx	r4
			ILI9225_POWER_CTRL3_DC1(0x01) | ILI9225_POWER_CTRL3_DC2(0x02) |
			ILI9225_POWER_CTRL3_DC3(0x01));
	/* Set the amplifying factor of the GVDD voltage */
	ili9225_write_register(ILI9225_POWER_CTRL4, ILI9225_POWER_CTRL4_GVD(0x4e));
  400ca2:	2013      	movs	r0, #19
  400ca4:	214e      	movs	r1, #78	; 0x4e
  400ca6:	47a0      	blx	r4
	/* Set the VCOMH voltage and the alternating amplitudes of VCOM */
	ili9225_write_register(ILI9225_POWER_CTRL5, ILI9225_POWER_CTRL5_VCM(0x67) |
  400ca8:	2014      	movs	r0, #20
  400caa:	f246 716f 	movw	r1, #26479	; 0x676f
  400cae:	47a0      	blx	r4
			ILI9225_POWER_CTRL5_VML(0x6f));

	/* Set GRAM area */
	ili9225_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000);
  400cb0:	2030      	movs	r0, #48	; 0x30
  400cb2:	4629      	mov	r1, r5
  400cb4:	47a0      	blx	r4
	ili9225_write_register(ILI9225_VERTICAL_SCROLL_CTRL1,
  400cb6:	2031      	movs	r0, #49	; 0x31
  400cb8:	21db      	movs	r1, #219	; 0xdb
  400cba:	47a0      	blx	r4
			ILI9225_VERTICAL_SCROLL_CTRL1_SEA(0xDB));
	ili9225_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000);
  400cbc:	2032      	movs	r0, #50	; 0x32
  400cbe:	4629      	mov	r1, r5
  400cc0:	47a0      	blx	r4
	ili9225_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000);
  400cc2:	2033      	movs	r0, #51	; 0x33
  400cc4:	4629      	mov	r1, r5
  400cc6:	47a0      	blx	r4
	ili9225_write_register(ILI9225_PARTIAL_DRIVING_POS1,
  400cc8:	2034      	movs	r0, #52	; 0x34
  400cca:	21db      	movs	r1, #219	; 0xdb
  400ccc:	47a0      	blx	r4
			ILI9225_PARTIAL_DRIVING_POS1_SE1(0xDB));
	ili9225_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000);
  400cce:	2035      	movs	r0, #53	; 0x35
  400cd0:	4629      	mov	r1, r5
  400cd2:	47a0      	blx	r4
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,
  400cd4:	2036      	movs	r0, #54	; 0x36
  400cd6:	21b0      	movs	r1, #176	; 0xb0
  400cd8:	47a0      	blx	r4
			ILI9225_HORIZONTAL_WINDOW_ADDR1_HEA(ILI9225_LCD_WIDTH));
	ili9225_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000);
  400cda:	2037      	movs	r0, #55	; 0x37
  400cdc:	4629      	mov	r1, r5
  400cde:	47a0      	blx	r4
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,
  400ce0:	2038      	movs	r0, #56	; 0x38
  400ce2:	21dc      	movs	r1, #220	; 0xdc
  400ce4:	47a0      	blx	r4
			ILI9225_VERTICAL_WINDOW_ADDR1_VEA(ILI9225_LCD_HEIGHT));
	ili9225_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
  400ce6:	2039      	movs	r0, #57	; 0x39
  400ce8:	4629      	mov	r1, r5
  400cea:	47a0      	blx	r4

	/* Set GAMMA curve */
	ili9225_write_register(ILI9225_GAMMA_CTRL1, 0x0000);
  400cec:	2050      	movs	r0, #80	; 0x50
  400cee:	4629      	mov	r1, r5
  400cf0:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL2, ILI9225_GAMMA_CTRL2_KP3(0x06) |
  400cf2:	2051      	movs	r0, #81	; 0x51
  400cf4:	f240 610a 	movw	r1, #1546	; 0x60a
  400cf8:	47a0      	blx	r4
			ILI9225_GAMMA_CTRL2_KP2(0x0A));
	ili9225_write_register(ILI9225_GAMMA_CTRL3, ILI9225_GAMMA_CTRL3_KP5(0x0D) |
  400cfa:	2052      	movs	r0, #82	; 0x52
  400cfc:	f640 510a 	movw	r1, #3338	; 0xd0a
  400d00:	47a0      	blx	r4
			ILI9225_GAMMA_CTRL3_KP4(0x0A));
	ili9225_write_register(ILI9225_GAMMA_CTRL4, ILI9225_GAMMA_CTRL4_RP1(0x03) |
  400d02:	2053      	movs	r0, #83	; 0x53
  400d04:	f240 3103 	movw	r1, #771	; 0x303
  400d08:	47a0      	blx	r4
			ILI9225_GAMMA_CTRL4_RP0(0x03));
	ili9225_write_register(ILI9225_GAMMA_CTRL5, ILI9225_GAMMA_CTRL5_KN1(0x0A) |
  400d0a:	2054      	movs	r0, #84	; 0x54
  400d0c:	f640 210d 	movw	r1, #2573	; 0xa0d
  400d10:	47a0      	blx	r4
			ILI9225_GAMMA_CTRL5_KN0(0x0D));
	ili9225_write_register(ILI9225_GAMMA_CTRL6, ILI9225_GAMMA_CTRL6_KN3(0x0A) |
  400d12:	2055      	movs	r0, #85	; 0x55
  400d14:	f640 2106 	movw	r1, #2566	; 0xa06
  400d18:	47a0      	blx	r4
			ILI9225_GAMMA_CTRL6_KN2(0x06));
	ili9225_write_register(ILI9225_GAMMA_CTRL7, 0x0000);
  400d1a:	2056      	movs	r0, #86	; 0x56
  400d1c:	4629      	mov	r1, r5
  400d1e:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL8, ILI9225_GAMMA_CTRL8_RN1(0x03) |
  400d20:	2057      	movs	r0, #87	; 0x57
  400d22:	f240 3103 	movw	r1, #771	; 0x303
  400d26:	47a0      	blx	r4
			ILI9225_GAMMA_CTRL8_RN0(0x03));
	ili9225_write_register(ILI9225_GAMMA_CTRL9, 0x0000);
  400d28:	2058      	movs	r0, #88	; 0x58
  400d2a:	4629      	mov	r1, r5
  400d2c:	47a0      	blx	r4
	ili9225_write_register(ILI9225_GAMMA_CTRL10, 0x0000);
  400d2e:	2059      	movs	r0, #89	; 0x59
  400d30:	4629      	mov	r1, r5
  400d32:	47a0      	blx	r4

	/* Initialize display setting */
	ili9225_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  400d34:	4628      	mov	r0, r5
  400d36:	4629      	mov	r1, r5
  400d38:	f8d9 2000 	ldr.w	r2, [r9]
  400d3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400d40:	4c10      	ldr	r4, [pc, #64]	; (400d84 <ili9225_init+0x1b8>)
  400d42:	47a0      	blx	r4
	ili9225_set_foreground_color(p_opt->foreground_color);
  400d44:	f8d9 0008 	ldr.w	r0, [r9, #8]
  400d48:	4b0f      	ldr	r3, [pc, #60]	; (400d88 <ili9225_init+0x1bc>)
  400d4a:	4798      	blx	r3
	ili9225_set_cursor_position(0, 0);
  400d4c:	4628      	mov	r0, r5
  400d4e:	4629      	mov	r1, r5
  400d50:	4b0e      	ldr	r3, [pc, #56]	; (400d8c <ili9225_init+0x1c0>)
  400d52:	4798      	blx	r3
	return 0;
}
  400d54:	4628      	mov	r0, r5
  400d56:	b005      	add	sp, #20
  400d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d5c:	00400fdd 	.word	0x00400fdd
  400d60:	00400a59 	.word	0x00400a59
  400d64:	00400ff9 	.word	0x00400ff9
  400d68:	40008000 	.word	0x40008000
  400d6c:	e000e100 	.word	0xe000e100
  400d70:	00400769 	.word	0x00400769
  400d74:	00bebc20 	.word	0x00bebc20
  400d78:	00400839 	.word	0x00400839
  400d7c:	00400b49 	.word	0x00400b49
  400d80:	00400b05 	.word	0x00400b05
  400d84:	00400b85 	.word	0x00400b85
  400d88:	00400b59 	.word	0x00400b59
  400d8c:	00400bb5 	.word	0x00400bb5
  400d90:	004007bd 	.word	0x004007bd

00400d94 <ili9225_fill>:
 * \brief Fill the LCD buffer with the specified color.
 *
 * \param us_color fill color.
 */
void ili9225_fill(ili9225_color_t us_color)
{
  400d94:	b570      	push	{r4, r5, r6, lr}
  400d96:	4606      	mov	r6, r0
	uint32_t i;

	ili9225_set_cursor_position(0, 0);
  400d98:	2000      	movs	r0, #0
  400d9a:	4601      	mov	r1, r0
  400d9c:	4b06      	ldr	r3, [pc, #24]	; (400db8 <ili9225_fill+0x24>)
  400d9e:	4798      	blx	r3
/**
 * \brief Prepare to write GRAM data.
 */
static void ili9225_write_ram_prepare(void)
{
	ili9225_write_cmd(ILI9225_GRAM_DATA_REG);
  400da0:	2022      	movs	r0, #34	; 0x22
  400da2:	4b06      	ldr	r3, [pc, #24]	; (400dbc <ili9225_fill+0x28>)
  400da4:	4798      	blx	r3
  400da6:	f249 7440 	movw	r4, #38720	; 0x9740

	ili9225_set_cursor_position(0, 0);
	ili9225_write_ram_prepare();

	for (i = ILI9225_LCD_WIDTH * ILI9225_LCD_HEIGHT; i > 0; i--) {
		ili9225_write_ram(us_color);
  400daa:	4d05      	ldr	r5, [pc, #20]	; (400dc0 <ili9225_fill+0x2c>)
  400dac:	4630      	mov	r0, r6
  400dae:	47a8      	blx	r5
	uint32_t i;

	ili9225_set_cursor_position(0, 0);
	ili9225_write_ram_prepare();

	for (i = ILI9225_LCD_WIDTH * ILI9225_LCD_HEIGHT; i > 0; i--) {
  400db0:	3c01      	subs	r4, #1
  400db2:	d1fb      	bne.n	400dac <ili9225_fill+0x18>
		ili9225_write_ram(us_color);
	}
}
  400db4:	bd70      	pop	{r4, r5, r6, pc}
  400db6:	bf00      	nop
  400db8:	00400bb5 	.word	0x00400bb5
  400dbc:	00400a91 	.word	0x00400a91
  400dc0:	00400ad5 	.word	0x00400ad5

00400dc4 <ili9225_draw_pixel>:
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9225_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  400dc4:	b508      	push	{r3, lr}
	if ((ul_x >= ILI9225_LCD_WIDTH) || (ul_y >= ILI9225_LCD_HEIGHT)) {
  400dc6:	28af      	cmp	r0, #175	; 0xaf
  400dc8:	d80e      	bhi.n	400de8 <ili9225_draw_pixel+0x24>
  400dca:	29db      	cmp	r1, #219	; 0xdb
  400dcc:	d80e      	bhi.n	400dec <ili9225_draw_pixel+0x28>
		return 1;
	}

	/* Set cursor */
	ili9225_set_cursor_position(ul_x, ul_y);
  400dce:	b280      	uxth	r0, r0
  400dd0:	b289      	uxth	r1, r1
  400dd2:	4b07      	ldr	r3, [pc, #28]	; (400df0 <ili9225_draw_pixel+0x2c>)
  400dd4:	4798      	blx	r3
/**
 * \brief Prepare to write GRAM data.
 */
static void ili9225_write_ram_prepare(void)
{
	ili9225_write_cmd(ILI9225_GRAM_DATA_REG);
  400dd6:	2022      	movs	r0, #34	; 0x22
  400dd8:	4b06      	ldr	r3, [pc, #24]	; (400df4 <ili9225_draw_pixel+0x30>)
  400dda:	4798      	blx	r3
	/* Set cursor */
	ili9225_set_cursor_position(ul_x, ul_y);

	/* Prepare to write in GRAM */
	ili9225_write_ram_prepare();
	ili9225_write_ram(*g_ul_pixel_cache);
  400ddc:	4b06      	ldr	r3, [pc, #24]	; (400df8 <ili9225_draw_pixel+0x34>)
  400dde:	8818      	ldrh	r0, [r3, #0]
  400de0:	4b06      	ldr	r3, [pc, #24]	; (400dfc <ili9225_draw_pixel+0x38>)
  400de2:	4798      	blx	r3
	return 0;
  400de4:	2000      	movs	r0, #0
  400de6:	bd08      	pop	{r3, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9225_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9225_LCD_WIDTH) || (ul_y >= ILI9225_LCD_HEIGHT)) {
		return 1;
  400de8:	2001      	movs	r0, #1
  400dea:	bd08      	pop	{r3, pc}
  400dec:	2001      	movs	r0, #1

	/* Prepare to write in GRAM */
	ili9225_write_ram_prepare();
	ili9225_write_ram(*g_ul_pixel_cache);
	return 0;
}
  400dee:	bd08      	pop	{r3, pc}
  400df0:	00400bb5 	.word	0x00400bb5
  400df4:	00400a91 	.word	0x00400a91
  400df8:	200009f0 	.word	0x200009f0
  400dfc:	00400ad5 	.word	0x00400ad5

00400e00 <ili9225_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9225_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e04:	b087      	sub	sp, #28
  400e06:	9004      	str	r0, [sp, #16]
  400e08:	468b      	mov	fp, r1
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400e0a:	7813      	ldrb	r3, [r2, #0]
  400e0c:	2b00      	cmp	r3, #0
  400e0e:	d04a      	beq.n	400ea6 <ili9225_draw_string+0xa6>
  400e10:	9203      	str	r2, [sp, #12]
  400e12:	9002      	str	r0, [sp, #8]
  400e14:	4a25      	ldr	r2, [pc, #148]	; (400eac <ili9225_draw_string+0xac>)
  400e16:	f2a2 226b 	subw	r2, r2, #619	; 0x26b
  400e1a:	9205      	str	r2, [sp, #20]
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9225_draw_pixel(ul_x + col, ul_y + row);
  400e1c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 400eb0 <ili9225_draw_string+0xb0>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  400e20:	2b0a      	cmp	r3, #10
  400e22:	d104      	bne.n	400e2e <ili9225_draw_string+0x2e>
			ul_y += gfont.height + 2;
  400e24:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  400e28:	9b04      	ldr	r3, [sp, #16]
  400e2a:	9302      	str	r3, [sp, #8]
  400e2c:	e035      	b.n	400e9a <ili9225_draw_string+0x9a>
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400e2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400e32:	009b      	lsls	r3, r3, #2
				ili9225_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  400e34:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  400e38:	4a1c      	ldr	r2, [pc, #112]	; (400eac <ili9225_draw_string+0xac>)
  400e3a:	4416      	add	r6, r2
  400e3c:	9a05      	ldr	r2, [sp, #20]
  400e3e:	441a      	add	r2, r3
  400e40:	9201      	str	r2, [sp, #4]
  400e42:	f8dd 8008 	ldr.w	r8, [sp, #8]
  400e46:	2407      	movs	r4, #7
  400e48:	4637      	mov	r7, r6
  400e4a:	eb0b 0a04 	add.w	sl, fp, r4
  400e4e:	463d      	mov	r5, r7
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400e50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  400e54:	4123      	asrs	r3, r4
  400e56:	f013 0f01 	tst.w	r3, #1
  400e5a:	d003      	beq.n	400e64 <ili9225_draw_string+0x64>
				ili9225_draw_pixel(ul_x + col, ul_y + row);
  400e5c:	4640      	mov	r0, r8
  400e5e:	ebc4 010a 	rsb	r1, r4, sl
  400e62:	47c8      	blx	r9
  400e64:	3c01      	subs	r4, #1
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  400e66:	f1b4 3fff 	cmp.w	r4, #4294967295
  400e6a:	d1f0      	bne.n	400e4e <ili9225_draw_string+0x4e>
  400e6c:	2407      	movs	r4, #7
  400e6e:	f10b 070f 	add.w	r7, fp, #15
				ili9225_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  400e72:	782b      	ldrb	r3, [r5, #0]
  400e74:	4123      	asrs	r3, r4
  400e76:	f013 0f01 	tst.w	r3, #1
  400e7a:	d002      	beq.n	400e82 <ili9225_draw_string+0x82>
				ili9225_draw_pixel(ul_x + col, ul_y + row + 8);
  400e7c:	4640      	mov	r0, r8
  400e7e:	1b39      	subs	r1, r7, r4
  400e80:	47c8      	blx	r9
  400e82:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9225_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  400e84:	2c01      	cmp	r4, #1
  400e86:	d1f4      	bne.n	400e72 <ili9225_draw_string+0x72>
  400e88:	3602      	adds	r6, #2
  400e8a:	f108 0801 	add.w	r8, r8, #1

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  400e8e:	9b01      	ldr	r3, [sp, #4]
  400e90:	429e      	cmp	r6, r3
  400e92:	d1d8      	bne.n	400e46 <ili9225_draw_string+0x46>
			ul_y += gfont.height + 2;
			ul_x = xorg;
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9225_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400e94:	9a02      	ldr	r2, [sp, #8]
  400e96:	320c      	adds	r2, #12
  400e98:	9202      	str	r2, [sp, #8]
 */
void ili9225_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400e9a:	9a03      	ldr	r2, [sp, #12]
  400e9c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400ea0:	9203      	str	r2, [sp, #12]
  400ea2:	2b00      	cmp	r3, #0
  400ea4:	d1bc      	bne.n	400e20 <ili9225_draw_string+0x20>
			ili9225_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
		}
		p_str++;
	}
}
  400ea6:	b007      	add	sp, #28
  400ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400eac:	0040ae38 	.word	0x0040ae38
  400eb0:	00400dc5 	.word	0x00400dc5

00400eb4 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400eb4:	460b      	mov	r3, r1
  400eb6:	b119      	cbz	r1, 400ec0 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  400eb8:	6809      	ldr	r1, [r1, #0]
  400eba:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  400ebc:	685b      	ldr	r3, [r3, #4]
  400ebe:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  400ec0:	b11a      	cbz	r2, 400eca <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400ec2:	6813      	ldr	r3, [r2, #0]
  400ec4:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400ec6:	6853      	ldr	r3, [r2, #4]
  400ec8:	6143      	str	r3, [r0, #20]
  400eca:	4770      	bx	lr

00400ecc <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  400ecc:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  400ed0:	05c9      	lsls	r1, r1, #23
  400ed2:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400ed4:	6201      	str	r1, [r0, #32]
  400ed6:	4770      	bx	lr

00400ed8 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  400ed8:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  400edc:	f021 0101 	bic.w	r1, r1, #1
  400ee0:	0589      	lsls	r1, r1, #22
  400ee2:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400ee4:	6201      	str	r1, [r0, #32]
  400ee6:	4770      	bx	lr

00400ee8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400ee8:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400eea:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400eec:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ef0:	d02e      	beq.n	400f50 <pio_set_peripheral+0x68>
  400ef2:	d808      	bhi.n	400f06 <pio_set_peripheral+0x1e>
  400ef4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400ef8:	d014      	beq.n	400f24 <pio_set_peripheral+0x3c>
  400efa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400efe:	d01d      	beq.n	400f3c <pio_set_peripheral+0x54>
  400f00:	2900      	cmp	r1, #0
  400f02:	d135      	bne.n	400f70 <pio_set_peripheral+0x88>
  400f04:	e035      	b.n	400f72 <pio_set_peripheral+0x8a>
  400f06:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f0a:	d032      	beq.n	400f72 <pio_set_peripheral+0x8a>
  400f0c:	d803      	bhi.n	400f16 <pio_set_peripheral+0x2e>
  400f0e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f12:	d027      	beq.n	400f64 <pio_set_peripheral+0x7c>
  400f14:	e02c      	b.n	400f70 <pio_set_peripheral+0x88>
  400f16:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f1a:	d02a      	beq.n	400f72 <pio_set_peripheral+0x8a>
  400f1c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f20:	d027      	beq.n	400f72 <pio_set_peripheral+0x8a>
  400f22:	e025      	b.n	400f70 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f24:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f26:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400f28:	43d3      	mvns	r3, r2
  400f2a:	4021      	ands	r1, r4
  400f2c:	4019      	ands	r1, r3
  400f2e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f30:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f32:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400f34:	4021      	ands	r1, r4
  400f36:	400b      	ands	r3, r1
  400f38:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f3a:	e019      	b.n	400f70 <pio_set_peripheral+0x88>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f3c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f3e:	4313      	orrs	r3, r2
  400f40:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f42:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f44:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f46:	400b      	ands	r3, r1
  400f48:	ea23 0302 	bic.w	r3, r3, r2
  400f4c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f4e:	e00f      	b.n	400f70 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f50:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f52:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400f54:	400b      	ands	r3, r1
  400f56:	ea23 0302 	bic.w	r3, r3, r2
  400f5a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f5c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f5e:	4313      	orrs	r3, r2
  400f60:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f62:	e005      	b.n	400f70 <pio_set_peripheral+0x88>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f64:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f66:	4313      	orrs	r3, r2
  400f68:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f6a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f6c:	4313      	orrs	r3, r2
  400f6e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f70:	6042      	str	r2, [r0, #4]
}
  400f72:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f76:	4770      	bx	lr

00400f78 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400f78:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f7a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400f7e:	bf14      	ite	ne
  400f80:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f82:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400f84:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400f88:	bf14      	ite	ne
  400f8a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400f8c:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400f8e:	f012 0f02 	tst.w	r2, #2
  400f92:	d002      	beq.n	400f9a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400f94:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400f98:	e004      	b.n	400fa4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400f9a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400f9e:	bf18      	it	ne
  400fa0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400fa4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400fa6:	6001      	str	r1, [r0, #0]
  400fa8:	4770      	bx	lr
  400faa:	bf00      	nop

00400fac <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400fac:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400fae:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400fb0:	9c01      	ldr	r4, [sp, #4]
  400fb2:	b10c      	cbz	r4, 400fb8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400fb4:	6641      	str	r1, [r0, #100]	; 0x64
  400fb6:	e000      	b.n	400fba <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400fb8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400fba:	b10b      	cbz	r3, 400fc0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400fbc:	6501      	str	r1, [r0, #80]	; 0x50
  400fbe:	e000      	b.n	400fc2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400fc0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400fc2:	b10a      	cbz	r2, 400fc8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400fc4:	6301      	str	r1, [r0, #48]	; 0x30
  400fc6:	e000      	b.n	400fca <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400fc8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400fca:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400fcc:	6001      	str	r1, [r0, #0]
}
  400fce:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fd2:	4770      	bx	lr

00400fd4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400fd4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400fd6:	4770      	bx	lr

00400fd8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400fd8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400fda:	4770      	bx	lr

00400fdc <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400fdc:	0943      	lsrs	r3, r0, #5
  400fde:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400fe2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400fe6:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400fe8:	f000 001f 	and.w	r0, r0, #31
  400fec:	2201      	movs	r2, #1
  400fee:	fa02 f000 	lsl.w	r0, r2, r0
  400ff2:	6318      	str	r0, [r3, #48]	; 0x30
  400ff4:	4770      	bx	lr
  400ff6:	bf00      	nop

00400ff8 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400ff8:	0943      	lsrs	r3, r0, #5
  400ffa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400ffe:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401002:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401004:	f000 001f 	and.w	r0, r0, #31
  401008:	2201      	movs	r2, #1
  40100a:	fa02 f000 	lsl.w	r0, r2, r0
  40100e:	6358      	str	r0, [r3, #52]	; 0x34
  401010:	4770      	bx	lr
  401012:	bf00      	nop

00401014 <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401014:	0943      	lsrs	r3, r0, #5
  401016:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40101a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40101e:	025b      	lsls	r3, r3, #9
 */
void pio_toggle_pin(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  401020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401022:	f000 001f 	and.w	r0, r0, #31
  401026:	2101      	movs	r1, #1
  401028:	fa01 f000 	lsl.w	r0, r1, r0
  40102c:	4210      	tst	r0, r2
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40102e:	bf14      	ite	ne
  401030:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401032:	6318      	streq	r0, [r3, #48]	; 0x30
  401034:	4770      	bx	lr
  401036:	bf00      	nop

00401038 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401038:	b570      	push	{r4, r5, r6, lr}
  40103a:	b082      	sub	sp, #8
  40103c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40103e:	0944      	lsrs	r4, r0, #5
  401040:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  401044:	f204 7407 	addw	r4, r4, #1799	; 0x707
  401048:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40104a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
  40104e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  401052:	d047      	beq.n	4010e4 <pio_configure_pin+0xac>
  401054:	d809      	bhi.n	40106a <pio_configure_pin+0x32>
  401056:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  40105a:	d021      	beq.n	4010a0 <pio_configure_pin+0x68>
  40105c:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  401060:	d02f      	beq.n	4010c2 <pio_configure_pin+0x8a>
  401062:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  401066:	d16f      	bne.n	401148 <pio_configure_pin+0x110>
  401068:	e009      	b.n	40107e <pio_configure_pin+0x46>
  40106a:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  40106e:	d055      	beq.n	40111c <pio_configure_pin+0xe4>
  401070:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401074:	d052      	beq.n	40111c <pio_configure_pin+0xe4>
  401076:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  40107a:	d044      	beq.n	401106 <pio_configure_pin+0xce>
  40107c:	e064      	b.n	401148 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40107e:	f000 001f 	and.w	r0, r0, #31
  401082:	2401      	movs	r4, #1
  401084:	4084      	lsls	r4, r0
  401086:	4630      	mov	r0, r6
  401088:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40108c:	4622      	mov	r2, r4
  40108e:	4b30      	ldr	r3, [pc, #192]	; (401150 <pio_configure_pin+0x118>)
  401090:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401092:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401096:	bf14      	ite	ne
  401098:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40109a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40109c:	2001      	movs	r0, #1
  40109e:	e054      	b.n	40114a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4010a0:	f000 001f 	and.w	r0, r0, #31
  4010a4:	2401      	movs	r4, #1
  4010a6:	4084      	lsls	r4, r0
  4010a8:	4630      	mov	r0, r6
  4010aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4010ae:	4622      	mov	r2, r4
  4010b0:	4b27      	ldr	r3, [pc, #156]	; (401150 <pio_configure_pin+0x118>)
  4010b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4010b4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4010b8:	bf14      	ite	ne
  4010ba:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4010bc:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4010be:	2001      	movs	r0, #1
  4010c0:	e043      	b.n	40114a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4010c2:	f000 001f 	and.w	r0, r0, #31
  4010c6:	2401      	movs	r4, #1
  4010c8:	4084      	lsls	r4, r0
  4010ca:	4630      	mov	r0, r6
  4010cc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4010d0:	4622      	mov	r2, r4
  4010d2:	4b1f      	ldr	r3, [pc, #124]	; (401150 <pio_configure_pin+0x118>)
  4010d4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4010d6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4010da:	bf14      	ite	ne
  4010dc:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4010de:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4010e0:	2001      	movs	r0, #1
  4010e2:	e032      	b.n	40114a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4010e4:	f000 001f 	and.w	r0, r0, #31
  4010e8:	2401      	movs	r4, #1
  4010ea:	4084      	lsls	r4, r0
  4010ec:	4630      	mov	r0, r6
  4010ee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4010f2:	4622      	mov	r2, r4
  4010f4:	4b16      	ldr	r3, [pc, #88]	; (401150 <pio_configure_pin+0x118>)
  4010f6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4010f8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4010fc:	bf14      	ite	ne
  4010fe:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401100:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401102:	2001      	movs	r0, #1
  401104:	e021      	b.n	40114a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401106:	f000 011f 	and.w	r1, r0, #31
  40110a:	2401      	movs	r4, #1
  40110c:	4630      	mov	r0, r6
  40110e:	fa04 f101 	lsl.w	r1, r4, r1
  401112:	462a      	mov	r2, r5
  401114:	4b0f      	ldr	r3, [pc, #60]	; (401154 <pio_configure_pin+0x11c>)
  401116:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  401118:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40111a:	e016      	b.n	40114a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40111c:	f000 011f 	and.w	r1, r0, #31
  401120:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401122:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401126:	ea05 0304 	and.w	r3, r5, r4
  40112a:	9300      	str	r3, [sp, #0]
  40112c:	4630      	mov	r0, r6
  40112e:	fa04 f101 	lsl.w	r1, r4, r1
  401132:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401136:	bf14      	ite	ne
  401138:	2200      	movne	r2, #0
  40113a:	2201      	moveq	r2, #1
  40113c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401140:	4d05      	ldr	r5, [pc, #20]	; (401158 <pio_configure_pin+0x120>)
  401142:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  401144:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401146:	e000      	b.n	40114a <pio_configure_pin+0x112>

	default:
		return 0;
  401148:	2000      	movs	r0, #0
	}

	return 1;
}
  40114a:	b002      	add	sp, #8
  40114c:	bd70      	pop	{r4, r5, r6, pc}
  40114e:	bf00      	nop
  401150:	00400ee9 	.word	0x00400ee9
  401154:	00400f79 	.word	0x00400f79
  401158:	00400fad 	.word	0x00400fad

0040115c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40115c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40115e:	b083      	sub	sp, #12
  401160:	4607      	mov	r7, r0
  401162:	460e      	mov	r6, r1
  401164:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401166:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  40116a:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  40116e:	d038      	beq.n	4011e2 <pio_configure_pin_group+0x86>
  401170:	d809      	bhi.n	401186 <pio_configure_pin_group+0x2a>
  401172:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  401176:	d01c      	beq.n	4011b2 <pio_configure_pin_group+0x56>
  401178:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  40117c:	d025      	beq.n	4011ca <pio_configure_pin_group+0x6e>
  40117e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  401182:	d150      	bne.n	401226 <pio_configure_pin_group+0xca>
  401184:	e009      	b.n	40119a <pio_configure_pin_group+0x3e>
  401186:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  40118a:	d03a      	beq.n	401202 <pio_configure_pin_group+0xa6>
  40118c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  401190:	d037      	beq.n	401202 <pio_configure_pin_group+0xa6>
  401192:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  401196:	d030      	beq.n	4011fa <pio_configure_pin_group+0x9e>
  401198:	e045      	b.n	401226 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40119a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40119e:	4632      	mov	r2, r6
  4011a0:	4b22      	ldr	r3, [pc, #136]	; (40122c <pio_configure_pin_group+0xd0>)
  4011a2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4011a4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4011a8:	bf14      	ite	ne
  4011aa:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4011ac:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4011ae:	2001      	movs	r0, #1
  4011b0:	e03a      	b.n	401228 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4011b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011b6:	4632      	mov	r2, r6
  4011b8:	4b1c      	ldr	r3, [pc, #112]	; (40122c <pio_configure_pin_group+0xd0>)
  4011ba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4011bc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4011c0:	bf14      	ite	ne
  4011c2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4011c4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4011c6:	2001      	movs	r0, #1
  4011c8:	e02e      	b.n	401228 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4011ca:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4011ce:	4632      	mov	r2, r6
  4011d0:	4b16      	ldr	r3, [pc, #88]	; (40122c <pio_configure_pin_group+0xd0>)
  4011d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4011d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4011d8:	bf14      	ite	ne
  4011da:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4011dc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4011de:	2001      	movs	r0, #1
  4011e0:	e022      	b.n	401228 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4011e2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4011e6:	4632      	mov	r2, r6
  4011e8:	4b10      	ldr	r3, [pc, #64]	; (40122c <pio_configure_pin_group+0xd0>)
  4011ea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4011ec:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4011f0:	bf14      	ite	ne
  4011f2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4011f4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4011f6:	2001      	movs	r0, #1
  4011f8:	e016      	b.n	401228 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4011fa:	4b0d      	ldr	r3, [pc, #52]	; (401230 <pio_configure_pin_group+0xd4>)
  4011fc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4011fe:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401200:	e012      	b.n	401228 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401202:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401206:	f005 0301 	and.w	r3, r5, #1
  40120a:	9300      	str	r3, [sp, #0]
  40120c:	4638      	mov	r0, r7
  40120e:	4631      	mov	r1, r6
  401210:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401214:	bf14      	ite	ne
  401216:	2200      	movne	r2, #0
  401218:	2201      	moveq	r2, #1
  40121a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40121e:	4c05      	ldr	r4, [pc, #20]	; (401234 <pio_configure_pin_group+0xd8>)
  401220:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  401222:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401224:	e000      	b.n	401228 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401226:	2000      	movs	r0, #0
	}

	return 1;
}
  401228:	b003      	add	sp, #12
  40122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40122c:	00400ee9 	.word	0x00400ee9
  401230:	00400f79 	.word	0x00400f79
  401234:	00400fad 	.word	0x00400fad

00401238 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40123c:	4604      	mov	r4, r0
  40123e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401240:	4b10      	ldr	r3, [pc, #64]	; (401284 <pio_handler_process+0x4c>)
  401242:	4798      	blx	r3
  401244:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401246:	4620      	mov	r0, r4
  401248:	4b0f      	ldr	r3, [pc, #60]	; (401288 <pio_handler_process+0x50>)
  40124a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40124c:	4005      	ands	r5, r0
  40124e:	d017      	beq.n	401280 <pio_handler_process+0x48>
  401250:	4f0e      	ldr	r7, [pc, #56]	; (40128c <pio_handler_process+0x54>)
  401252:	f107 040c 	add.w	r4, r7, #12
  401256:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401258:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  40125c:	42b3      	cmp	r3, r6
  40125e:	d10a      	bne.n	401276 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401260:	f854 1c08 	ldr.w	r1, [r4, #-8]
  401264:	4229      	tst	r1, r5
  401266:	d006      	beq.n	401276 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401268:	6823      	ldr	r3, [r4, #0]
  40126a:	4630      	mov	r0, r6
  40126c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40126e:	f854 3c08 	ldr.w	r3, [r4, #-8]
  401272:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401276:	42bc      	cmp	r4, r7
  401278:	d002      	beq.n	401280 <pio_handler_process+0x48>
  40127a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40127c:	2d00      	cmp	r5, #0
  40127e:	d1eb      	bne.n	401258 <pio_handler_process+0x20>
  401280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401284:	00400fd5 	.word	0x00400fd5
  401288:	00400fd9 	.word	0x00400fd9
  40128c:	20000b54 	.word	0x20000b54

00401290 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401290:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401292:	4802      	ldr	r0, [pc, #8]	; (40129c <PIOA_Handler+0xc>)
  401294:	210b      	movs	r1, #11
  401296:	4b02      	ldr	r3, [pc, #8]	; (4012a0 <PIOA_Handler+0x10>)
  401298:	4798      	blx	r3
  40129a:	bd08      	pop	{r3, pc}
  40129c:	400e0e00 	.word	0x400e0e00
  4012a0:	00401239 	.word	0x00401239

004012a4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4012a4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4012a6:	4802      	ldr	r0, [pc, #8]	; (4012b0 <PIOB_Handler+0xc>)
  4012a8:	210c      	movs	r1, #12
  4012aa:	4b02      	ldr	r3, [pc, #8]	; (4012b4 <PIOB_Handler+0x10>)
  4012ac:	4798      	blx	r3
  4012ae:	bd08      	pop	{r3, pc}
  4012b0:	400e1000 	.word	0x400e1000
  4012b4:	00401239 	.word	0x00401239

004012b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4012b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4012ba:	4802      	ldr	r0, [pc, #8]	; (4012c4 <PIOC_Handler+0xc>)
  4012bc:	210d      	movs	r1, #13
  4012be:	4b02      	ldr	r3, [pc, #8]	; (4012c8 <PIOC_Handler+0x10>)
  4012c0:	4798      	blx	r3
  4012c2:	bd08      	pop	{r3, pc}
  4012c4:	400e1200 	.word	0x400e1200
  4012c8:	00401239 	.word	0x00401239

004012cc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4012cc:	4b17      	ldr	r3, [pc, #92]	; (40132c <pmc_switch_mck_to_pllack+0x60>)
  4012ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4012d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  4012d4:	4310      	orrs	r0, r2
  4012d6:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4012da:	f013 0f08 	tst.w	r3, #8
  4012de:	d109      	bne.n	4012f4 <pmc_switch_mck_to_pllack+0x28>
  4012e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4012e4:	4911      	ldr	r1, [pc, #68]	; (40132c <pmc_switch_mck_to_pllack+0x60>)
  4012e6:	e001      	b.n	4012ec <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4012e8:	3b01      	subs	r3, #1
  4012ea:	d019      	beq.n	401320 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012ec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4012ee:	f012 0f08 	tst.w	r2, #8
  4012f2:	d0f9      	beq.n	4012e8 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4012f4:	4b0d      	ldr	r3, [pc, #52]	; (40132c <pmc_switch_mck_to_pllack+0x60>)
  4012f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4012f8:	f022 0203 	bic.w	r2, r2, #3
  4012fc:	f042 0202 	orr.w	r2, r2, #2
  401300:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401302:	6e98      	ldr	r0, [r3, #104]	; 0x68
  401304:	f010 0008 	ands.w	r0, r0, #8
  401308:	d10c      	bne.n	401324 <pmc_switch_mck_to_pllack+0x58>
  40130a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40130e:	4907      	ldr	r1, [pc, #28]	; (40132c <pmc_switch_mck_to_pllack+0x60>)
  401310:	e001      	b.n	401316 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401312:	3b01      	subs	r3, #1
  401314:	d008      	beq.n	401328 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401316:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401318:	f012 0f08 	tst.w	r2, #8
  40131c:	d0f9      	beq.n	401312 <pmc_switch_mck_to_pllack+0x46>
  40131e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401320:	2001      	movs	r0, #1
  401322:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401324:	2000      	movs	r0, #0
  401326:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401328:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40132a:	4770      	bx	lr
  40132c:	400e0400 	.word	0x400e0400

00401330 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401330:	b138      	cbz	r0, 401342 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401332:	4911      	ldr	r1, [pc, #68]	; (401378 <pmc_switch_mainck_to_xtal+0x48>)
  401334:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401336:	4a11      	ldr	r2, [pc, #68]	; (40137c <pmc_switch_mainck_to_xtal+0x4c>)
  401338:	401a      	ands	r2, r3
  40133a:	4b11      	ldr	r3, [pc, #68]	; (401380 <pmc_switch_mainck_to_xtal+0x50>)
  40133c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40133e:	620b      	str	r3, [r1, #32]
  401340:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401342:	4a0d      	ldr	r2, [pc, #52]	; (401378 <pmc_switch_mainck_to_xtal+0x48>)
  401344:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401346:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40134a:	f023 0303 	bic.w	r3, r3, #3
  40134e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401352:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401356:	0209      	lsls	r1, r1, #8
  401358:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40135a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40135c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40135e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401360:	f013 0f01 	tst.w	r3, #1
  401364:	d0fb      	beq.n	40135e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401366:	4a04      	ldr	r2, [pc, #16]	; (401378 <pmc_switch_mainck_to_xtal+0x48>)
  401368:	6a13      	ldr	r3, [r2, #32]
  40136a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40136e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401372:	6213      	str	r3, [r2, #32]
  401374:	4770      	bx	lr
  401376:	bf00      	nop
  401378:	400e0400 	.word	0x400e0400
  40137c:	fec8fffc 	.word	0xfec8fffc
  401380:	01370002 	.word	0x01370002

00401384 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401384:	4b02      	ldr	r3, [pc, #8]	; (401390 <pmc_osc_is_ready_mainck+0xc>)
  401386:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401388:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40138c:	4770      	bx	lr
  40138e:	bf00      	nop
  401390:	400e0400 	.word	0x400e0400

00401394 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401394:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401398:	4b01      	ldr	r3, [pc, #4]	; (4013a0 <pmc_disable_pllack+0xc>)
  40139a:	629a      	str	r2, [r3, #40]	; 0x28
  40139c:	4770      	bx	lr
  40139e:	bf00      	nop
  4013a0:	400e0400 	.word	0x400e0400

004013a4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4013a4:	4b02      	ldr	r3, [pc, #8]	; (4013b0 <pmc_is_locked_pllack+0xc>)
  4013a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4013a8:	f000 0002 	and.w	r0, r0, #2
  4013ac:	4770      	bx	lr
  4013ae:	bf00      	nop
  4013b0:	400e0400 	.word	0x400e0400

004013b4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4013b4:	281f      	cmp	r0, #31
  4013b6:	d80d      	bhi.n	4013d4 <pmc_enable_periph_clk+0x20>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4013b8:	4b08      	ldr	r3, [pc, #32]	; (4013dc <pmc_enable_periph_clk+0x28>)
  4013ba:	699a      	ldr	r2, [r3, #24]
  4013bc:	2301      	movs	r3, #1
  4013be:	4083      	lsls	r3, r0
  4013c0:	401a      	ands	r2, r3
  4013c2:	4293      	cmp	r3, r2
  4013c4:	d008      	beq.n	4013d8 <pmc_enable_periph_clk+0x24>
			PMC->PMC_PCER0 = 1 << ul_id;
  4013c6:	2301      	movs	r3, #1
  4013c8:	fa03 f000 	lsl.w	r0, r3, r0
  4013cc:	4b03      	ldr	r3, [pc, #12]	; (4013dc <pmc_enable_periph_clk+0x28>)
  4013ce:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4013d0:	2000      	movs	r0, #0
  4013d2:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4013d4:	2001      	movs	r0, #1
  4013d6:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4013d8:	2000      	movs	r0, #0
}
  4013da:	4770      	bx	lr
  4013dc:	400e0400 	.word	0x400e0400

004013e0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4013e0:	b508      	push	{r3, lr}
  4013e2:	2015      	movs	r0, #21
  4013e4:	4b01      	ldr	r3, [pc, #4]	; (4013ec <spi_enable_clock+0xc>)
  4013e6:	4798      	blx	r3
  4013e8:	bd08      	pop	{r3, pc}
  4013ea:	bf00      	nop
  4013ec:	004013b5 	.word	0x004013b5

004013f0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4013f0:	6843      	ldr	r3, [r0, #4]
  4013f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4013f6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4013f8:	6843      	ldr	r3, [r0, #4]
  4013fa:	0409      	lsls	r1, r1, #16
  4013fc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401400:	430b      	orrs	r3, r1
  401402:	6043      	str	r3, [r0, #4]
  401404:	4770      	bx	lr
  401406:	bf00      	nop

00401408 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401408:	6843      	ldr	r3, [r0, #4]
  40140a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40140e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401410:	6843      	ldr	r3, [r0, #4]
  401412:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401416:	6041      	str	r1, [r0, #4]
  401418:	4770      	bx	lr
  40141a:	bf00      	nop

0040141c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40141c:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40141e:	f643 2499 	movw	r4, #15001	; 0x3a99
  401422:	e001      	b.n	401428 <spi_write+0xc>
		if (!timeout--) {
  401424:	3c01      	subs	r4, #1
  401426:	d011      	beq.n	40144c <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401428:	6905      	ldr	r5, [r0, #16]
  40142a:	f015 0f02 	tst.w	r5, #2
  40142e:	d0f9      	beq.n	401424 <spi_write+0x8>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401430:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401432:	f014 0f02 	tst.w	r4, #2
  401436:	d006      	beq.n	401446 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401438:	0412      	lsls	r2, r2, #16
  40143a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40143e:	4311      	orrs	r1, r2
		if (uc_last) {
  401440:	b10b      	cbz	r3, 401446 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  401442:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401446:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401448:	2000      	movs	r0, #0
  40144a:	e000      	b.n	40144e <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  40144c:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  40144e:	bc30      	pop	{r4, r5}
  401450:	4770      	bx	lr
  401452:	bf00      	nop

00401454 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401454:	b132      	cbz	r2, 401464 <spi_set_clock_polarity+0x10>
  401456:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40145a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40145c:	f043 0301 	orr.w	r3, r3, #1
  401460:	6303      	str	r3, [r0, #48]	; 0x30
  401462:	4770      	bx	lr
  401464:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401468:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40146a:	f023 0301 	bic.w	r3, r3, #1
  40146e:	6303      	str	r3, [r0, #48]	; 0x30
  401470:	4770      	bx	lr
  401472:	bf00      	nop

00401474 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401474:	b132      	cbz	r2, 401484 <spi_set_clock_phase+0x10>
  401476:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40147a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40147c:	f043 0302 	orr.w	r3, r3, #2
  401480:	6303      	str	r3, [r0, #48]	; 0x30
  401482:	4770      	bx	lr
  401484:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401488:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40148a:	f023 0302 	bic.w	r3, r3, #2
  40148e:	6303      	str	r3, [r0, #48]	; 0x30
  401490:	4770      	bx	lr
  401492:	bf00      	nop

00401494 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401494:	2a04      	cmp	r2, #4
  401496:	d10a      	bne.n	4014ae <spi_configure_cs_behavior+0x1a>
  401498:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40149c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40149e:	f023 0308 	bic.w	r3, r3, #8
  4014a2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4014a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4014a6:	f043 0304 	orr.w	r3, r3, #4
  4014aa:	6303      	str	r3, [r0, #48]	; 0x30
  4014ac:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4014ae:	b952      	cbnz	r2, 4014c6 <spi_configure_cs_behavior+0x32>
  4014b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4014b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4014b6:	f023 0308 	bic.w	r3, r3, #8
  4014ba:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4014bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4014be:	f023 0304 	bic.w	r3, r3, #4
  4014c2:	6303      	str	r3, [r0, #48]	; 0x30
  4014c4:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4014c6:	2a08      	cmp	r2, #8
  4014c8:	d105      	bne.n	4014d6 <spi_configure_cs_behavior+0x42>
  4014ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4014ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4014d0:	f043 0308 	orr.w	r3, r3, #8
  4014d4:	6303      	str	r3, [r0, #48]	; 0x30
  4014d6:	4770      	bx	lr

004014d8 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4014d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4014dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4014de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4014e2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4014e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4014e6:	431a      	orrs	r2, r3
  4014e8:	630a      	str	r2, [r1, #48]	; 0x30
  4014ea:	4770      	bx	lr

004014ec <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4014ec:	1e43      	subs	r3, r0, #1
  4014ee:	4419      	add	r1, r3
  4014f0:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4014f4:	1e43      	subs	r3, r0, #1
  4014f6:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4014f8:	bf94      	ite	ls
  4014fa:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  4014fc:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
  401500:	b200      	sxth	r0, r0
  401502:	4770      	bx	lr

00401504 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  401504:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401508:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40150a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40150e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401510:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401512:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  401516:	630a      	str	r2, [r1, #48]	; 0x30
  401518:	4770      	bx	lr
  40151a:	bf00      	nop

0040151c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  40151c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401520:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401522:	b280      	uxth	r0, r0
  401524:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401526:	6b08      	ldr	r0, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
  401528:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40152c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  401530:	630a      	str	r2, [r1, #48]	; 0x30
  401532:	4770      	bx	lr

00401534 <twi_disable_interrupt>:
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  401534:	6281      	str	r1, [r0, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  401536:	6a03      	ldr	r3, [r0, #32]
  401538:	4770      	bx	lr
  40153a:	bf00      	nop

0040153c <twi_get_interrupt_status>:
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
	return p_twi->TWI_SR;
  40153c:	6a00      	ldr	r0, [r0, #32]
}
  40153e:	4770      	bx	lr

00401540 <twi_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
	return p_twi->TWI_IMR;
  401540:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  401542:	4770      	bx	lr

00401544 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401544:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401546:	23ac      	movs	r3, #172	; 0xac
  401548:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40154a:	680a      	ldr	r2, [r1, #0]
  40154c:	684b      	ldr	r3, [r1, #4]
  40154e:	fbb2 f3f3 	udiv	r3, r2, r3
  401552:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401554:	1e5c      	subs	r4, r3, #1
  401556:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40155a:	4294      	cmp	r4, r2
  40155c:	d80a      	bhi.n	401574 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40155e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401560:	688b      	ldr	r3, [r1, #8]
  401562:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401564:	f240 2302 	movw	r3, #514	; 0x202
  401568:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40156c:	2350      	movs	r3, #80	; 0x50
  40156e:	6003      	str	r3, [r0, #0]

	return 0;
  401570:	2000      	movs	r0, #0
  401572:	e000      	b.n	401576 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  401574:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  401576:	f85d 4b04 	ldr.w	r4, [sp], #4
  40157a:	4770      	bx	lr

0040157c <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  40157c:	6081      	str	r1, [r0, #8]
  40157e:	4770      	bx	lr

00401580 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  401580:	60c1      	str	r1, [r0, #12]
  401582:	4770      	bx	lr

00401584 <uart_get_interrupt_mask>:
 *
 *  \return The interrupt mask value.
 */
uint32_t uart_get_interrupt_mask(Uart *p_uart)
{
	return p_uart->UART_IMR;
  401584:	6900      	ldr	r0, [r0, #16]
}
  401586:	4770      	bx	lr

00401588 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  401588:	6940      	ldr	r0, [r0, #20]
}
  40158a:	4770      	bx	lr

0040158c <uart_reset_status>:
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_reset_status(Uart *p_uart)
{
	p_uart->UART_CR = UART_CR_RSTSTA;
  40158c:	f44f 7380 	mov.w	r3, #256	; 0x100
  401590:	6003      	str	r3, [r0, #0]
  401592:	4770      	bx	lr

00401594 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401594:	6943      	ldr	r3, [r0, #20]
  401596:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40159a:	bf1a      	itte	ne
  40159c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40159e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4015a0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4015a2:	4770      	bx	lr

004015a4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4015a4:	6943      	ldr	r3, [r0, #20]
  4015a6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4015aa:	bf1d      	ittte	ne
  4015ac:	6983      	ldrne	r3, [r0, #24]
  4015ae:	700b      	strbne	r3, [r1, #0]
	return 0;
  4015b0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4015b2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4015b4:	4770      	bx	lr
  4015b6:	bf00      	nop

004015b8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4015b8:	6943      	ldr	r3, [r0, #20]
  4015ba:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4015be:	bf1d      	ittte	ne
  4015c0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4015c4:	61c1      	strne	r1, [r0, #28]
	return 0;
  4015c6:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4015c8:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4015ca:	4770      	bx	lr

004015cc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4015cc:	6943      	ldr	r3, [r0, #20]
  4015ce:	f013 0f01 	tst.w	r3, #1
  4015d2:	d005      	beq.n	4015e0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4015d4:	6983      	ldr	r3, [r0, #24]
  4015d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4015da:	600b      	str	r3, [r1, #0]

	return 0;
  4015dc:	2000      	movs	r0, #0
  4015de:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4015e0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4015e2:	4770      	bx	lr

004015e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4015e4:	e7fe      	b.n	4015e4 <Dummy_Handler>
  4015e6:	bf00      	nop

004015e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4015e8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4015ea:	4b1e      	ldr	r3, [pc, #120]	; (401664 <Reset_Handler+0x7c>)
  4015ec:	4a1e      	ldr	r2, [pc, #120]	; (401668 <Reset_Handler+0x80>)
  4015ee:	429a      	cmp	r2, r3
  4015f0:	d003      	beq.n	4015fa <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  4015f2:	4b1e      	ldr	r3, [pc, #120]	; (40166c <Reset_Handler+0x84>)
  4015f4:	4a1b      	ldr	r2, [pc, #108]	; (401664 <Reset_Handler+0x7c>)
  4015f6:	429a      	cmp	r2, r3
  4015f8:	d304      	bcc.n	401604 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4015fa:	4b1d      	ldr	r3, [pc, #116]	; (401670 <Reset_Handler+0x88>)
  4015fc:	4a1d      	ldr	r2, [pc, #116]	; (401674 <Reset_Handler+0x8c>)
  4015fe:	429a      	cmp	r2, r3
  401600:	d30f      	bcc.n	401622 <Reset_Handler+0x3a>
  401602:	e01a      	b.n	40163a <Reset_Handler+0x52>
  401604:	4b1c      	ldr	r3, [pc, #112]	; (401678 <Reset_Handler+0x90>)
  401606:	4c1d      	ldr	r4, [pc, #116]	; (40167c <Reset_Handler+0x94>)
  401608:	1ae4      	subs	r4, r4, r3
  40160a:	f024 0403 	bic.w	r4, r4, #3
  40160e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  401610:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  401612:	4814      	ldr	r0, [pc, #80]	; (401664 <Reset_Handler+0x7c>)
  401614:	4914      	ldr	r1, [pc, #80]	; (401668 <Reset_Handler+0x80>)
  401616:	585a      	ldr	r2, [r3, r1]
  401618:	501a      	str	r2, [r3, r0]
  40161a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  40161c:	42a3      	cmp	r3, r4
  40161e:	d1fa      	bne.n	401616 <Reset_Handler+0x2e>
  401620:	e7eb      	b.n	4015fa <Reset_Handler+0x12>
  401622:	4b17      	ldr	r3, [pc, #92]	; (401680 <Reset_Handler+0x98>)
  401624:	4917      	ldr	r1, [pc, #92]	; (401684 <Reset_Handler+0x9c>)
  401626:	1ac9      	subs	r1, r1, r3
  401628:	f021 0103 	bic.w	r1, r1, #3
  40162c:	1d1a      	adds	r2, r3, #4
  40162e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  401630:	2200      	movs	r2, #0
  401632:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401636:	428b      	cmp	r3, r1
  401638:	d1fb      	bne.n	401632 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40163a:	4a13      	ldr	r2, [pc, #76]	; (401688 <Reset_Handler+0xa0>)
  40163c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
  401640:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401644:	4911      	ldr	r1, [pc, #68]	; (40168c <Reset_Handler+0xa4>)
  401646:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  401648:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  40164c:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
  401650:	d203      	bcs.n	40165a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  401652:	688a      	ldr	r2, [r1, #8]
  401654:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  401658:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  40165a:	4b0d      	ldr	r3, [pc, #52]	; (401690 <Reset_Handler+0xa8>)
  40165c:	4798      	blx	r3

	/* Branch to main function */
	main();
  40165e:	4b0d      	ldr	r3, [pc, #52]	; (401694 <Reset_Handler+0xac>)
  401660:	4798      	blx	r3
  401662:	e7fe      	b.n	401662 <Reset_Handler+0x7a>
  401664:	20000000 	.word	0x20000000
  401668:	0040b8b0 	.word	0x0040b8b0
  40166c:	20000994 	.word	0x20000994
  401670:	2000383c 	.word	0x2000383c
  401674:	20000998 	.word	0x20000998
  401678:	20000004 	.word	0x20000004
  40167c:	20000997 	.word	0x20000997
  401680:	20000994 	.word	0x20000994
  401684:	20003837 	.word	0x20003837
  401688:	00400000 	.word	0x00400000
  40168c:	e000ed00 	.word	0xe000ed00
  401690:	004031f1 	.word	0x004031f1
  401694:	004030a1 	.word	0x004030a1

00401698 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
  401698:	4b39      	ldr	r3, [pc, #228]	; (401780 <SystemCoreClockUpdate+0xe8>)
  40169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40169c:	f003 0303 	and.w	r3, r3, #3
  4016a0:	2b01      	cmp	r3, #1
  4016a2:	d00f      	beq.n	4016c4 <SystemCoreClockUpdate+0x2c>
  4016a4:	b113      	cbz	r3, 4016ac <SystemCoreClockUpdate+0x14>
  4016a6:	2b02      	cmp	r3, #2
  4016a8:	d029      	beq.n	4016fe <SystemCoreClockUpdate+0x66>
  4016aa:	e051      	b.n	401750 <SystemCoreClockUpdate+0xb8>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4016ac:	4b35      	ldr	r3, [pc, #212]	; (401784 <SystemCoreClockUpdate+0xec>)
  4016ae:	695b      	ldr	r3, [r3, #20]
  4016b0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4016b4:	bf14      	ite	ne
  4016b6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4016ba:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4016be:	4b32      	ldr	r3, [pc, #200]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016c0:	601a      	str	r2, [r3, #0]
  4016c2:	e045      	b.n	401750 <SystemCoreClockUpdate+0xb8>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4016c4:	4b2e      	ldr	r3, [pc, #184]	; (401780 <SystemCoreClockUpdate+0xe8>)
  4016c6:	6a1b      	ldr	r3, [r3, #32]
  4016c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4016cc:	d003      	beq.n	4016d6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4016ce:	4a2f      	ldr	r2, [pc, #188]	; (40178c <SystemCoreClockUpdate+0xf4>)
  4016d0:	4b2d      	ldr	r3, [pc, #180]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016d2:	601a      	str	r2, [r3, #0]
  4016d4:	e03c      	b.n	401750 <SystemCoreClockUpdate+0xb8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016d6:	4a2e      	ldr	r2, [pc, #184]	; (401790 <SystemCoreClockUpdate+0xf8>)
  4016d8:	4b2b      	ldr	r3, [pc, #172]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016da:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4016dc:	4b28      	ldr	r3, [pc, #160]	; (401780 <SystemCoreClockUpdate+0xe8>)
  4016de:	6a1b      	ldr	r3, [r3, #32]
  4016e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016e4:	2b10      	cmp	r3, #16
  4016e6:	d002      	beq.n	4016ee <SystemCoreClockUpdate+0x56>
  4016e8:	2b20      	cmp	r3, #32
  4016ea:	d004      	beq.n	4016f6 <SystemCoreClockUpdate+0x5e>
  4016ec:	e030      	b.n	401750 <SystemCoreClockUpdate+0xb8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4016ee:	4a29      	ldr	r2, [pc, #164]	; (401794 <SystemCoreClockUpdate+0xfc>)
  4016f0:	4b25      	ldr	r3, [pc, #148]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016f2:	601a      	str	r2, [r3, #0]
				break;
  4016f4:	e02c      	b.n	401750 <SystemCoreClockUpdate+0xb8>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4016f6:	4a25      	ldr	r2, [pc, #148]	; (40178c <SystemCoreClockUpdate+0xf4>)
  4016f8:	4b23      	ldr	r3, [pc, #140]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016fa:	601a      	str	r2, [r3, #0]
				break;
  4016fc:	e028      	b.n	401750 <SystemCoreClockUpdate+0xb8>
				break;
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4016fe:	4b20      	ldr	r3, [pc, #128]	; (401780 <SystemCoreClockUpdate+0xe8>)
  401700:	6a1b      	ldr	r3, [r3, #32]
  401702:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401706:	d003      	beq.n	401710 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401708:	4a20      	ldr	r2, [pc, #128]	; (40178c <SystemCoreClockUpdate+0xf4>)
  40170a:	4b1f      	ldr	r3, [pc, #124]	; (401788 <SystemCoreClockUpdate+0xf0>)
  40170c:	601a      	str	r2, [r3, #0]
  40170e:	e012      	b.n	401736 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401710:	4a1f      	ldr	r2, [pc, #124]	; (401790 <SystemCoreClockUpdate+0xf8>)
  401712:	4b1d      	ldr	r3, [pc, #116]	; (401788 <SystemCoreClockUpdate+0xf0>)
  401714:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401716:	4b1a      	ldr	r3, [pc, #104]	; (401780 <SystemCoreClockUpdate+0xe8>)
  401718:	6a1b      	ldr	r3, [r3, #32]
  40171a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40171e:	2b10      	cmp	r3, #16
  401720:	d002      	beq.n	401728 <SystemCoreClockUpdate+0x90>
  401722:	2b20      	cmp	r3, #32
  401724:	d004      	beq.n	401730 <SystemCoreClockUpdate+0x98>
  401726:	e006      	b.n	401736 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  401728:	4a1a      	ldr	r2, [pc, #104]	; (401794 <SystemCoreClockUpdate+0xfc>)
  40172a:	4b17      	ldr	r3, [pc, #92]	; (401788 <SystemCoreClockUpdate+0xf0>)
  40172c:	601a      	str	r2, [r3, #0]
				break;
  40172e:	e002      	b.n	401736 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  401730:	4a16      	ldr	r2, [pc, #88]	; (40178c <SystemCoreClockUpdate+0xf4>)
  401732:	4b15      	ldr	r3, [pc, #84]	; (401788 <SystemCoreClockUpdate+0xf0>)
  401734:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  401736:	4b12      	ldr	r3, [pc, #72]	; (401780 <SystemCoreClockUpdate+0xe8>)
  401738:	6a98      	ldr	r0, [r3, #40]	; 0x28
			                         CKGR_PLLAR_MULA_Pos) + 1U);
		SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  40173a:	6a99      	ldr	r1, [r3, #40]	; 0x28
  40173c:	4b12      	ldr	r3, [pc, #72]	; (401788 <SystemCoreClockUpdate+0xf0>)
				break;
			default:
				break;
			}
		}
		SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  40173e:	f3c0 400a 	ubfx	r0, r0, #16, #11
  401742:	681a      	ldr	r2, [r3, #0]
  401744:	fb00 2202 	mla	r2, r0, r2, r2
			                         CKGR_PLLAR_MULA_Pos) + 1U);
		SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  401748:	b2c9      	uxtb	r1, r1
  40174a:	fbb2 f2f1 	udiv	r2, r2, r1
  40174e:	601a      	str	r2, [r3, #0]
			                         CKGR_PLLAR_DIVA_Pos));
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  401750:	4b0b      	ldr	r3, [pc, #44]	; (401780 <SystemCoreClockUpdate+0xe8>)
  401752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401754:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401758:	2b70      	cmp	r3, #112	; 0x70
  40175a:	d107      	bne.n	40176c <SystemCoreClockUpdate+0xd4>
		SystemCoreClock /= 3U;
  40175c:	4b0a      	ldr	r3, [pc, #40]	; (401788 <SystemCoreClockUpdate+0xf0>)
  40175e:	681a      	ldr	r2, [r3, #0]
  401760:	490d      	ldr	r1, [pc, #52]	; (401798 <SystemCoreClockUpdate+0x100>)
  401762:	fba1 0202 	umull	r0, r2, r1, r2
  401766:	0852      	lsrs	r2, r2, #1
  401768:	601a      	str	r2, [r3, #0]
  40176a:	4770      	bx	lr
	} else { 
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
  40176c:	4b04      	ldr	r3, [pc, #16]	; (401780 <SystemCoreClockUpdate+0xe8>)
  40176e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401770:	4b05      	ldr	r3, [pc, #20]	; (401788 <SystemCoreClockUpdate+0xf0>)
  401772:	f3c1 1102 	ubfx	r1, r1, #4, #3
  401776:	681a      	ldr	r2, [r3, #0]
  401778:	40ca      	lsrs	r2, r1
  40177a:	601a      	str	r2, [r3, #0]
  40177c:	4770      	bx	lr
  40177e:	bf00      	nop
  401780:	400e0400 	.word	0x400e0400
  401784:	400e1410 	.word	0x400e1410
  401788:	200000e4 	.word	0x200000e4
  40178c:	00b71b00 	.word	0x00b71b00
  401790:	003d0900 	.word	0x003d0900
  401794:	007a1200 	.word	0x007a1200
  401798:	aaaaaaab 	.word	0xaaaaaaab

0040179c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40179c:	4b09      	ldr	r3, [pc, #36]	; (4017c4 <_sbrk+0x28>)
  40179e:	681b      	ldr	r3, [r3, #0]
  4017a0:	b913      	cbnz	r3, 4017a8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4017a2:	4a09      	ldr	r2, [pc, #36]	; (4017c8 <_sbrk+0x2c>)
  4017a4:	4b07      	ldr	r3, [pc, #28]	; (4017c4 <_sbrk+0x28>)
  4017a6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4017a8:	4b06      	ldr	r3, [pc, #24]	; (4017c4 <_sbrk+0x28>)
  4017aa:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4017ac:	181a      	adds	r2, r3, r0
  4017ae:	4907      	ldr	r1, [pc, #28]	; (4017cc <_sbrk+0x30>)
  4017b0:	4291      	cmp	r1, r2
  4017b2:	db04      	blt.n	4017be <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4017b4:	4610      	mov	r0, r2
  4017b6:	4a03      	ldr	r2, [pc, #12]	; (4017c4 <_sbrk+0x28>)
  4017b8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4017ba:	4618      	mov	r0, r3
  4017bc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4017be:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4017c2:	4770      	bx	lr
  4017c4:	20000bc4 	.word	0x20000bc4
  4017c8:	20004040 	.word	0x20004040
  4017cc:	20005ffc 	.word	0x20005ffc

004017d0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4017d0:	f04f 30ff 	mov.w	r0, #4294967295
  4017d4:	4770      	bx	lr
  4017d6:	bf00      	nop

004017d8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4017d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4017dc:	604b      	str	r3, [r1, #4]

	return 0;
}
  4017de:	2000      	movs	r0, #0
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop

004017e4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4017e4:	2001      	movs	r0, #1
  4017e6:	4770      	bx	lr

004017e8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4017e8:	2000      	movs	r0, #0
  4017ea:	4770      	bx	lr

004017ec <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  4017ec:	f100 0308 	add.w	r3, r0, #8
  4017f0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4017f2:	f04f 32ff 	mov.w	r2, #4294967295
  4017f6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  4017f8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  4017fa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  4017fc:	2300      	movs	r3, #0
  4017fe:	6003      	str	r3, [r0, #0]
  401800:	4770      	bx	lr
  401802:	bf00      	nop

00401804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401804:	2300      	movs	r3, #0
  401806:	6103      	str	r3, [r0, #16]
  401808:	4770      	bx	lr
  40180a:	bf00      	nop

0040180c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  40180c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40180e:	685a      	ldr	r2, [r3, #4]
  401810:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  401812:	6842      	ldr	r2, [r0, #4]
  401814:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  401816:	685a      	ldr	r2, [r3, #4]
  401818:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  40181a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  40181c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40181e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401820:	6803      	ldr	r3, [r0, #0]
  401822:	3301      	adds	r3, #1
  401824:	6003      	str	r3, [r0, #0]
  401826:	4770      	bx	lr

00401828 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  401828:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  40182a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40182c:	f1b4 3fff 	cmp.w	r4, #4294967295
  401830:	d101      	bne.n	401836 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  401832:	6903      	ldr	r3, [r0, #16]
  401834:	e00a      	b.n	40184c <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  401836:	f100 0308 	add.w	r3, r0, #8
  40183a:	68c2      	ldr	r2, [r0, #12]
  40183c:	6812      	ldr	r2, [r2, #0]
  40183e:	4294      	cmp	r4, r2
  401840:	d304      	bcc.n	40184c <vListInsert+0x24>
  401842:	685b      	ldr	r3, [r3, #4]
  401844:	685a      	ldr	r2, [r3, #4]
  401846:	6812      	ldr	r2, [r2, #0]
  401848:	4294      	cmp	r4, r2
  40184a:	d2fa      	bcs.n	401842 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40184c:	685a      	ldr	r2, [r3, #4]
  40184e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  401850:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401852:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  401854:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401856:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401858:	6803      	ldr	r3, [r0, #0]
  40185a:	3301      	adds	r3, #1
  40185c:	6003      	str	r3, [r0, #0]
}
  40185e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401862:	4770      	bx	lr

00401864 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401864:	6843      	ldr	r3, [r0, #4]
  401866:	6882      	ldr	r2, [r0, #8]
  401868:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40186a:	6883      	ldr	r3, [r0, #8]
  40186c:	6842      	ldr	r2, [r0, #4]
  40186e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  401870:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401872:	685a      	ldr	r2, [r3, #4]
  401874:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401876:	bf04      	itt	eq
  401878:	6882      	ldreq	r2, [r0, #8]
  40187a:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  40187c:	2200      	movs	r2, #0
  40187e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401880:	681a      	ldr	r2, [r3, #0]
  401882:	3a01      	subs	r2, #1
  401884:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  401886:	6818      	ldr	r0, [r3, #0]
}
  401888:	4770      	bx	lr
  40188a:	bf00      	nop

0040188c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40188c:	4803      	ldr	r0, [pc, #12]	; (40189c <prvPortStartFirstTask+0x10>)
  40188e:	6800      	ldr	r0, [r0, #0]
  401890:	6800      	ldr	r0, [r0, #0]
  401892:	f380 8808 	msr	MSP, r0
  401896:	b662      	cpsie	i
  401898:	df00      	svc	0
  40189a:	bf00      	nop
  40189c:	e000ed08 	.word	0xe000ed08

004018a0 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4018a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4018a4:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  4018a8:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
  4018ac:	2300      	movs	r3, #0
  4018ae:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  4018b2:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4018b6:	3840      	subs	r0, #64	; 0x40
  4018b8:	4770      	bx	lr
  4018ba:	bf00      	nop

004018bc <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  4018bc:	4b06      	ldr	r3, [pc, #24]	; (4018d8 <pxCurrentTCBConst2>)
  4018be:	6819      	ldr	r1, [r3, #0]
  4018c0:	6808      	ldr	r0, [r1, #0]
  4018c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4018c6:	f380 8809 	msr	PSP, r0
  4018ca:	f04f 0000 	mov.w	r0, #0
  4018ce:	f380 8811 	msr	BASEPRI, r0
  4018d2:	f04e 0e0d 	orr.w	lr, lr, #13
  4018d6:	4770      	bx	lr

004018d8 <pxCurrentTCBConst2>:
  4018d8:	2000365c 	.word	0x2000365c

004018dc <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4018dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018e0:	4b01      	ldr	r3, [pc, #4]	; (4018e8 <vPortYieldFromISR+0xc>)
  4018e2:	601a      	str	r2, [r3, #0]
  4018e4:	4770      	bx	lr
  4018e6:	bf00      	nop
  4018e8:	e000ed04 	.word	0xe000ed04

004018ec <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  4018ec:	f3ef 8011 	mrs	r0, BASEPRI
  4018f0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4018f4:	f381 8811 	msr	BASEPRI, r1
  4018f8:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
  4018fa:	2000      	movs	r0, #0

004018fc <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  4018fc:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  4018fe:	4b03      	ldr	r3, [pc, #12]	; (40190c <vPortEnterCritical+0x10>)
  401900:	4798      	blx	r3
	uxCriticalNesting++;
  401902:	4b03      	ldr	r3, [pc, #12]	; (401910 <vPortEnterCritical+0x14>)
  401904:	681a      	ldr	r2, [r3, #0]
  401906:	3201      	adds	r2, #1
  401908:	601a      	str	r2, [r3, #0]
  40190a:	bd08      	pop	{r3, pc}
  40190c:	004018ed 	.word	0x004018ed
  401910:	200000e8 	.word	0x200000e8

00401914 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  401914:	f380 8811 	msr	BASEPRI, r0
  401918:	4770      	bx	lr
  40191a:	bf00      	nop

0040191c <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  40191c:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  40191e:	4a04      	ldr	r2, [pc, #16]	; (401930 <vPortExitCritical+0x14>)
  401920:	6813      	ldr	r3, [r2, #0]
  401922:	3b01      	subs	r3, #1
  401924:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401926:	b913      	cbnz	r3, 40192e <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
  401928:	2000      	movs	r0, #0
  40192a:	4b02      	ldr	r3, [pc, #8]	; (401934 <vPortExitCritical+0x18>)
  40192c:	4798      	blx	r3
  40192e:	bd08      	pop	{r3, pc}
  401930:	200000e8 	.word	0x200000e8
  401934:	00401915 	.word	0x00401915

00401938 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  401938:	f3ef 8009 	mrs	r0, PSP
  40193c:	4b0c      	ldr	r3, [pc, #48]	; (401970 <pxCurrentTCBConst>)
  40193e:	681a      	ldr	r2, [r3, #0]
  401940:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  401944:	6010      	str	r0, [r2, #0]
  401946:	e92d 4008 	stmdb	sp!, {r3, lr}
  40194a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  40194e:	f380 8811 	msr	BASEPRI, r0
  401952:	f000 ff7f 	bl	402854 <vTaskSwitchContext>
  401956:	f04f 0000 	mov.w	r0, #0
  40195a:	f380 8811 	msr	BASEPRI, r0
  40195e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  401962:	6819      	ldr	r1, [r3, #0]
  401964:	6808      	ldr	r0, [r1, #0]
  401966:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40196a:	f380 8809 	msr	PSP, r0
  40196e:	4770      	bx	lr

00401970 <pxCurrentTCBConst>:
  401970:	2000365c 	.word	0x2000365c

00401974 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  401974:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40197a:	4b05      	ldr	r3, [pc, #20]	; (401990 <SysTick_Handler+0x1c>)
  40197c:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  40197e:	4b05      	ldr	r3, [pc, #20]	; (401994 <SysTick_Handler+0x20>)
  401980:	4798      	blx	r3
	{
		vTaskIncrementTick();
  401982:	4b05      	ldr	r3, [pc, #20]	; (401998 <SysTick_Handler+0x24>)
  401984:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  401986:	2000      	movs	r0, #0
  401988:	4b04      	ldr	r3, [pc, #16]	; (40199c <SysTick_Handler+0x28>)
  40198a:	4798      	blx	r3
  40198c:	bd08      	pop	{r3, pc}
  40198e:	bf00      	nop
  401990:	e000ed04 	.word	0xe000ed04
  401994:	004018ed 	.word	0x004018ed
  401998:	00402479 	.word	0x00402479
  40199c:	00401915 	.word	0x00401915

004019a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  4019a0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
  4019a4:	4b02      	ldr	r3, [pc, #8]	; (4019b0 <vPortSetupTimerInterrupt+0x10>)
  4019a6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  4019a8:	2207      	movs	r2, #7
  4019aa:	3b04      	subs	r3, #4
  4019ac:	601a      	str	r2, [r3, #0]
  4019ae:	4770      	bx	lr
  4019b0:	e000e014 	.word	0xe000e014

004019b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4019b4:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4019b6:	4b09      	ldr	r3, [pc, #36]	; (4019dc <xPortStartScheduler+0x28>)
  4019b8:	681a      	ldr	r2, [r3, #0]
  4019ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4019be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4019c0:	681a      	ldr	r2, [r3, #0]
  4019c2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4019c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4019c8:	4b05      	ldr	r3, [pc, #20]	; (4019e0 <xPortStartScheduler+0x2c>)
  4019ca:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4019cc:	2400      	movs	r4, #0
  4019ce:	4b05      	ldr	r3, [pc, #20]	; (4019e4 <xPortStartScheduler+0x30>)
  4019d0:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4019d2:	4b05      	ldr	r3, [pc, #20]	; (4019e8 <xPortStartScheduler+0x34>)
  4019d4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
  4019d6:	4620      	mov	r0, r4
  4019d8:	bd10      	pop	{r4, pc}
  4019da:	bf00      	nop
  4019dc:	e000ed20 	.word	0xe000ed20
  4019e0:	004019a1 	.word	0x004019a1
  4019e4:	200000e8 	.word	0x200000e8
  4019e8:	0040188d 	.word	0x0040188d

004019ec <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  4019ec:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  4019ee:	4a13      	ldr	r2, [pc, #76]	; (401a3c <prvInsertBlockIntoFreeList+0x50>)
  4019f0:	6813      	ldr	r3, [r2, #0]
  4019f2:	4283      	cmp	r3, r0
  4019f4:	d201      	bcs.n	4019fa <prvInsertBlockIntoFreeList+0xe>
  4019f6:	461a      	mov	r2, r3
  4019f8:	e7fa      	b.n	4019f0 <prvInsertBlockIntoFreeList+0x4>
  4019fa:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  4019fc:	6854      	ldr	r4, [r2, #4]
  4019fe:	1915      	adds	r5, r2, r4
  401a00:	4285      	cmp	r5, r0
  401a02:	d103      	bne.n	401a0c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  401a04:	6868      	ldr	r0, [r5, #4]
  401a06:	4404      	add	r4, r0
  401a08:	6054      	str	r4, [r2, #4]
  401a0a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  401a0c:	6842      	ldr	r2, [r0, #4]
  401a0e:	1884      	adds	r4, r0, r2
  401a10:	42a3      	cmp	r3, r4
  401a12:	d10c      	bne.n	401a2e <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  401a14:	4c0a      	ldr	r4, [pc, #40]	; (401a40 <prvInsertBlockIntoFreeList+0x54>)
  401a16:	6824      	ldr	r4, [r4, #0]
  401a18:	429c      	cmp	r4, r3
  401a1a:	d006      	beq.n	401a2a <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  401a1c:	685b      	ldr	r3, [r3, #4]
  401a1e:	441a      	add	r2, r3
  401a20:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  401a22:	680b      	ldr	r3, [r1, #0]
  401a24:	681b      	ldr	r3, [r3, #0]
  401a26:	6003      	str	r3, [r0, #0]
  401a28:	e002      	b.n	401a30 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  401a2a:	6003      	str	r3, [r0, #0]
  401a2c:	e000      	b.n	401a30 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  401a2e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  401a30:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  401a32:	bf18      	it	ne
  401a34:	6008      	strne	r0, [r1, #0]
	}
}
  401a36:	bc30      	pop	{r4, r5}
  401a38:	4770      	bx	lr
  401a3a:	bf00      	nop
  401a3c:	20003574 	.word	0x20003574
  401a40:	20003570 	.word	0x20003570

00401a44 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  401a44:	b538      	push	{r3, r4, r5, lr}
  401a46:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  401a48:	4b28      	ldr	r3, [pc, #160]	; (401aec <pvPortMalloc+0xa8>)
  401a4a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  401a4c:	4b28      	ldr	r3, [pc, #160]	; (401af0 <pvPortMalloc+0xac>)
  401a4e:	681b      	ldr	r3, [r3, #0]
  401a50:	b99b      	cbnz	r3, 401a7a <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  401a52:	4a28      	ldr	r2, [pc, #160]	; (401af4 <pvPortMalloc+0xb0>)
  401a54:	4b28      	ldr	r3, [pc, #160]	; (401af8 <pvPortMalloc+0xb4>)
  401a56:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  401a58:	2100      	movs	r1, #0
  401a5a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
  401a5c:	f642 1298 	movw	r2, #10648	; 0x2998
  401a60:	1898      	adds	r0, r3, r2
  401a62:	4d23      	ldr	r5, [pc, #140]	; (401af0 <pvPortMalloc+0xac>)
  401a64:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
  401a66:	f642 159c 	movw	r5, #10652	; 0x299c
  401a6a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
  401a6c:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  401a6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  401a70:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  401a72:	4b22      	ldr	r3, [pc, #136]	; (401afc <pvPortMalloc+0xb8>)
  401a74:	681a      	ldr	r2, [r3, #0]
  401a76:	3a10      	subs	r2, #16
  401a78:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  401a7a:	2c00      	cmp	r4, #0
  401a7c:	d02d      	beq.n	401ada <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
  401a7e:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  401a82:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  401a86:	bf1c      	itt	ne
  401a88:	f022 0207 	bicne.w	r2, r2, #7
  401a8c:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  401a8e:	1e51      	subs	r1, r2, #1
  401a90:	f642 13a6 	movw	r3, #10662	; 0x29a6
  401a94:	4299      	cmp	r1, r3
  401a96:	d822      	bhi.n	401ade <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  401a98:	4916      	ldr	r1, [pc, #88]	; (401af4 <pvPortMalloc+0xb0>)
  401a9a:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401a9c:	6863      	ldr	r3, [r4, #4]
  401a9e:	429a      	cmp	r2, r3
  401aa0:	d904      	bls.n	401aac <pvPortMalloc+0x68>
  401aa2:	6823      	ldr	r3, [r4, #0]
  401aa4:	b113      	cbz	r3, 401aac <pvPortMalloc+0x68>
  401aa6:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
  401aa8:	461c      	mov	r4, r3
  401aaa:	e7f7      	b.n	401a9c <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  401aac:	4b10      	ldr	r3, [pc, #64]	; (401af0 <pvPortMalloc+0xac>)
  401aae:	681b      	ldr	r3, [r3, #0]
  401ab0:	429c      	cmp	r4, r3
  401ab2:	d016      	beq.n	401ae2 <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  401ab4:	680d      	ldr	r5, [r1, #0]
  401ab6:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  401ab8:	6823      	ldr	r3, [r4, #0]
  401aba:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  401abc:	6863      	ldr	r3, [r4, #4]
  401abe:	1a9b      	subs	r3, r3, r2
  401ac0:	2b20      	cmp	r3, #32
  401ac2:	d904      	bls.n	401ace <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  401ac4:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  401ac6:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  401ac8:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  401aca:	4b0d      	ldr	r3, [pc, #52]	; (401b00 <pvPortMalloc+0xbc>)
  401acc:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  401ace:	4b0b      	ldr	r3, [pc, #44]	; (401afc <pvPortMalloc+0xb8>)
  401ad0:	681a      	ldr	r2, [r3, #0]
  401ad2:	6861      	ldr	r1, [r4, #4]
  401ad4:	1a52      	subs	r2, r2, r1
  401ad6:	601a      	str	r2, [r3, #0]
  401ad8:	e004      	b.n	401ae4 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  401ada:	2500      	movs	r5, #0
  401adc:	e002      	b.n	401ae4 <pvPortMalloc+0xa0>
  401ade:	2500      	movs	r5, #0
  401ae0:	e000      	b.n	401ae4 <pvPortMalloc+0xa0>
  401ae2:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
  401ae4:	4b07      	ldr	r3, [pc, #28]	; (401b04 <pvPortMalloc+0xc0>)
  401ae6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  401ae8:	4628      	mov	r0, r5
  401aea:	bd38      	pop	{r3, r4, r5, pc}
  401aec:	0040243d 	.word	0x0040243d
  401af0:	20003570 	.word	0x20003570
  401af4:	20003574 	.word	0x20003574
  401af8:	20000bc8 	.word	0x20000bc8
  401afc:	200000ec 	.word	0x200000ec
  401b00:	004019ed 	.word	0x004019ed
  401b04:	004025a9 	.word	0x004025a9

00401b08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  401b08:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
  401b0a:	4604      	mov	r4, r0
  401b0c:	b168      	cbz	r0, 401b2a <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
  401b0e:	4b07      	ldr	r3, [pc, #28]	; (401b2c <vPortFree+0x24>)
  401b10:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  401b12:	4b07      	ldr	r3, [pc, #28]	; (401b30 <vPortFree+0x28>)
  401b14:	6819      	ldr	r1, [r3, #0]
  401b16:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  401b1a:	440a      	add	r2, r1
  401b1c:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  401b1e:	f1a4 0010 	sub.w	r0, r4, #16
  401b22:	4b04      	ldr	r3, [pc, #16]	; (401b34 <vPortFree+0x2c>)
  401b24:	4798      	blx	r3
		}
		xTaskResumeAll();
  401b26:	4b04      	ldr	r3, [pc, #16]	; (401b38 <vPortFree+0x30>)
  401b28:	4798      	blx	r3
  401b2a:	bd10      	pop	{r4, pc}
  401b2c:	0040243d 	.word	0x0040243d
  401b30:	200000ec 	.word	0x200000ec
  401b34:	004019ed 	.word	0x004019ed
  401b38:	004025a9 	.word	0x004025a9

00401b3c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  401b3c:	b510      	push	{r4, lr}
  401b3e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  401b40:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401b42:	b93b      	cbnz	r3, 401b54 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b44:	6803      	ldr	r3, [r0, #0]
  401b46:	bb1b      	cbnz	r3, 401b90 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401b48:	6840      	ldr	r0, [r0, #4]
  401b4a:	4b13      	ldr	r3, [pc, #76]	; (401b98 <prvCopyDataToQueue+0x5c>)
  401b4c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401b4e:	2300      	movs	r3, #0
  401b50:	6063      	str	r3, [r4, #4]
  401b52:	e01d      	b.n	401b90 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  401b54:	b96a      	cbnz	r2, 401b72 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401b56:	6880      	ldr	r0, [r0, #8]
  401b58:	461a      	mov	r2, r3
  401b5a:	4b10      	ldr	r3, [pc, #64]	; (401b9c <prvCopyDataToQueue+0x60>)
  401b5c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401b5e:	68a2      	ldr	r2, [r4, #8]
  401b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401b62:	4413      	add	r3, r2
  401b64:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  401b66:	6862      	ldr	r2, [r4, #4]
  401b68:	4293      	cmp	r3, r2
  401b6a:	d311      	bcc.n	401b90 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401b6c:	6823      	ldr	r3, [r4, #0]
  401b6e:	60a3      	str	r3, [r4, #8]
  401b70:	e00e      	b.n	401b90 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401b72:	68c0      	ldr	r0, [r0, #12]
  401b74:	461a      	mov	r2, r3
  401b76:	4b09      	ldr	r3, [pc, #36]	; (401b9c <prvCopyDataToQueue+0x60>)
  401b78:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  401b7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401b7c:	4252      	negs	r2, r2
  401b7e:	68e3      	ldr	r3, [r4, #12]
  401b80:	4413      	add	r3, r2
  401b82:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  401b84:	6821      	ldr	r1, [r4, #0]
  401b86:	428b      	cmp	r3, r1
  401b88:	d202      	bcs.n	401b90 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401b8a:	6863      	ldr	r3, [r4, #4]
  401b8c:	441a      	add	r2, r3
  401b8e:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401b90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b92:	3301      	adds	r3, #1
  401b94:	63a3      	str	r3, [r4, #56]	; 0x38
  401b96:	bd10      	pop	{r4, pc}
  401b98:	00402b6d 	.word	0x00402b6d
  401b9c:	00403269 	.word	0x00403269

00401ba0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  401ba0:	b538      	push	{r3, r4, r5, lr}
  401ba2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  401ba4:	6805      	ldr	r5, [r0, #0]
  401ba6:	b15d      	cbz	r5, 401bc0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  401ba8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401baa:	68c4      	ldr	r4, [r0, #12]
  401bac:	4414      	add	r4, r2
  401bae:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  401bb0:	6840      	ldr	r0, [r0, #4]
  401bb2:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  401bb4:	bf28      	it	cs
  401bb6:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  401bb8:	4608      	mov	r0, r1
  401bba:	68d9      	ldr	r1, [r3, #12]
  401bbc:	4b01      	ldr	r3, [pc, #4]	; (401bc4 <prvCopyDataFromQueue+0x24>)
  401bbe:	4798      	blx	r3
  401bc0:	bd38      	pop	{r3, r4, r5, pc}
  401bc2:	bf00      	nop
  401bc4:	00403269 	.word	0x00403269

00401bc8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  401bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401bca:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  401bcc:	4b1d      	ldr	r3, [pc, #116]	; (401c44 <prvUnlockQueue+0x7c>)
  401bce:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401bd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bd2:	2b00      	cmp	r3, #0
  401bd4:	dd12      	ble.n	401bfc <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bd8:	b183      	cbz	r3, 401bfc <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bda:	f104 0624 	add.w	r6, r4, #36	; 0x24
  401bde:	4d1a      	ldr	r5, [pc, #104]	; (401c48 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  401be0:	4f1a      	ldr	r7, [pc, #104]	; (401c4c <prvUnlockQueue+0x84>)
  401be2:	e001      	b.n	401be8 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401be6:	b14b      	cbz	r3, 401bfc <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401be8:	4630      	mov	r0, r6
  401bea:	47a8      	blx	r5
  401bec:	b100      	cbz	r0, 401bf0 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  401bee:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
  401bf0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bf2:	3b01      	subs	r3, #1
  401bf4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401bf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bf8:	2b00      	cmp	r3, #0
  401bfa:	dcf3      	bgt.n	401be4 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401bfc:	f04f 33ff 	mov.w	r3, #4294967295
  401c00:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  401c02:	4b13      	ldr	r3, [pc, #76]	; (401c50 <prvUnlockQueue+0x88>)
  401c04:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  401c06:	4b0f      	ldr	r3, [pc, #60]	; (401c44 <prvUnlockQueue+0x7c>)
  401c08:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	dd12      	ble.n	401c36 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c10:	6923      	ldr	r3, [r4, #16]
  401c12:	b183      	cbz	r3, 401c36 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c14:	f104 0610 	add.w	r6, r4, #16
  401c18:	4d0b      	ldr	r5, [pc, #44]	; (401c48 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
  401c1a:	4f0c      	ldr	r7, [pc, #48]	; (401c4c <prvUnlockQueue+0x84>)
  401c1c:	e001      	b.n	401c22 <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c1e:	6923      	ldr	r3, [r4, #16]
  401c20:	b14b      	cbz	r3, 401c36 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c22:	4630      	mov	r0, r6
  401c24:	47a8      	blx	r5
  401c26:	b100      	cbz	r0, 401c2a <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
  401c28:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  401c2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c2c:	3b01      	subs	r3, #1
  401c2e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c32:	2b00      	cmp	r3, #0
  401c34:	dcf3      	bgt.n	401c1e <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401c36:	f04f 33ff 	mov.w	r3, #4294967295
  401c3a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401c3c:	4b04      	ldr	r3, [pc, #16]	; (401c50 <prvUnlockQueue+0x88>)
  401c3e:	4798      	blx	r3
  401c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c42:	bf00      	nop
  401c44:	004018fd 	.word	0x004018fd
  401c48:	00402989 	.word	0x00402989
  401c4c:	00402ab9 	.word	0x00402ab9
  401c50:	0040191d 	.word	0x0040191d

00401c54 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  401c54:	b538      	push	{r3, r4, r5, lr}
  401c56:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  401c58:	4604      	mov	r4, r0
  401c5a:	b918      	cbnz	r0, 401c64 <xQueueGenericReset+0x10>
  401c5c:	4b16      	ldr	r3, [pc, #88]	; (401cb8 <xQueueGenericReset+0x64>)
  401c5e:	4798      	blx	r3
  401c60:	bf00      	nop
  401c62:	e7fd      	b.n	401c60 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
  401c64:	4b15      	ldr	r3, [pc, #84]	; (401cbc <xQueueGenericReset+0x68>)
  401c66:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401c68:	6823      	ldr	r3, [r4, #0]
  401c6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401c6c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401c6e:	fb00 f002 	mul.w	r0, r0, r2
  401c72:	1819      	adds	r1, r3, r0
  401c74:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  401c76:	2100      	movs	r1, #0
  401c78:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401c7a:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  401c7c:	1a82      	subs	r2, r0, r2
  401c7e:	4413      	add	r3, r2
  401c80:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401c82:	f04f 33ff 	mov.w	r3, #4294967295
  401c86:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401c88:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401c8a:	b955      	cbnz	r5, 401ca2 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c8c:	6923      	ldr	r3, [r4, #16]
  401c8e:	b17b      	cbz	r3, 401cb0 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401c90:	f104 0010 	add.w	r0, r4, #16
  401c94:	4b0a      	ldr	r3, [pc, #40]	; (401cc0 <xQueueGenericReset+0x6c>)
  401c96:	4798      	blx	r3
  401c98:	2801      	cmp	r0, #1
  401c9a:	d109      	bne.n	401cb0 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
  401c9c:	4b09      	ldr	r3, [pc, #36]	; (401cc4 <xQueueGenericReset+0x70>)
  401c9e:	4798      	blx	r3
  401ca0:	e006      	b.n	401cb0 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401ca2:	f104 0010 	add.w	r0, r4, #16
  401ca6:	4d08      	ldr	r5, [pc, #32]	; (401cc8 <xQueueGenericReset+0x74>)
  401ca8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401caa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cae:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  401cb0:	4b06      	ldr	r3, [pc, #24]	; (401ccc <xQueueGenericReset+0x78>)
  401cb2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  401cb4:	2001      	movs	r0, #1
  401cb6:	bd38      	pop	{r3, r4, r5, pc}
  401cb8:	004018ed 	.word	0x004018ed
  401cbc:	004018fd 	.word	0x004018fd
  401cc0:	00402989 	.word	0x00402989
  401cc4:	004018dd 	.word	0x004018dd
  401cc8:	004017ed 	.word	0x004017ed
  401ccc:	0040191d 	.word	0x0040191d

00401cd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  401cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401cd2:	460d      	mov	r5, r1
  401cd4:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  401cd6:	4606      	mov	r6, r0
  401cd8:	b188      	cbz	r0, 401cfe <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  401cda:	2050      	movs	r0, #80	; 0x50
  401cdc:	4b0e      	ldr	r3, [pc, #56]	; (401d18 <xQueueGenericCreate+0x48>)
  401cde:	4798      	blx	r3
		if( pxNewQueue != NULL )
  401ce0:	4604      	mov	r4, r0
  401ce2:	b160      	cbz	r0, 401cfe <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  401ce4:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  401ce8:	3001      	adds	r0, #1
  401cea:	4b0b      	ldr	r3, [pc, #44]	; (401d18 <xQueueGenericCreate+0x48>)
  401cec:	4798      	blx	r3
  401cee:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  401cf0:	b940      	cbnz	r0, 401d04 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  401cf2:	4620      	mov	r0, r4
  401cf4:	4b09      	ldr	r3, [pc, #36]	; (401d1c <xQueueGenericCreate+0x4c>)
  401cf6:	4798      	blx	r3
  401cf8:	e001      	b.n	401cfe <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
  401cfa:	bf00      	nop
  401cfc:	e7fd      	b.n	401cfa <xQueueGenericCreate+0x2a>
  401cfe:	4b08      	ldr	r3, [pc, #32]	; (401d20 <xQueueGenericCreate+0x50>)
  401d00:	4798      	blx	r3
  401d02:	e7fa      	b.n	401cfa <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  401d04:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  401d06:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  401d08:	4620      	mov	r0, r4
  401d0a:	2101      	movs	r1, #1
  401d0c:	4b05      	ldr	r3, [pc, #20]	; (401d24 <xQueueGenericCreate+0x54>)
  401d0e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  401d10:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
  401d14:	4620      	mov	r0, r4
  401d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d18:	00401a45 	.word	0x00401a45
  401d1c:	00401b09 	.word	0x00401b09
  401d20:	004018ed 	.word	0x004018ed
  401d24:	00401c55 	.word	0x00401c55

00401d28 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  401d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d2c:	b085      	sub	sp, #20
  401d2e:	468a      	mov	sl, r1
  401d30:	9201      	str	r2, [sp, #4]
  401d32:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  401d34:	4604      	mov	r4, r0
  401d36:	b918      	cbnz	r0, 401d40 <xQueueGenericSend+0x18>
  401d38:	4b36      	ldr	r3, [pc, #216]	; (401e14 <xQueueGenericSend+0xec>)
  401d3a:	4798      	blx	r3
  401d3c:	bf00      	nop
  401d3e:	e7fd      	b.n	401d3c <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401d40:	b909      	cbnz	r1, 401d46 <xQueueGenericSend+0x1e>
  401d42:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401d44:	b91b      	cbnz	r3, 401d4e <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  401d46:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401d48:	4e33      	ldr	r6, [pc, #204]	; (401e18 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  401d4a:	4d34      	ldr	r5, [pc, #208]	; (401e1c <xQueueGenericSend+0xf4>)
  401d4c:	e003      	b.n	401d56 <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401d4e:	4b31      	ldr	r3, [pc, #196]	; (401e14 <xQueueGenericSend+0xec>)
  401d50:	4798      	blx	r3
  401d52:	bf00      	nop
  401d54:	e7fd      	b.n	401d52 <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401d56:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401d58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401d5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d5c:	429a      	cmp	r2, r3
  401d5e:	d212      	bcs.n	401d86 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401d60:	4620      	mov	r0, r4
  401d62:	4651      	mov	r1, sl
  401d64:	465a      	mov	r2, fp
  401d66:	4b2e      	ldr	r3, [pc, #184]	; (401e20 <xQueueGenericSend+0xf8>)
  401d68:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d6c:	b13b      	cbz	r3, 401d7e <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401d6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d72:	4b2c      	ldr	r3, [pc, #176]	; (401e24 <xQueueGenericSend+0xfc>)
  401d74:	4798      	blx	r3
  401d76:	2801      	cmp	r0, #1
  401d78:	d101      	bne.n	401d7e <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  401d7a:	4b2b      	ldr	r3, [pc, #172]	; (401e28 <xQueueGenericSend+0x100>)
  401d7c:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  401d7e:	4b27      	ldr	r3, [pc, #156]	; (401e1c <xQueueGenericSend+0xf4>)
  401d80:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  401d82:	2001      	movs	r0, #1
  401d84:	e043      	b.n	401e0e <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  401d86:	9b01      	ldr	r3, [sp, #4]
  401d88:	b91b      	cbnz	r3, 401d92 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401d8a:	4b24      	ldr	r3, [pc, #144]	; (401e1c <xQueueGenericSend+0xf4>)
  401d8c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  401d8e:	2000      	movs	r0, #0
  401d90:	e03d      	b.n	401e0e <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
  401d92:	b91f      	cbnz	r7, 401d9c <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401d94:	a802      	add	r0, sp, #8
  401d96:	4b25      	ldr	r3, [pc, #148]	; (401e2c <xQueueGenericSend+0x104>)
  401d98:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401d9a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  401d9c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401d9e:	4b24      	ldr	r3, [pc, #144]	; (401e30 <xQueueGenericSend+0x108>)
  401da0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401da2:	47b0      	blx	r6
  401da4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401da6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401daa:	bf04      	itt	eq
  401dac:	2300      	moveq	r3, #0
  401dae:	6463      	streq	r3, [r4, #68]	; 0x44
  401db0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401db2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401db6:	bf04      	itt	eq
  401db8:	2300      	moveq	r3, #0
  401dba:	64a3      	streq	r3, [r4, #72]	; 0x48
  401dbc:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401dbe:	a802      	add	r0, sp, #8
  401dc0:	a901      	add	r1, sp, #4
  401dc2:	4b1c      	ldr	r3, [pc, #112]	; (401e34 <xQueueGenericSend+0x10c>)
  401dc4:	4798      	blx	r3
  401dc6:	b9e0      	cbnz	r0, 401e02 <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401dc8:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  401dca:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
  401dce:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401dd2:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401dd4:	45c1      	cmp	r9, r8
  401dd6:	d10e      	bne.n	401df6 <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401dd8:	f104 0010 	add.w	r0, r4, #16
  401ddc:	9901      	ldr	r1, [sp, #4]
  401dde:	4b16      	ldr	r3, [pc, #88]	; (401e38 <xQueueGenericSend+0x110>)
  401de0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401de2:	4620      	mov	r0, r4
  401de4:	4b15      	ldr	r3, [pc, #84]	; (401e3c <xQueueGenericSend+0x114>)
  401de6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  401de8:	4b15      	ldr	r3, [pc, #84]	; (401e40 <xQueueGenericSend+0x118>)
  401dea:	4798      	blx	r3
  401dec:	2800      	cmp	r0, #0
  401dee:	d1b2      	bne.n	401d56 <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
  401df0:	4b0d      	ldr	r3, [pc, #52]	; (401e28 <xQueueGenericSend+0x100>)
  401df2:	4798      	blx	r3
  401df4:	e7af      	b.n	401d56 <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401df6:	4620      	mov	r0, r4
  401df8:	4b10      	ldr	r3, [pc, #64]	; (401e3c <xQueueGenericSend+0x114>)
  401dfa:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401dfc:	4b10      	ldr	r3, [pc, #64]	; (401e40 <xQueueGenericSend+0x118>)
  401dfe:	4798      	blx	r3
  401e00:	e7a9      	b.n	401d56 <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401e02:	4620      	mov	r0, r4
  401e04:	4b0d      	ldr	r3, [pc, #52]	; (401e3c <xQueueGenericSend+0x114>)
  401e06:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401e08:	4b0d      	ldr	r3, [pc, #52]	; (401e40 <xQueueGenericSend+0x118>)
  401e0a:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401e0c:	2000      	movs	r0, #0
		}
	}
}
  401e0e:	b005      	add	sp, #20
  401e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e14:	004018ed 	.word	0x004018ed
  401e18:	004018fd 	.word	0x004018fd
  401e1c:	0040191d 	.word	0x0040191d
  401e20:	00401b3d 	.word	0x00401b3d
  401e24:	00402989 	.word	0x00402989
  401e28:	004018dd 	.word	0x004018dd
  401e2c:	00402a0d 	.word	0x00402a0d
  401e30:	0040243d 	.word	0x0040243d
  401e34:	00402a35 	.word	0x00402a35
  401e38:	004028e5 	.word	0x004028e5
  401e3c:	00401bc9 	.word	0x00401bc9
  401e40:	004025a9 	.word	0x004025a9

00401e44 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
  401e44:	b570      	push	{r4, r5, r6, lr}
  401e46:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  401e48:	2050      	movs	r0, #80	; 0x50
  401e4a:	4b13      	ldr	r3, [pc, #76]	; (401e98 <xQueueCreateMutex+0x54>)
  401e4c:	4798      	blx	r3
		if( pxNewQueue != NULL )
  401e4e:	4604      	mov	r4, r0
  401e50:	b110      	cbz	r0, 401e58 <xQueueCreateMutex+0x14>
  401e52:	e004      	b.n	401e5e <xQueueCreateMutex+0x1a>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
  401e54:	bf00      	nop
  401e56:	e7fd      	b.n	401e54 <xQueueCreateMutex+0x10>
  401e58:	4b10      	ldr	r3, [pc, #64]	; (401e9c <xQueueCreateMutex+0x58>)
  401e5a:	4798      	blx	r3
  401e5c:	e7fa      	b.n	401e54 <xQueueCreateMutex+0x10>
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
  401e5e:	2500      	movs	r5, #0
  401e60:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  401e62:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
  401e64:	6085      	str	r5, [r0, #8]
			pxNewQueue->pcReadFrom = NULL;
  401e66:	60c5      	str	r5, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  401e68:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
  401e6a:	2301      	movs	r3, #1
  401e6c:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
  401e6e:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
  401e70:	f04f 33ff 	mov.w	r3, #4294967295
  401e74:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
  401e76:	6483      	str	r3, [r0, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
  401e78:	f880 604d 	strb.w	r6, [r0, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  401e7c:	3010      	adds	r0, #16
  401e7e:	4e08      	ldr	r6, [pc, #32]	; (401ea0 <xQueueCreateMutex+0x5c>)
  401e80:	47b0      	blx	r6
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  401e82:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e86:	47b0      	blx	r6

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
  401e88:	4620      	mov	r0, r4
  401e8a:	4629      	mov	r1, r5
  401e8c:	462a      	mov	r2, r5
  401e8e:	462b      	mov	r3, r5
  401e90:	4d04      	ldr	r5, [pc, #16]	; (401ea4 <xQueueCreateMutex+0x60>)
  401e92:	47a8      	blx	r5
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
  401e94:	4620      	mov	r0, r4
  401e96:	bd70      	pop	{r4, r5, r6, pc}
  401e98:	00401a45 	.word	0x00401a45
  401e9c:	004018ed 	.word	0x004018ed
  401ea0:	004017ed 	.word	0x004017ed
  401ea4:	00401d29 	.word	0x00401d29

00401ea8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  401ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401eac:	460e      	mov	r6, r1
  401eae:	4615      	mov	r5, r2
  401eb0:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  401eb2:	4604      	mov	r4, r0
  401eb4:	b918      	cbnz	r0, 401ebe <xQueueGenericSendFromISR+0x16>
  401eb6:	4b1c      	ldr	r3, [pc, #112]	; (401f28 <xQueueGenericSendFromISR+0x80>)
  401eb8:	4798      	blx	r3
  401eba:	bf00      	nop
  401ebc:	e7fd      	b.n	401eba <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401ebe:	b929      	cbnz	r1, 401ecc <xQueueGenericSendFromISR+0x24>
  401ec0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401ec2:	b11b      	cbz	r3, 401ecc <xQueueGenericSendFromISR+0x24>
  401ec4:	4b18      	ldr	r3, [pc, #96]	; (401f28 <xQueueGenericSendFromISR+0x80>)
  401ec6:	4798      	blx	r3
  401ec8:	bf00      	nop
  401eca:	e7fd      	b.n	401ec8 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401ecc:	4b16      	ldr	r3, [pc, #88]	; (401f28 <xQueueGenericSendFromISR+0x80>)
  401ece:	4798      	blx	r3
  401ed0:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401ed2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ed4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401ed6:	429a      	cmp	r2, r3
  401ed8:	d218      	bcs.n	401f0c <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401eda:	4620      	mov	r0, r4
  401edc:	4631      	mov	r1, r6
  401ede:	4642      	mov	r2, r8
  401ee0:	4b12      	ldr	r3, [pc, #72]	; (401f2c <xQueueGenericSendFromISR+0x84>)
  401ee2:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401ee4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401eea:	d10a      	bne.n	401f02 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401eee:	b17b      	cbz	r3, 401f10 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ef0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ef4:	4b0e      	ldr	r3, [pc, #56]	; (401f30 <xQueueGenericSendFromISR+0x88>)
  401ef6:	4798      	blx	r3
  401ef8:	b160      	cbz	r0, 401f14 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  401efa:	b16d      	cbz	r5, 401f18 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  401efc:	2401      	movs	r4, #1
  401efe:	602c      	str	r4, [r5, #0]
  401f00:	e00b      	b.n	401f1a <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401f02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f04:	3301      	adds	r3, #1
  401f06:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401f08:	2401      	movs	r4, #1
  401f0a:	e006      	b.n	401f1a <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401f0c:	2400      	movs	r4, #0
  401f0e:	e004      	b.n	401f1a <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401f10:	2401      	movs	r4, #1
  401f12:	e002      	b.n	401f1a <xQueueGenericSendFromISR+0x72>
  401f14:	2401      	movs	r4, #1
  401f16:	e000      	b.n	401f1a <xQueueGenericSendFromISR+0x72>
  401f18:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  401f1a:	4638      	mov	r0, r7
  401f1c:	4b05      	ldr	r3, [pc, #20]	; (401f34 <xQueueGenericSendFromISR+0x8c>)
  401f1e:	4798      	blx	r3

	return xReturn;
}
  401f20:	4620      	mov	r0, r4
  401f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f26:	bf00      	nop
  401f28:	004018ed 	.word	0x004018ed
  401f2c:	00401b3d 	.word	0x00401b3d
  401f30:	00402989 	.word	0x00402989
  401f34:	00401915 	.word	0x00401915

00401f38 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  401f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f3c:	b085      	sub	sp, #20
  401f3e:	4689      	mov	r9, r1
  401f40:	9201      	str	r2, [sp, #4]
  401f42:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  401f44:	4604      	mov	r4, r0
  401f46:	b918      	cbnz	r0, 401f50 <xQueueGenericReceive+0x18>
  401f48:	4b44      	ldr	r3, [pc, #272]	; (40205c <xQueueGenericReceive+0x124>)
  401f4a:	4798      	blx	r3
  401f4c:	bf00      	nop
  401f4e:	e7fd      	b.n	401f4c <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401f50:	b909      	cbnz	r1, 401f56 <xQueueGenericReceive+0x1e>
  401f52:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401f54:	b92b      	cbnz	r3, 401f62 <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  401f56:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401f58:	4e41      	ldr	r6, [pc, #260]	; (402060 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401f5a:	f8df b134 	ldr.w	fp, [pc, #308]	; 402090 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  401f5e:	4d41      	ldr	r5, [pc, #260]	; (402064 <xQueueGenericReceive+0x12c>)
  401f60:	e003      	b.n	401f6a <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401f62:	4b3e      	ldr	r3, [pc, #248]	; (40205c <xQueueGenericReceive+0x124>)
  401f64:	4798      	blx	r3
  401f66:	bf00      	nop
  401f68:	e7fd      	b.n	401f66 <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401f6a:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  401f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f6e:	2b00      	cmp	r3, #0
  401f70:	d028      	beq.n	401fc4 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  401f72:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401f74:	4620      	mov	r0, r4
  401f76:	4649      	mov	r1, r9
  401f78:	4b3b      	ldr	r3, [pc, #236]	; (402068 <xQueueGenericReceive+0x130>)
  401f7a:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401f7c:	f1ba 0f00 	cmp.w	sl, #0
  401f80:	d112      	bne.n	401fa8 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  401f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f84:	3b01      	subs	r3, #1
  401f86:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401f88:	6823      	ldr	r3, [r4, #0]
  401f8a:	b913      	cbnz	r3, 401f92 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  401f8c:	4b37      	ldr	r3, [pc, #220]	; (40206c <xQueueGenericReceive+0x134>)
  401f8e:	4798      	blx	r3
  401f90:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f92:	6923      	ldr	r3, [r4, #16]
  401f94:	b193      	cbz	r3, 401fbc <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f96:	f104 0010 	add.w	r0, r4, #16
  401f9a:	4b35      	ldr	r3, [pc, #212]	; (402070 <xQueueGenericReceive+0x138>)
  401f9c:	4798      	blx	r3
  401f9e:	2801      	cmp	r0, #1
  401fa0:	d10c      	bne.n	401fbc <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
  401fa2:	4b34      	ldr	r3, [pc, #208]	; (402074 <xQueueGenericReceive+0x13c>)
  401fa4:	4798      	blx	r3
  401fa6:	e009      	b.n	401fbc <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  401fa8:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fac:	b133      	cbz	r3, 401fbc <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401fae:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fb2:	4b2f      	ldr	r3, [pc, #188]	; (402070 <xQueueGenericReceive+0x138>)
  401fb4:	4798      	blx	r3
  401fb6:	b108      	cbz	r0, 401fbc <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  401fb8:	4b2e      	ldr	r3, [pc, #184]	; (402074 <xQueueGenericReceive+0x13c>)
  401fba:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  401fbc:	4b29      	ldr	r3, [pc, #164]	; (402064 <xQueueGenericReceive+0x12c>)
  401fbe:	4798      	blx	r3
				return pdPASS;
  401fc0:	2001      	movs	r0, #1
  401fc2:	e048      	b.n	402056 <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  401fc4:	9b01      	ldr	r3, [sp, #4]
  401fc6:	b91b      	cbnz	r3, 401fd0 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401fc8:	4b26      	ldr	r3, [pc, #152]	; (402064 <xQueueGenericReceive+0x12c>)
  401fca:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401fcc:	2000      	movs	r0, #0
  401fce:	e042      	b.n	402056 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
  401fd0:	b917      	cbnz	r7, 401fd8 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401fd2:	a802      	add	r0, sp, #8
  401fd4:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  401fd6:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  401fd8:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401fda:	4b27      	ldr	r3, [pc, #156]	; (402078 <xQueueGenericReceive+0x140>)
  401fdc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401fde:	47b0      	blx	r6
  401fe0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fe6:	bf04      	itt	eq
  401fe8:	2300      	moveq	r3, #0
  401fea:	6463      	streq	r3, [r4, #68]	; 0x44
  401fec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401fee:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ff2:	bf04      	itt	eq
  401ff4:	2300      	moveq	r3, #0
  401ff6:	64a3      	streq	r3, [r4, #72]	; 0x48
  401ff8:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401ffa:	a802      	add	r0, sp, #8
  401ffc:	a901      	add	r1, sp, #4
  401ffe:	4b1f      	ldr	r3, [pc, #124]	; (40207c <xQueueGenericReceive+0x144>)
  402000:	4798      	blx	r3
  402002:	bb10      	cbnz	r0, 40204a <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  402004:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  402006:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40200a:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40200c:	f1b8 0f00 	cmp.w	r8, #0
  402010:	d115      	bne.n	40203e <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402012:	6823      	ldr	r3, [r4, #0]
  402014:	b923      	cbnz	r3, 402020 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
  402016:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402018:	6860      	ldr	r0, [r4, #4]
  40201a:	4b19      	ldr	r3, [pc, #100]	; (402080 <xQueueGenericReceive+0x148>)
  40201c:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  40201e:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402020:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402024:	9901      	ldr	r1, [sp, #4]
  402026:	4b17      	ldr	r3, [pc, #92]	; (402084 <xQueueGenericReceive+0x14c>)
  402028:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40202a:	4620      	mov	r0, r4
  40202c:	4b16      	ldr	r3, [pc, #88]	; (402088 <xQueueGenericReceive+0x150>)
  40202e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402030:	4b16      	ldr	r3, [pc, #88]	; (40208c <xQueueGenericReceive+0x154>)
  402032:	4798      	blx	r3
  402034:	2800      	cmp	r0, #0
  402036:	d198      	bne.n	401f6a <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
  402038:	4b0e      	ldr	r3, [pc, #56]	; (402074 <xQueueGenericReceive+0x13c>)
  40203a:	4798      	blx	r3
  40203c:	e795      	b.n	401f6a <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  40203e:	4620      	mov	r0, r4
  402040:	4b11      	ldr	r3, [pc, #68]	; (402088 <xQueueGenericReceive+0x150>)
  402042:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402044:	4b11      	ldr	r3, [pc, #68]	; (40208c <xQueueGenericReceive+0x154>)
  402046:	4798      	blx	r3
  402048:	e78f      	b.n	401f6a <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  40204a:	4620      	mov	r0, r4
  40204c:	4b0e      	ldr	r3, [pc, #56]	; (402088 <xQueueGenericReceive+0x150>)
  40204e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402050:	4b0e      	ldr	r3, [pc, #56]	; (40208c <xQueueGenericReceive+0x154>)
  402052:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  402054:	2000      	movs	r0, #0
		}
	}
}
  402056:	b005      	add	sp, #20
  402058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40205c:	004018ed 	.word	0x004018ed
  402060:	004018fd 	.word	0x004018fd
  402064:	0040191d 	.word	0x0040191d
  402068:	00401ba1 	.word	0x00401ba1
  40206c:	00402ac5 	.word	0x00402ac5
  402070:	00402989 	.word	0x00402989
  402074:	004018dd 	.word	0x004018dd
  402078:	0040243d 	.word	0x0040243d
  40207c:	00402a35 	.word	0x00402a35
  402080:	00402af1 	.word	0x00402af1
  402084:	004028e5 	.word	0x004028e5
  402088:	00401bc9 	.word	0x00401bc9
  40208c:	004025a9 	.word	0x004025a9
  402090:	00402a0d 	.word	0x00402a0d

00402094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  402094:	b538      	push	{r3, r4, r5, lr}
  402096:	4604      	mov	r4, r0
  402098:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40209a:	4b0d      	ldr	r3, [pc, #52]	; (4020d0 <vQueueWaitForMessageRestricted+0x3c>)
  40209c:	4798      	blx	r3
  40209e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4020a4:	bf04      	itt	eq
  4020a6:	2300      	moveq	r3, #0
  4020a8:	6463      	streq	r3, [r4, #68]	; 0x44
  4020aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
  4020b0:	bf04      	itt	eq
  4020b2:	2300      	moveq	r3, #0
  4020b4:	64a3      	streq	r3, [r4, #72]	; 0x48
  4020b6:	4b07      	ldr	r3, [pc, #28]	; (4020d4 <vQueueWaitForMessageRestricted+0x40>)
  4020b8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  4020ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4020bc:	b923      	cbnz	r3, 4020c8 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4020be:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020c2:	4629      	mov	r1, r5
  4020c4:	4b04      	ldr	r3, [pc, #16]	; (4020d8 <vQueueWaitForMessageRestricted+0x44>)
  4020c6:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4020c8:	4620      	mov	r0, r4
  4020ca:	4b04      	ldr	r3, [pc, #16]	; (4020dc <vQueueWaitForMessageRestricted+0x48>)
  4020cc:	4798      	blx	r3
  4020ce:	bd38      	pop	{r3, r4, r5, pc}
  4020d0:	004018fd 	.word	0x004018fd
  4020d4:	0040191d 	.word	0x0040191d
  4020d8:	00402945 	.word	0x00402945
  4020dc:	00401bc9 	.word	0x00401bc9

004020e0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4020e0:	b510      	push	{r4, lr}
  4020e2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4020e4:	4b0e      	ldr	r3, [pc, #56]	; (402120 <prvAddCurrentTaskToDelayedList+0x40>)
  4020e6:	681b      	ldr	r3, [r3, #0]
  4020e8:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4020ea:	4b0e      	ldr	r3, [pc, #56]	; (402124 <prvAddCurrentTaskToDelayedList+0x44>)
  4020ec:	681b      	ldr	r3, [r3, #0]
  4020ee:	4298      	cmp	r0, r3
  4020f0:	d207      	bcs.n	402102 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4020f2:	4b0d      	ldr	r3, [pc, #52]	; (402128 <prvAddCurrentTaskToDelayedList+0x48>)
  4020f4:	6818      	ldr	r0, [r3, #0]
  4020f6:	4b0a      	ldr	r3, [pc, #40]	; (402120 <prvAddCurrentTaskToDelayedList+0x40>)
  4020f8:	6819      	ldr	r1, [r3, #0]
  4020fa:	3104      	adds	r1, #4
  4020fc:	4b0b      	ldr	r3, [pc, #44]	; (40212c <prvAddCurrentTaskToDelayedList+0x4c>)
  4020fe:	4798      	blx	r3
  402100:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  402102:	4b0b      	ldr	r3, [pc, #44]	; (402130 <prvAddCurrentTaskToDelayedList+0x50>)
  402104:	6818      	ldr	r0, [r3, #0]
  402106:	4b06      	ldr	r3, [pc, #24]	; (402120 <prvAddCurrentTaskToDelayedList+0x40>)
  402108:	6819      	ldr	r1, [r3, #0]
  40210a:	3104      	adds	r1, #4
  40210c:	4b07      	ldr	r3, [pc, #28]	; (40212c <prvAddCurrentTaskToDelayedList+0x4c>)
  40210e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  402110:	4b08      	ldr	r3, [pc, #32]	; (402134 <prvAddCurrentTaskToDelayedList+0x54>)
  402112:	681b      	ldr	r3, [r3, #0]
  402114:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  402116:	bf3c      	itt	cc
  402118:	4b06      	ldrcc	r3, [pc, #24]	; (402134 <prvAddCurrentTaskToDelayedList+0x54>)
  40211a:	601c      	strcc	r4, [r3, #0]
  40211c:	bd10      	pop	{r4, pc}
  40211e:	bf00      	nop
  402120:	2000365c 	.word	0x2000365c
  402124:	20003678 	.word	0x20003678
  402128:	2000367c 	.word	0x2000367c
  40212c:	00401829 	.word	0x00401829
  402130:	20003594 	.word	0x20003594
  402134:	200000f0 	.word	0x200000f0

00402138 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
  402138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40213c:	b085      	sub	sp, #20
  40213e:	4682      	mov	sl, r0
  402140:	460d      	mov	r5, r1
  402142:	4693      	mov	fp, r2
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  402144:	684b      	ldr	r3, [r1, #4]
  402146:	685b      	ldr	r3, [r3, #4]
  402148:	604b      	str	r3, [r1, #4]
  40214a:	f101 0708 	add.w	r7, r1, #8
  40214e:	42bb      	cmp	r3, r7
  402150:	bf04      	itt	eq
  402152:	685b      	ldreq	r3, [r3, #4]
  402154:	604b      	streq	r3, [r1, #4]
  402156:	684b      	ldr	r3, [r1, #4]
  402158:	f8d3 900c 	ldr.w	r9, [r3, #12]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
			}
			#endif

			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, ( unsigned int ) usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
  40215c:	4e17      	ldr	r6, [pc, #92]	; (4021bc <prvListTaskWithinSingleList+0x84>)
  40215e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4021c4 <prvListTaskWithinSingleList+0x8c>

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  402162:	686b      	ldr	r3, [r5, #4]
  402164:	685b      	ldr	r3, [r3, #4]
  402166:	606b      	str	r3, [r5, #4]
  402168:	429f      	cmp	r7, r3
  40216a:	bf04      	itt	eq
  40216c:	687b      	ldreq	r3, [r7, #4]
  40216e:	606b      	streq	r3, [r5, #4]
  402170:	686b      	ldr	r3, [r5, #4]
  402172:	68dc      	ldr	r4, [r3, #12]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
  402174:	6b22      	ldr	r2, [r4, #48]	; 0x30

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
  402176:	7813      	ldrb	r3, [r2, #0]
  402178:	2ba5      	cmp	r3, #165	; 0xa5
  40217a:	d107      	bne.n	40218c <prvListTaskWithinSingleList+0x54>

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
  40217c:	2300      	movs	r3, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
  40217e:	3301      	adds	r3, #1
  402180:	b29b      	uxth	r3, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
  402182:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402186:	29a5      	cmp	r1, #165	; 0xa5
  402188:	d0f9      	beq.n	40217e <prvListTaskWithinSingleList+0x46>
  40218a:	e000      	b.n	40218e <prvListTaskWithinSingleList+0x56>

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
  40218c:	2300      	movs	r3, #0
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
			}
			#endif

			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, ( unsigned int ) usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
  40218e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402190:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402192:	9100      	str	r1, [sp, #0]
  402194:	089b      	lsrs	r3, r3, #2
  402196:	9301      	str	r3, [sp, #4]
  402198:	9202      	str	r2, [sp, #8]
  40219a:	4630      	mov	r0, r6
  40219c:	4641      	mov	r1, r8
  40219e:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4021a2:	465b      	mov	r3, fp
  4021a4:	f8df c020 	ldr.w	ip, [pc, #32]	; 4021c8 <prvListTaskWithinSingleList+0x90>
  4021a8:	47e0      	blx	ip
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
  4021aa:	4650      	mov	r0, sl
  4021ac:	4631      	mov	r1, r6
  4021ae:	4b04      	ldr	r3, [pc, #16]	; (4021c0 <prvListTaskWithinSingleList+0x88>)
  4021b0:	4798      	blx	r3

		} while( pxNextTCB != pxFirstTCB );
  4021b2:	454c      	cmp	r4, r9
  4021b4:	d1d5      	bne.n	402162 <prvListTaskWithinSingleList+0x2a>
	}
  4021b6:	b005      	add	sp, #20
  4021b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021bc:	20003634 	.word	0x20003634
  4021c0:	00403545 	.word	0x00403545
  4021c4:	0040b5b8 	.word	0x0040b5b8
  4021c8:	004034f9 	.word	0x004034f9

004021cc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  4021cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021d0:	460e      	mov	r6, r1
  4021d2:	4617      	mov	r7, r2
  4021d4:	469a      	mov	sl, r3
  4021d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4021d8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  4021dc:	4681      	mov	r9, r0
  4021de:	b918      	cbnz	r0, 4021e8 <xTaskGenericCreate+0x1c>
  4021e0:	4b62      	ldr	r3, [pc, #392]	; (40236c <xTaskGenericCreate+0x1a0>)
  4021e2:	4798      	blx	r3
  4021e4:	bf00      	nop
  4021e6:	e7fd      	b.n	4021e4 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  4021e8:	2d04      	cmp	r5, #4
  4021ea:	d903      	bls.n	4021f4 <xTaskGenericCreate+0x28>
  4021ec:	4b5f      	ldr	r3, [pc, #380]	; (40236c <xTaskGenericCreate+0x1a0>)
  4021ee:	4798      	blx	r3
  4021f0:	bf00      	nop
  4021f2:	e7fd      	b.n	4021f0 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  4021f4:	204c      	movs	r0, #76	; 0x4c
  4021f6:	4b5e      	ldr	r3, [pc, #376]	; (402370 <xTaskGenericCreate+0x1a4>)
  4021f8:	4798      	blx	r3

	if( pxNewTCB != NULL )
  4021fa:	4604      	mov	r4, r0
  4021fc:	2800      	cmp	r0, #0
  4021fe:	f000 80b1 	beq.w	402364 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  402202:	f1b8 0f00 	cmp.w	r8, #0
  402206:	f040 80a9 	bne.w	40235c <xTaskGenericCreate+0x190>
  40220a:	00b8      	lsls	r0, r7, #2
  40220c:	4b58      	ldr	r3, [pc, #352]	; (402370 <xTaskGenericCreate+0x1a4>)
  40220e:	4798      	blx	r3
  402210:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  402212:	b918      	cbnz	r0, 40221c <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  402214:	4620      	mov	r0, r4
  402216:	4b57      	ldr	r3, [pc, #348]	; (402374 <xTaskGenericCreate+0x1a8>)
  402218:	4798      	blx	r3
  40221a:	e0a3      	b.n	402364 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  40221c:	21a5      	movs	r1, #165	; 0xa5
  40221e:	00ba      	lsls	r2, r7, #2
  402220:	4b55      	ldr	r3, [pc, #340]	; (402378 <xTaskGenericCreate+0x1ac>)
  402222:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  402224:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
  402228:	3f01      	subs	r7, #1
  40222a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40222c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  402230:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  402234:	f104 0034 	add.w	r0, r4, #52	; 0x34
  402238:	4631      	mov	r1, r6
  40223a:	220a      	movs	r2, #10
  40223c:	4b4f      	ldr	r3, [pc, #316]	; (40237c <xTaskGenericCreate+0x1b0>)
  40223e:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  402240:	2300      	movs	r3, #0
  402242:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  402246:	2d04      	cmp	r5, #4
  402248:	bf34      	ite	cc
  40224a:	462e      	movcc	r6, r5
  40224c:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
  40224e:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  402250:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402252:	1d27      	adds	r7, r4, #4
  402254:	4638      	mov	r0, r7
  402256:	f8df 8170 	ldr.w	r8, [pc, #368]	; 4023c8 <xTaskGenericCreate+0x1fc>
  40225a:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40225c:	f104 0018 	add.w	r0, r4, #24
  402260:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402262:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  402264:	f1c6 0605 	rsb	r6, r6, #5
  402268:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40226a:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40226c:	4658      	mov	r0, fp
  40226e:	4649      	mov	r1, r9
  402270:	4652      	mov	r2, sl
  402272:	4b43      	ldr	r3, [pc, #268]	; (402380 <xTaskGenericCreate+0x1b4>)
  402274:	4798      	blx	r3
  402276:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  402278:	f010 0f07 	tst.w	r0, #7
  40227c:	d003      	beq.n	402286 <xTaskGenericCreate+0xba>
  40227e:	4b3b      	ldr	r3, [pc, #236]	; (40236c <xTaskGenericCreate+0x1a0>)
  402280:	4798      	blx	r3
  402282:	bf00      	nop
  402284:	e7fd      	b.n	402282 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
  402286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402288:	b103      	cbz	r3, 40228c <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  40228a:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40228c:	4b3d      	ldr	r3, [pc, #244]	; (402384 <xTaskGenericCreate+0x1b8>)
  40228e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  402290:	4b3d      	ldr	r3, [pc, #244]	; (402388 <xTaskGenericCreate+0x1bc>)
  402292:	681a      	ldr	r2, [r3, #0]
  402294:	3201      	adds	r2, #1
  402296:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
  402298:	4b3c      	ldr	r3, [pc, #240]	; (40238c <xTaskGenericCreate+0x1c0>)
  40229a:	681b      	ldr	r3, [r3, #0]
  40229c:	bb2b      	cbnz	r3, 4022ea <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40229e:	4b3b      	ldr	r3, [pc, #236]	; (40238c <xTaskGenericCreate+0x1c0>)
  4022a0:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4022a2:	4b39      	ldr	r3, [pc, #228]	; (402388 <xTaskGenericCreate+0x1bc>)
  4022a4:	681b      	ldr	r3, [r3, #0]
  4022a6:	2b01      	cmp	r3, #1
  4022a8:	d129      	bne.n	4022fe <xTaskGenericCreate+0x132>
  4022aa:	4e39      	ldr	r6, [pc, #228]	; (402390 <xTaskGenericCreate+0x1c4>)
  4022ac:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4022b0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 402394 <xTaskGenericCreate+0x1c8>
  4022b4:	4630      	mov	r0, r6
  4022b6:	47c0      	blx	r8
  4022b8:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4022ba:	454e      	cmp	r6, r9
  4022bc:	d1fa      	bne.n	4022b4 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  4022be:	f8df 910c 	ldr.w	r9, [pc, #268]	; 4023cc <xTaskGenericCreate+0x200>
  4022c2:	4648      	mov	r0, r9
  4022c4:	4e33      	ldr	r6, [pc, #204]	; (402394 <xTaskGenericCreate+0x1c8>)
  4022c6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  4022c8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 4023d0 <xTaskGenericCreate+0x204>
  4022cc:	4640      	mov	r0, r8
  4022ce:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
  4022d0:	4831      	ldr	r0, [pc, #196]	; (402398 <xTaskGenericCreate+0x1cc>)
  4022d2:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  4022d4:	4831      	ldr	r0, [pc, #196]	; (40239c <xTaskGenericCreate+0x1d0>)
  4022d6:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  4022d8:	4831      	ldr	r0, [pc, #196]	; (4023a0 <xTaskGenericCreate+0x1d4>)
  4022da:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4022dc:	4b31      	ldr	r3, [pc, #196]	; (4023a4 <xTaskGenericCreate+0x1d8>)
  4022de:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4022e2:	4b31      	ldr	r3, [pc, #196]	; (4023a8 <xTaskGenericCreate+0x1dc>)
  4022e4:	f8c3 8000 	str.w	r8, [r3]
  4022e8:	e009      	b.n	4022fe <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4022ea:	4b30      	ldr	r3, [pc, #192]	; (4023ac <xTaskGenericCreate+0x1e0>)
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	b933      	cbnz	r3, 4022fe <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4022f0:	4b26      	ldr	r3, [pc, #152]	; (40238c <xTaskGenericCreate+0x1c0>)
  4022f2:	681b      	ldr	r3, [r3, #0]
  4022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4022f6:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
  4022f8:	bf24      	itt	cs
  4022fa:	4b24      	ldrcs	r3, [pc, #144]	; (40238c <xTaskGenericCreate+0x1c0>)
  4022fc:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4022fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402300:	4a2b      	ldr	r2, [pc, #172]	; (4023b0 <xTaskGenericCreate+0x1e4>)
  402302:	6812      	ldr	r2, [r2, #0]
  402304:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  402306:	bf84      	itt	hi
  402308:	4a29      	ldrhi	r2, [pc, #164]	; (4023b0 <xTaskGenericCreate+0x1e4>)
  40230a:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40230c:	4a29      	ldr	r2, [pc, #164]	; (4023b4 <xTaskGenericCreate+0x1e8>)
  40230e:	6811      	ldr	r1, [r2, #0]
  402310:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  402312:	3101      	adds	r1, #1
  402314:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  402316:	4a28      	ldr	r2, [pc, #160]	; (4023b8 <xTaskGenericCreate+0x1ec>)
  402318:	6812      	ldr	r2, [r2, #0]
  40231a:	4293      	cmp	r3, r2
  40231c:	bf84      	itt	hi
  40231e:	4a26      	ldrhi	r2, [pc, #152]	; (4023b8 <xTaskGenericCreate+0x1ec>)
  402320:	6013      	strhi	r3, [r2, #0]
  402322:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402326:	481a      	ldr	r0, [pc, #104]	; (402390 <xTaskGenericCreate+0x1c4>)
  402328:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  40232c:	4639      	mov	r1, r7
  40232e:	4b23      	ldr	r3, [pc, #140]	; (4023bc <xTaskGenericCreate+0x1f0>)
  402330:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  402332:	4b23      	ldr	r3, [pc, #140]	; (4023c0 <xTaskGenericCreate+0x1f4>)
  402334:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  402336:	4b1d      	ldr	r3, [pc, #116]	; (4023ac <xTaskGenericCreate+0x1e0>)
  402338:	681b      	ldr	r3, [r3, #0]
  40233a:	b14b      	cbz	r3, 402350 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  40233c:	4b13      	ldr	r3, [pc, #76]	; (40238c <xTaskGenericCreate+0x1c0>)
  40233e:	681b      	ldr	r3, [r3, #0]
  402340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402342:	429d      	cmp	r5, r3
  402344:	d907      	bls.n	402356 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
  402346:	4b1f      	ldr	r3, [pc, #124]	; (4023c4 <xTaskGenericCreate+0x1f8>)
  402348:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
  40234a:	2001      	movs	r0, #1
  40234c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402350:	2001      	movs	r0, #1
  402352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402356:	2001      	movs	r0, #1
  402358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40235c:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
  402360:	4640      	mov	r0, r8
  402362:	e75b      	b.n	40221c <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402364:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
  402368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40236c:	004018ed 	.word	0x004018ed
  402370:	00401a45 	.word	0x00401a45
  402374:	00401b09 	.word	0x00401b09
  402378:	00403355 	.word	0x00403355
  40237c:	004036ad 	.word	0x004036ad
  402380:	004018a1 	.word	0x004018a1
  402384:	004018fd 	.word	0x004018fd
  402388:	2000369c 	.word	0x2000369c
  40238c:	2000365c 	.word	0x2000365c
  402390:	200035cc 	.word	0x200035cc
  402394:	004017ed 	.word	0x004017ed
  402398:	20003660 	.word	0x20003660
  40239c:	200035a0 	.word	0x200035a0
  4023a0:	20003580 	.word	0x20003580
  4023a4:	20003594 	.word	0x20003594
  4023a8:	2000367c 	.word	0x2000367c
  4023ac:	20003598 	.word	0x20003598
  4023b0:	200036a0 	.word	0x200036a0
  4023b4:	20003680 	.word	0x20003680
  4023b8:	200035c8 	.word	0x200035c8
  4023bc:	0040180d 	.word	0x0040180d
  4023c0:	0040191d 	.word	0x0040191d
  4023c4:	004018dd 	.word	0x004018dd
  4023c8:	00401805 	.word	0x00401805
  4023cc:	20003684 	.word	0x20003684
  4023d0:	200035b4 	.word	0x200035b4

004023d4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4023d4:	b510      	push	{r4, lr}
  4023d6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4023d8:	2300      	movs	r3, #0
  4023da:	9300      	str	r3, [sp, #0]
  4023dc:	9301      	str	r3, [sp, #4]
  4023de:	9302      	str	r3, [sp, #8]
  4023e0:	9303      	str	r3, [sp, #12]
  4023e2:	480e      	ldr	r0, [pc, #56]	; (40241c <vTaskStartScheduler+0x48>)
  4023e4:	490e      	ldr	r1, [pc, #56]	; (402420 <vTaskStartScheduler+0x4c>)
  4023e6:	2246      	movs	r2, #70	; 0x46
  4023e8:	4c0e      	ldr	r4, [pc, #56]	; (402424 <vTaskStartScheduler+0x50>)
  4023ea:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4023ec:	2801      	cmp	r0, #1
  4023ee:	d10e      	bne.n	40240e <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
  4023f0:	4b0d      	ldr	r3, [pc, #52]	; (402428 <vTaskStartScheduler+0x54>)
  4023f2:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
  4023f4:	2801      	cmp	r0, #1
  4023f6:	d10a      	bne.n	40240e <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  4023f8:	4b0c      	ldr	r3, [pc, #48]	; (40242c <vTaskStartScheduler+0x58>)
  4023fa:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  4023fc:	2201      	movs	r2, #1
  4023fe:	4b0c      	ldr	r3, [pc, #48]	; (402430 <vTaskStartScheduler+0x5c>)
  402400:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  402402:	2200      	movs	r2, #0
  402404:	4b0b      	ldr	r3, [pc, #44]	; (402434 <vTaskStartScheduler+0x60>)
  402406:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  402408:	4b0b      	ldr	r3, [pc, #44]	; (402438 <vTaskStartScheduler+0x64>)
  40240a:	4798      	blx	r3
  40240c:	e004      	b.n	402418 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  40240e:	b918      	cbnz	r0, 402418 <vTaskStartScheduler+0x44>
  402410:	4b06      	ldr	r3, [pc, #24]	; (40242c <vTaskStartScheduler+0x58>)
  402412:	4798      	blx	r3
  402414:	bf00      	nop
  402416:	e7fd      	b.n	402414 <vTaskStartScheduler+0x40>
}
  402418:	b004      	add	sp, #16
  40241a:	bd10      	pop	{r4, pc}
  40241c:	004026f9 	.word	0x004026f9
  402420:	0040b5cc 	.word	0x0040b5cc
  402424:	004021cd 	.word	0x004021cd
  402428:	00402c65 	.word	0x00402c65
  40242c:	004018ed 	.word	0x004018ed
  402430:	20003598 	.word	0x20003598
  402434:	20003678 	.word	0x20003678
  402438:	004019b5 	.word	0x004019b5

0040243c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  40243c:	4b02      	ldr	r3, [pc, #8]	; (402448 <vTaskSuspendAll+0xc>)
  40243e:	681a      	ldr	r2, [r3, #0]
  402440:	3201      	adds	r2, #1
  402442:	601a      	str	r2, [r3, #0]
  402444:	4770      	bx	lr
  402446:	bf00      	nop
  402448:	20003630 	.word	0x20003630

0040244c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  40244c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40244e:	4b04      	ldr	r3, [pc, #16]	; (402460 <xTaskGetTickCount+0x14>)
  402450:	4798      	blx	r3
	{
		xTicks = xTickCount;
  402452:	4b04      	ldr	r3, [pc, #16]	; (402464 <xTaskGetTickCount+0x18>)
  402454:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
  402456:	4b04      	ldr	r3, [pc, #16]	; (402468 <xTaskGetTickCount+0x1c>)
  402458:	4798      	blx	r3

	return xTicks;
}
  40245a:	4620      	mov	r0, r4
  40245c:	bd10      	pop	{r4, pc}
  40245e:	bf00      	nop
  402460:	004018fd 	.word	0x004018fd
  402464:	20003678 	.word	0x20003678
  402468:	0040191d 	.word	0x0040191d

0040246c <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
  40246c:	4b01      	ldr	r3, [pc, #4]	; (402474 <uxTaskGetNumberOfTasks+0x8>)
  40246e:	6818      	ldr	r0, [r3, #0]
}
  402470:	4770      	bx	lr
  402472:	bf00      	nop
  402474:	2000369c 	.word	0x2000369c

00402478 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  402478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40247c:	4b3d      	ldr	r3, [pc, #244]	; (402574 <vTaskIncrementTick+0xfc>)
  40247e:	681b      	ldr	r3, [r3, #0]
  402480:	2b00      	cmp	r3, #0
  402482:	d169      	bne.n	402558 <vTaskIncrementTick+0xe0>
	{
		++xTickCount;
  402484:	4b3c      	ldr	r3, [pc, #240]	; (402578 <vTaskIncrementTick+0x100>)
  402486:	681a      	ldr	r2, [r3, #0]
  402488:	3201      	adds	r2, #1
  40248a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  40248c:	681b      	ldr	r3, [r3, #0]
  40248e:	bb03      	cbnz	r3, 4024d2 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  402490:	4b3a      	ldr	r3, [pc, #232]	; (40257c <vTaskIncrementTick+0x104>)
  402492:	681b      	ldr	r3, [r3, #0]
  402494:	681b      	ldr	r3, [r3, #0]
  402496:	b11b      	cbz	r3, 4024a0 <vTaskIncrementTick+0x28>
  402498:	4b39      	ldr	r3, [pc, #228]	; (402580 <vTaskIncrementTick+0x108>)
  40249a:	4798      	blx	r3
  40249c:	bf00      	nop
  40249e:	e7fd      	b.n	40249c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
  4024a0:	4b36      	ldr	r3, [pc, #216]	; (40257c <vTaskIncrementTick+0x104>)
  4024a2:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4024a4:	4a37      	ldr	r2, [pc, #220]	; (402584 <vTaskIncrementTick+0x10c>)
  4024a6:	6810      	ldr	r0, [r2, #0]
  4024a8:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4024aa:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  4024ac:	4a36      	ldr	r2, [pc, #216]	; (402588 <vTaskIncrementTick+0x110>)
  4024ae:	6811      	ldr	r1, [r2, #0]
  4024b0:	3101      	adds	r1, #1
  4024b2:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4024b4:	681b      	ldr	r3, [r3, #0]
  4024b6:	681b      	ldr	r3, [r3, #0]
  4024b8:	b923      	cbnz	r3, 4024c4 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4024ba:	f04f 32ff 	mov.w	r2, #4294967295
  4024be:	4b33      	ldr	r3, [pc, #204]	; (40258c <vTaskIncrementTick+0x114>)
  4024c0:	601a      	str	r2, [r3, #0]
  4024c2:	e006      	b.n	4024d2 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4024c4:	4b2d      	ldr	r3, [pc, #180]	; (40257c <vTaskIncrementTick+0x104>)
  4024c6:	681b      	ldr	r3, [r3, #0]
  4024c8:	68db      	ldr	r3, [r3, #12]
  4024ca:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4024cc:	685a      	ldr	r2, [r3, #4]
  4024ce:	4b2f      	ldr	r3, [pc, #188]	; (40258c <vTaskIncrementTick+0x114>)
  4024d0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  4024d2:	4b29      	ldr	r3, [pc, #164]	; (402578 <vTaskIncrementTick+0x100>)
  4024d4:	681a      	ldr	r2, [r3, #0]
  4024d6:	4b2d      	ldr	r3, [pc, #180]	; (40258c <vTaskIncrementTick+0x114>)
  4024d8:	681b      	ldr	r3, [r3, #0]
  4024da:	429a      	cmp	r2, r3
  4024dc:	d342      	bcc.n	402564 <vTaskIncrementTick+0xec>
  4024de:	4b27      	ldr	r3, [pc, #156]	; (40257c <vTaskIncrementTick+0x104>)
  4024e0:	681b      	ldr	r3, [r3, #0]
  4024e2:	681b      	ldr	r3, [r3, #0]
  4024e4:	b14b      	cbz	r3, 4024fa <vTaskIncrementTick+0x82>
  4024e6:	4b25      	ldr	r3, [pc, #148]	; (40257c <vTaskIncrementTick+0x104>)
  4024e8:	681b      	ldr	r3, [r3, #0]
  4024ea:	68db      	ldr	r3, [r3, #12]
  4024ec:	68dc      	ldr	r4, [r3, #12]
  4024ee:	6863      	ldr	r3, [r4, #4]
  4024f0:	4a21      	ldr	r2, [pc, #132]	; (402578 <vTaskIncrementTick+0x100>)
  4024f2:	6812      	ldr	r2, [r2, #0]
  4024f4:	4293      	cmp	r3, r2
  4024f6:	d911      	bls.n	40251c <vTaskIncrementTick+0xa4>
  4024f8:	e00d      	b.n	402516 <vTaskIncrementTick+0x9e>
  4024fa:	f04f 32ff 	mov.w	r2, #4294967295
  4024fe:	4b23      	ldr	r3, [pc, #140]	; (40258c <vTaskIncrementTick+0x114>)
  402500:	601a      	str	r2, [r3, #0]
  402502:	e02f      	b.n	402564 <vTaskIncrementTick+0xec>
  402504:	4b1d      	ldr	r3, [pc, #116]	; (40257c <vTaskIncrementTick+0x104>)
  402506:	681b      	ldr	r3, [r3, #0]
  402508:	68db      	ldr	r3, [r3, #12]
  40250a:	68dc      	ldr	r4, [r3, #12]
  40250c:	6863      	ldr	r3, [r4, #4]
  40250e:	4a1a      	ldr	r2, [pc, #104]	; (402578 <vTaskIncrementTick+0x100>)
  402510:	6812      	ldr	r2, [r2, #0]
  402512:	4293      	cmp	r3, r2
  402514:	d906      	bls.n	402524 <vTaskIncrementTick+0xac>
  402516:	4a1d      	ldr	r2, [pc, #116]	; (40258c <vTaskIncrementTick+0x114>)
  402518:	6013      	str	r3, [r2, #0]
  40251a:	e023      	b.n	402564 <vTaskIncrementTick+0xec>
  40251c:	4e1c      	ldr	r6, [pc, #112]	; (402590 <vTaskIncrementTick+0x118>)
  40251e:	4f1d      	ldr	r7, [pc, #116]	; (402594 <vTaskIncrementTick+0x11c>)
  402520:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4025a4 <vTaskIncrementTick+0x12c>
  402524:	1d25      	adds	r5, r4, #4
  402526:	4628      	mov	r0, r5
  402528:	47b0      	blx	r6
  40252a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40252c:	b113      	cbz	r3, 402534 <vTaskIncrementTick+0xbc>
  40252e:	f104 0018 	add.w	r0, r4, #24
  402532:	47b0      	blx	r6
  402534:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402536:	683a      	ldr	r2, [r7, #0]
  402538:	4293      	cmp	r3, r2
  40253a:	bf88      	it	hi
  40253c:	603b      	strhi	r3, [r7, #0]
  40253e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  402542:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  402546:	4629      	mov	r1, r5
  402548:	4b13      	ldr	r3, [pc, #76]	; (402598 <vTaskIncrementTick+0x120>)
  40254a:	4798      	blx	r3
  40254c:	4b0b      	ldr	r3, [pc, #44]	; (40257c <vTaskIncrementTick+0x104>)
  40254e:	681b      	ldr	r3, [r3, #0]
  402550:	681b      	ldr	r3, [r3, #0]
  402552:	2b00      	cmp	r3, #0
  402554:	d1d6      	bne.n	402504 <vTaskIncrementTick+0x8c>
  402556:	e7d0      	b.n	4024fa <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  402558:	4b10      	ldr	r3, [pc, #64]	; (40259c <vTaskIncrementTick+0x124>)
  40255a:	681a      	ldr	r2, [r3, #0]
  40255c:	3201      	adds	r2, #1
  40255e:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
  402560:	4b0f      	ldr	r3, [pc, #60]	; (4025a0 <vTaskIncrementTick+0x128>)
  402562:	4798      	blx	r3

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
  402564:	4b0d      	ldr	r3, [pc, #52]	; (40259c <vTaskIncrementTick+0x124>)
  402566:	681b      	ldr	r3, [r3, #0]
  402568:	b90b      	cbnz	r3, 40256e <vTaskIncrementTick+0xf6>
		{
			vApplicationTickHook();
  40256a:	4b0d      	ldr	r3, [pc, #52]	; (4025a0 <vTaskIncrementTick+0x128>)
  40256c:	4798      	blx	r3
  40256e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402572:	bf00      	nop
  402574:	20003630 	.word	0x20003630
  402578:	20003678 	.word	0x20003678
  40257c:	20003594 	.word	0x20003594
  402580:	004018ed 	.word	0x004018ed
  402584:	2000367c 	.word	0x2000367c
  402588:	20003674 	.word	0x20003674
  40258c:	200000f0 	.word	0x200000f0
  402590:	00401865 	.word	0x00401865
  402594:	200035c8 	.word	0x200035c8
  402598:	0040180d 	.word	0x0040180d
  40259c:	2000357c 	.word	0x2000357c
  4025a0:	00403045 	.word	0x00403045
  4025a4:	200035cc 	.word	0x200035cc

004025a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  4025a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4025ac:	4b31      	ldr	r3, [pc, #196]	; (402674 <xTaskResumeAll+0xcc>)
  4025ae:	681b      	ldr	r3, [r3, #0]
  4025b0:	b91b      	cbnz	r3, 4025ba <xTaskResumeAll+0x12>
  4025b2:	4b31      	ldr	r3, [pc, #196]	; (402678 <xTaskResumeAll+0xd0>)
  4025b4:	4798      	blx	r3
  4025b6:	bf00      	nop
  4025b8:	e7fd      	b.n	4025b6 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4025ba:	4b30      	ldr	r3, [pc, #192]	; (40267c <xTaskResumeAll+0xd4>)
  4025bc:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4025be:	4b2d      	ldr	r3, [pc, #180]	; (402674 <xTaskResumeAll+0xcc>)
  4025c0:	681a      	ldr	r2, [r3, #0]
  4025c2:	3a01      	subs	r2, #1
  4025c4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4025c6:	681b      	ldr	r3, [r3, #0]
  4025c8:	2b00      	cmp	r3, #0
  4025ca:	d148      	bne.n	40265e <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  4025cc:	4b2c      	ldr	r3, [pc, #176]	; (402680 <xTaskResumeAll+0xd8>)
  4025ce:	681b      	ldr	r3, [r3, #0]
  4025d0:	2b00      	cmp	r3, #0
  4025d2:	d046      	beq.n	402662 <xTaskResumeAll+0xba>
  4025d4:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4025d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 4026ac <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
  4025da:	4f2a      	ldr	r7, [pc, #168]	; (402684 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  4025dc:	4e2a      	ldr	r6, [pc, #168]	; (402688 <xTaskResumeAll+0xe0>)
  4025de:	e01d      	b.n	40261c <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4025e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4025e4:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4025e6:	f104 0018 	add.w	r0, r4, #24
  4025ea:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4025ec:	f104 0904 	add.w	r9, r4, #4
  4025f0:	4648      	mov	r0, r9
  4025f2:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
  4025f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4025f6:	6832      	ldr	r2, [r6, #0]
  4025f8:	4293      	cmp	r3, r2
  4025fa:	bf88      	it	hi
  4025fc:	6033      	strhi	r3, [r6, #0]
  4025fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402602:	4822      	ldr	r0, [pc, #136]	; (40268c <xTaskResumeAll+0xe4>)
  402604:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  402608:	4649      	mov	r1, r9
  40260a:	4b21      	ldr	r3, [pc, #132]	; (402690 <xTaskResumeAll+0xe8>)
  40260c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40260e:	4b21      	ldr	r3, [pc, #132]	; (402694 <xTaskResumeAll+0xec>)
  402610:	681b      	ldr	r3, [r3, #0]
  402612:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  402616:	429a      	cmp	r2, r3
  402618:	bf28      	it	cs
  40261a:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40261c:	f8d8 3000 	ldr.w	r3, [r8]
  402620:	2b00      	cmp	r3, #0
  402622:	d1dd      	bne.n	4025e0 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  402624:	4b1c      	ldr	r3, [pc, #112]	; (402698 <xTaskResumeAll+0xf0>)
  402626:	681b      	ldr	r3, [r3, #0]
  402628:	b163      	cbz	r3, 402644 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40262a:	4b1b      	ldr	r3, [pc, #108]	; (402698 <xTaskResumeAll+0xf0>)
  40262c:	681b      	ldr	r3, [r3, #0]
  40262e:	b17b      	cbz	r3, 402650 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
  402630:	4d1a      	ldr	r5, [pc, #104]	; (40269c <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
  402632:	4c19      	ldr	r4, [pc, #100]	; (402698 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
  402634:	47a8      	blx	r5
						--uxMissedTicks;
  402636:	6823      	ldr	r3, [r4, #0]
  402638:	3b01      	subs	r3, #1
  40263a:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40263c:	6823      	ldr	r3, [r4, #0]
  40263e:	2b00      	cmp	r3, #0
  402640:	d1f8      	bne.n	402634 <xTaskResumeAll+0x8c>
  402642:	e005      	b.n	402650 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  402644:	2d01      	cmp	r5, #1
  402646:	d003      	beq.n	402650 <xTaskResumeAll+0xa8>
  402648:	4b15      	ldr	r3, [pc, #84]	; (4026a0 <xTaskResumeAll+0xf8>)
  40264a:	681b      	ldr	r3, [r3, #0]
  40264c:	2b01      	cmp	r3, #1
  40264e:	d10a      	bne.n	402666 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  402650:	2200      	movs	r2, #0
  402652:	4b13      	ldr	r3, [pc, #76]	; (4026a0 <xTaskResumeAll+0xf8>)
  402654:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  402656:	4b13      	ldr	r3, [pc, #76]	; (4026a4 <xTaskResumeAll+0xfc>)
  402658:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  40265a:	2401      	movs	r4, #1
  40265c:	e004      	b.n	402668 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40265e:	2400      	movs	r4, #0
  402660:	e002      	b.n	402668 <xTaskResumeAll+0xc0>
  402662:	2400      	movs	r4, #0
  402664:	e000      	b.n	402668 <xTaskResumeAll+0xc0>
  402666:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  402668:	4b0f      	ldr	r3, [pc, #60]	; (4026a8 <xTaskResumeAll+0x100>)
  40266a:	4798      	blx	r3

	return xAlreadyYielded;
}
  40266c:	4620      	mov	r0, r4
  40266e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402672:	bf00      	nop
  402674:	20003630 	.word	0x20003630
  402678:	004018ed 	.word	0x004018ed
  40267c:	004018fd 	.word	0x004018fd
  402680:	2000369c 	.word	0x2000369c
  402684:	00401865 	.word	0x00401865
  402688:	200035c8 	.word	0x200035c8
  40268c:	200035cc 	.word	0x200035cc
  402690:	0040180d 	.word	0x0040180d
  402694:	2000365c 	.word	0x2000365c
  402698:	2000357c 	.word	0x2000357c
  40269c:	00402479 	.word	0x00402479
  4026a0:	20003698 	.word	0x20003698
  4026a4:	004018dd 	.word	0x004018dd
  4026a8:	0040191d 	.word	0x0040191d
  4026ac:	20003660 	.word	0x20003660

004026b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  4026b0:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  4026b2:	4604      	mov	r4, r0
  4026b4:	b178      	cbz	r0, 4026d6 <vTaskDelay+0x26>
		{
			vTaskSuspendAll();
  4026b6:	4b09      	ldr	r3, [pc, #36]	; (4026dc <vTaskDelay+0x2c>)
  4026b8:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  4026ba:	4b09      	ldr	r3, [pc, #36]	; (4026e0 <vTaskDelay+0x30>)
  4026bc:	681b      	ldr	r3, [r3, #0]
  4026be:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4026c0:	4b08      	ldr	r3, [pc, #32]	; (4026e4 <vTaskDelay+0x34>)
  4026c2:	6818      	ldr	r0, [r3, #0]
  4026c4:	3004      	adds	r0, #4
  4026c6:	4b08      	ldr	r3, [pc, #32]	; (4026e8 <vTaskDelay+0x38>)
  4026c8:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4026ca:	4620      	mov	r0, r4
  4026cc:	4b07      	ldr	r3, [pc, #28]	; (4026ec <vTaskDelay+0x3c>)
  4026ce:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4026d0:	4b07      	ldr	r3, [pc, #28]	; (4026f0 <vTaskDelay+0x40>)
  4026d2:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4026d4:	b908      	cbnz	r0, 4026da <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
  4026d6:	4b07      	ldr	r3, [pc, #28]	; (4026f4 <vTaskDelay+0x44>)
  4026d8:	4798      	blx	r3
  4026da:	bd10      	pop	{r4, pc}
  4026dc:	0040243d 	.word	0x0040243d
  4026e0:	20003678 	.word	0x20003678
  4026e4:	2000365c 	.word	0x2000365c
  4026e8:	00401865 	.word	0x00401865
  4026ec:	004020e1 	.word	0x004020e1
  4026f0:	004025a9 	.word	0x004025a9
  4026f4:	004018dd 	.word	0x004018dd

004026f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4026f8:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  4026fa:	4d16      	ldr	r5, [pc, #88]	; (402754 <prvIdleTask+0x5c>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  4026fc:	4f16      	ldr	r7, [pc, #88]	; (402758 <prvIdleTask+0x60>)
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
  4026fe:	4e17      	ldr	r6, [pc, #92]	; (40275c <prvIdleTask+0x64>)
  402700:	e01d      	b.n	40273e <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  402702:	4b17      	ldr	r3, [pc, #92]	; (402760 <prvIdleTask+0x68>)
  402704:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402706:	4b17      	ldr	r3, [pc, #92]	; (402764 <prvIdleTask+0x6c>)
  402708:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
  40270a:	4b17      	ldr	r3, [pc, #92]	; (402768 <prvIdleTask+0x70>)
  40270c:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  40270e:	b1b4      	cbz	r4, 40273e <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  402710:	4b16      	ldr	r3, [pc, #88]	; (40276c <prvIdleTask+0x74>)
  402712:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  402714:	4b13      	ldr	r3, [pc, #76]	; (402764 <prvIdleTask+0x6c>)
  402716:	68db      	ldr	r3, [r3, #12]
  402718:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  40271a:	1d20      	adds	r0, r4, #4
  40271c:	4b14      	ldr	r3, [pc, #80]	; (402770 <prvIdleTask+0x78>)
  40271e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402720:	4b14      	ldr	r3, [pc, #80]	; (402774 <prvIdleTask+0x7c>)
  402722:	681a      	ldr	r2, [r3, #0]
  402724:	3a01      	subs	r2, #1
  402726:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
  402728:	682b      	ldr	r3, [r5, #0]
  40272a:	3b01      	subs	r3, #1
  40272c:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  40272e:	4b12      	ldr	r3, [pc, #72]	; (402778 <prvIdleTask+0x80>)
  402730:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  402732:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402734:	f8df 8048 	ldr.w	r8, [pc, #72]	; 402780 <prvIdleTask+0x88>
  402738:	47c0      	blx	r8
		vPortFree( pxTCB );
  40273a:	4620      	mov	r0, r4
  40273c:	47c0      	blx	r8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  40273e:	682b      	ldr	r3, [r5, #0]
  402740:	2b00      	cmp	r3, #0
  402742:	d1de      	bne.n	402702 <prvIdleTask+0xa>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  402744:	683b      	ldr	r3, [r7, #0]
  402746:	2b01      	cmp	r3, #1
  402748:	d901      	bls.n	40274e <prvIdleTask+0x56>
			{
				taskYIELD();
  40274a:	4b0c      	ldr	r3, [pc, #48]	; (40277c <prvIdleTask+0x84>)
  40274c:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
  40274e:	47b0      	blx	r6
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  402750:	e7f5      	b.n	40273e <prvIdleTask+0x46>
  402752:	bf00      	nop
  402754:	2000359c 	.word	0x2000359c
  402758:	200035cc 	.word	0x200035cc
  40275c:	00403041 	.word	0x00403041
  402760:	0040243d 	.word	0x0040243d
  402764:	200035a0 	.word	0x200035a0
  402768:	004025a9 	.word	0x004025a9
  40276c:	004018fd 	.word	0x004018fd
  402770:	00401865 	.word	0x00401865
  402774:	2000369c 	.word	0x2000369c
  402778:	0040191d 	.word	0x0040191d
  40277c:	004018dd 	.word	0x004018dd
  402780:	00401b09 	.word	0x00401b09

00402784 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
  402784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402788:	4606      	mov	r6, r0
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
  40278a:	4b27      	ldr	r3, [pc, #156]	; (402828 <vTaskList+0xa4>)
  40278c:	4798      	blx	r3
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
  40278e:	2300      	movs	r3, #0
  402790:	7033      	strb	r3, [r6, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
  402792:	4630      	mov	r0, r6
  402794:	4b25      	ldr	r3, [pc, #148]	; (40282c <vTaskList+0xa8>)
  402796:	4798      	blx	r3
  402798:	1832      	adds	r2, r6, r0
  40279a:	4b25      	ldr	r3, [pc, #148]	; (402830 <vTaskList+0xac>)
  40279c:	8819      	ldrh	r1, [r3, #0]
  40279e:	789b      	ldrb	r3, [r3, #2]
  4027a0:	5231      	strh	r1, [r6, r0]
  4027a2:	7093      	strb	r3, [r2, #2]

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
  4027a4:	4b23      	ldr	r3, [pc, #140]	; (402834 <vTaskList+0xb0>)
  4027a6:	681d      	ldr	r5, [r3, #0]
  4027a8:	1c6c      	adds	r4, r5, #1
  4027aa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4027ae:	4b22      	ldr	r3, [pc, #136]	; (402838 <vTaskList+0xb4>)
  4027b0:	eb03 0585 	add.w	r5, r3, r5, lsl #2

			do
			{
				uxQueue--;

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
  4027b4:	461f      	mov	r7, r3
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
  4027b6:	f04f 0952 	mov.w	r9, #82	; 0x52
  4027ba:	f8df 8084 	ldr.w	r8, [pc, #132]	; 402840 <vTaskList+0xbc>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;

			do
			{
				uxQueue--;
  4027be:	3c01      	subs	r4, #1

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
  4027c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4027c4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  4027c8:	b11b      	cbz	r3, 4027d2 <vTaskList+0x4e>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
  4027ca:	4630      	mov	r0, r6
  4027cc:	4629      	mov	r1, r5
  4027ce:	464a      	mov	r2, r9
  4027d0:	47c0      	blx	r8
  4027d2:	3d14      	subs	r5, #20
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
  4027d4:	2c00      	cmp	r4, #0
  4027d6:	d1f2      	bne.n	4027be <vTaskList+0x3a>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
  4027d8:	4b18      	ldr	r3, [pc, #96]	; (40283c <vTaskList+0xb8>)
  4027da:	681b      	ldr	r3, [r3, #0]
  4027dc:	681b      	ldr	r3, [r3, #0]
  4027de:	b12b      	cbz	r3, 4027ec <vTaskList+0x68>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
  4027e0:	4b16      	ldr	r3, [pc, #88]	; (40283c <vTaskList+0xb8>)
  4027e2:	6819      	ldr	r1, [r3, #0]
  4027e4:	4630      	mov	r0, r6
  4027e6:	2242      	movs	r2, #66	; 0x42
  4027e8:	4b15      	ldr	r3, [pc, #84]	; (402840 <vTaskList+0xbc>)
  4027ea:	4798      	blx	r3
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
  4027ec:	4b15      	ldr	r3, [pc, #84]	; (402844 <vTaskList+0xc0>)
  4027ee:	681b      	ldr	r3, [r3, #0]
  4027f0:	681b      	ldr	r3, [r3, #0]
  4027f2:	b12b      	cbz	r3, 402800 <vTaskList+0x7c>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
  4027f4:	4b13      	ldr	r3, [pc, #76]	; (402844 <vTaskList+0xc0>)
  4027f6:	6819      	ldr	r1, [r3, #0]
  4027f8:	4630      	mov	r0, r6
  4027fa:	2242      	movs	r2, #66	; 0x42
  4027fc:	4b10      	ldr	r3, [pc, #64]	; (402840 <vTaskList+0xbc>)
  4027fe:	4798      	blx	r3
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
  402800:	4b11      	ldr	r3, [pc, #68]	; (402848 <vTaskList+0xc4>)
  402802:	681b      	ldr	r3, [r3, #0]
  402804:	b123      	cbz	r3, 402810 <vTaskList+0x8c>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
  402806:	4630      	mov	r0, r6
  402808:	490f      	ldr	r1, [pc, #60]	; (402848 <vTaskList+0xc4>)
  40280a:	2244      	movs	r2, #68	; 0x44
  40280c:	4b0c      	ldr	r3, [pc, #48]	; (402840 <vTaskList+0xbc>)
  40280e:	4798      	blx	r3
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
  402810:	4b0e      	ldr	r3, [pc, #56]	; (40284c <vTaskList+0xc8>)
  402812:	681b      	ldr	r3, [r3, #0]
  402814:	b123      	cbz	r3, 402820 <vTaskList+0x9c>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
  402816:	4630      	mov	r0, r6
  402818:	490c      	ldr	r1, [pc, #48]	; (40284c <vTaskList+0xc8>)
  40281a:	2253      	movs	r2, #83	; 0x53
  40281c:	4b08      	ldr	r3, [pc, #32]	; (402840 <vTaskList+0xbc>)
  40281e:	4798      	blx	r3
				}
			}
			#endif
		}
		xTaskResumeAll();
  402820:	4b0b      	ldr	r3, [pc, #44]	; (402850 <vTaskList+0xcc>)
  402822:	4798      	blx	r3
  402824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402828:	0040243d 	.word	0x0040243d
  40282c:	0040364d 	.word	0x0040364d
  402830:	0040b634 	.word	0x0040b634
  402834:	200036a0 	.word	0x200036a0
  402838:	200035cc 	.word	0x200035cc
  40283c:	20003594 	.word	0x20003594
  402840:	00402139 	.word	0x00402139
  402844:	2000367c 	.word	0x2000367c
  402848:	200035a0 	.word	0x200035a0
  40284c:	20003580 	.word	0x20003580
  402850:	004025a9 	.word	0x004025a9

00402854 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  402854:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  402856:	4b1d      	ldr	r3, [pc, #116]	; (4028cc <vTaskSwitchContext+0x78>)
  402858:	681b      	ldr	r3, [r3, #0]
  40285a:	b95b      	cbnz	r3, 402874 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  40285c:	4b1c      	ldr	r3, [pc, #112]	; (4028d0 <vTaskSwitchContext+0x7c>)
  40285e:	681b      	ldr	r3, [r3, #0]
  402860:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402864:	009b      	lsls	r3, r3, #2
  402866:	4a1b      	ldr	r2, [pc, #108]	; (4028d4 <vTaskSwitchContext+0x80>)
  402868:	58d3      	ldr	r3, [r2, r3]
  40286a:	b9cb      	cbnz	r3, 4028a0 <vTaskSwitchContext+0x4c>
  40286c:	4b18      	ldr	r3, [pc, #96]	; (4028d0 <vTaskSwitchContext+0x7c>)
  40286e:	681b      	ldr	r3, [r3, #0]
  402870:	b953      	cbnz	r3, 402888 <vTaskSwitchContext+0x34>
  402872:	e005      	b.n	402880 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  402874:	2201      	movs	r2, #1
  402876:	4b18      	ldr	r3, [pc, #96]	; (4028d8 <vTaskSwitchContext+0x84>)
  402878:	601a      	str	r2, [r3, #0]
  40287a:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  40287c:	681a      	ldr	r2, [r3, #0]
  40287e:	b92a      	cbnz	r2, 40288c <vTaskSwitchContext+0x38>
  402880:	4b16      	ldr	r3, [pc, #88]	; (4028dc <vTaskSwitchContext+0x88>)
  402882:	4798      	blx	r3
  402884:	bf00      	nop
  402886:	e7fd      	b.n	402884 <vTaskSwitchContext+0x30>
  402888:	4b11      	ldr	r3, [pc, #68]	; (4028d0 <vTaskSwitchContext+0x7c>)
  40288a:	4912      	ldr	r1, [pc, #72]	; (4028d4 <vTaskSwitchContext+0x80>)
  40288c:	681a      	ldr	r2, [r3, #0]
  40288e:	3a01      	subs	r2, #1
  402890:	601a      	str	r2, [r3, #0]
  402892:	681a      	ldr	r2, [r3, #0]
  402894:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402898:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  40289c:	2a00      	cmp	r2, #0
  40289e:	d0ed      	beq.n	40287c <vTaskSwitchContext+0x28>
  4028a0:	4b0b      	ldr	r3, [pc, #44]	; (4028d0 <vTaskSwitchContext+0x7c>)
  4028a2:	681b      	ldr	r3, [r3, #0]
  4028a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4028a8:	4a0a      	ldr	r2, [pc, #40]	; (4028d4 <vTaskSwitchContext+0x80>)
  4028aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4028ae:	685a      	ldr	r2, [r3, #4]
  4028b0:	6852      	ldr	r2, [r2, #4]
  4028b2:	605a      	str	r2, [r3, #4]
  4028b4:	f103 0108 	add.w	r1, r3, #8
  4028b8:	428a      	cmp	r2, r1
  4028ba:	bf04      	itt	eq
  4028bc:	6852      	ldreq	r2, [r2, #4]
  4028be:	605a      	streq	r2, [r3, #4]
  4028c0:	685b      	ldr	r3, [r3, #4]
  4028c2:	68da      	ldr	r2, [r3, #12]
  4028c4:	4b06      	ldr	r3, [pc, #24]	; (4028e0 <vTaskSwitchContext+0x8c>)
  4028c6:	601a      	str	r2, [r3, #0]
  4028c8:	bd08      	pop	{r3, pc}
  4028ca:	bf00      	nop
  4028cc:	20003630 	.word	0x20003630
  4028d0:	200035c8 	.word	0x200035c8
  4028d4:	200035cc 	.word	0x200035cc
  4028d8:	20003698 	.word	0x20003698
  4028dc:	004018ed 	.word	0x004018ed
  4028e0:	2000365c 	.word	0x2000365c

004028e4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4028e4:	b538      	push	{r3, r4, r5, lr}
  4028e6:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4028e8:	b918      	cbnz	r0, 4028f2 <vTaskPlaceOnEventList+0xe>
  4028ea:	4b0e      	ldr	r3, [pc, #56]	; (402924 <vTaskPlaceOnEventList+0x40>)
  4028ec:	4798      	blx	r3
  4028ee:	bf00      	nop
  4028f0:	e7fd      	b.n	4028ee <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4028f2:	4d0d      	ldr	r5, [pc, #52]	; (402928 <vTaskPlaceOnEventList+0x44>)
  4028f4:	6829      	ldr	r1, [r5, #0]
  4028f6:	3118      	adds	r1, #24
  4028f8:	4b0c      	ldr	r3, [pc, #48]	; (40292c <vTaskPlaceOnEventList+0x48>)
  4028fa:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4028fc:	6828      	ldr	r0, [r5, #0]
  4028fe:	3004      	adds	r0, #4
  402900:	4b0b      	ldr	r3, [pc, #44]	; (402930 <vTaskPlaceOnEventList+0x4c>)
  402902:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  402904:	f1b4 3fff 	cmp.w	r4, #4294967295
  402908:	d105      	bne.n	402916 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40290a:	6829      	ldr	r1, [r5, #0]
  40290c:	4809      	ldr	r0, [pc, #36]	; (402934 <vTaskPlaceOnEventList+0x50>)
  40290e:	3104      	adds	r1, #4
  402910:	4b09      	ldr	r3, [pc, #36]	; (402938 <vTaskPlaceOnEventList+0x54>)
  402912:	4798      	blx	r3
  402914:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  402916:	4b09      	ldr	r3, [pc, #36]	; (40293c <vTaskPlaceOnEventList+0x58>)
  402918:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40291a:	4420      	add	r0, r4
  40291c:	4b08      	ldr	r3, [pc, #32]	; (402940 <vTaskPlaceOnEventList+0x5c>)
  40291e:	4798      	blx	r3
  402920:	bd38      	pop	{r3, r4, r5, pc}
  402922:	bf00      	nop
  402924:	004018ed 	.word	0x004018ed
  402928:	2000365c 	.word	0x2000365c
  40292c:	00401829 	.word	0x00401829
  402930:	00401865 	.word	0x00401865
  402934:	20003580 	.word	0x20003580
  402938:	0040180d 	.word	0x0040180d
  40293c:	20003678 	.word	0x20003678
  402940:	004020e1 	.word	0x004020e1

00402944 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  402944:	b538      	push	{r3, r4, r5, lr}
  402946:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  402948:	b918      	cbnz	r0, 402952 <vTaskPlaceOnEventListRestricted+0xe>
  40294a:	4b09      	ldr	r3, [pc, #36]	; (402970 <vTaskPlaceOnEventListRestricted+0x2c>)
  40294c:	4798      	blx	r3
  40294e:	bf00      	nop
  402950:	e7fd      	b.n	40294e <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  402952:	4c08      	ldr	r4, [pc, #32]	; (402974 <vTaskPlaceOnEventListRestricted+0x30>)
  402954:	6821      	ldr	r1, [r4, #0]
  402956:	3118      	adds	r1, #24
  402958:	4b07      	ldr	r3, [pc, #28]	; (402978 <vTaskPlaceOnEventListRestricted+0x34>)
  40295a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  40295c:	6820      	ldr	r0, [r4, #0]
  40295e:	3004      	adds	r0, #4
  402960:	4b06      	ldr	r3, [pc, #24]	; (40297c <vTaskPlaceOnEventListRestricted+0x38>)
  402962:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  402964:	4b06      	ldr	r3, [pc, #24]	; (402980 <vTaskPlaceOnEventListRestricted+0x3c>)
  402966:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  402968:	4428      	add	r0, r5
  40296a:	4b06      	ldr	r3, [pc, #24]	; (402984 <vTaskPlaceOnEventListRestricted+0x40>)
  40296c:	4798      	blx	r3
  40296e:	bd38      	pop	{r3, r4, r5, pc}
  402970:	004018ed 	.word	0x004018ed
  402974:	2000365c 	.word	0x2000365c
  402978:	0040180d 	.word	0x0040180d
  40297c:	00401865 	.word	0x00401865
  402980:	20003678 	.word	0x20003678
  402984:	004020e1 	.word	0x004020e1

00402988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  402988:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40298a:	68c3      	ldr	r3, [r0, #12]
  40298c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40298e:	b91c      	cbnz	r4, 402998 <xTaskRemoveFromEventList+0x10>
  402990:	4b16      	ldr	r3, [pc, #88]	; (4029ec <xTaskRemoveFromEventList+0x64>)
  402992:	4798      	blx	r3
  402994:	bf00      	nop
  402996:	e7fd      	b.n	402994 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402998:	f104 0518 	add.w	r5, r4, #24
  40299c:	4628      	mov	r0, r5
  40299e:	4b14      	ldr	r3, [pc, #80]	; (4029f0 <xTaskRemoveFromEventList+0x68>)
  4029a0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4029a2:	4b14      	ldr	r3, [pc, #80]	; (4029f4 <xTaskRemoveFromEventList+0x6c>)
  4029a4:	681b      	ldr	r3, [r3, #0]
  4029a6:	b99b      	cbnz	r3, 4029d0 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4029a8:	1d25      	adds	r5, r4, #4
  4029aa:	4628      	mov	r0, r5
  4029ac:	4b10      	ldr	r3, [pc, #64]	; (4029f0 <xTaskRemoveFromEventList+0x68>)
  4029ae:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  4029b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4029b2:	4a11      	ldr	r2, [pc, #68]	; (4029f8 <xTaskRemoveFromEventList+0x70>)
  4029b4:	6812      	ldr	r2, [r2, #0]
  4029b6:	4293      	cmp	r3, r2
  4029b8:	bf84      	itt	hi
  4029ba:	4a0f      	ldrhi	r2, [pc, #60]	; (4029f8 <xTaskRemoveFromEventList+0x70>)
  4029bc:	6013      	strhi	r3, [r2, #0]
  4029be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4029c2:	480e      	ldr	r0, [pc, #56]	; (4029fc <xTaskRemoveFromEventList+0x74>)
  4029c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4029c8:	4629      	mov	r1, r5
  4029ca:	4b0d      	ldr	r3, [pc, #52]	; (402a00 <xTaskRemoveFromEventList+0x78>)
  4029cc:	4798      	blx	r3
  4029ce:	e003      	b.n	4029d8 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4029d0:	480c      	ldr	r0, [pc, #48]	; (402a04 <xTaskRemoveFromEventList+0x7c>)
  4029d2:	4629      	mov	r1, r5
  4029d4:	4b0a      	ldr	r3, [pc, #40]	; (402a00 <xTaskRemoveFromEventList+0x78>)
  4029d6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4029d8:	4b0b      	ldr	r3, [pc, #44]	; (402a08 <xTaskRemoveFromEventList+0x80>)
  4029da:	681b      	ldr	r3, [r3, #0]
  4029dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
  4029e0:	4298      	cmp	r0, r3
  4029e2:	bf34      	ite	cc
  4029e4:	2000      	movcc	r0, #0
  4029e6:	2001      	movcs	r0, #1
  4029e8:	bd38      	pop	{r3, r4, r5, pc}
  4029ea:	bf00      	nop
  4029ec:	004018ed 	.word	0x004018ed
  4029f0:	00401865 	.word	0x00401865
  4029f4:	20003630 	.word	0x20003630
  4029f8:	200035c8 	.word	0x200035c8
  4029fc:	200035cc 	.word	0x200035cc
  402a00:	0040180d 	.word	0x0040180d
  402a04:	20003660 	.word	0x20003660
  402a08:	2000365c 	.word	0x2000365c

00402a0c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  402a0c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  402a0e:	b918      	cbnz	r0, 402a18 <vTaskSetTimeOutState+0xc>
  402a10:	4b05      	ldr	r3, [pc, #20]	; (402a28 <vTaskSetTimeOutState+0x1c>)
  402a12:	4798      	blx	r3
  402a14:	bf00      	nop
  402a16:	e7fd      	b.n	402a14 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402a18:	4a04      	ldr	r2, [pc, #16]	; (402a2c <vTaskSetTimeOutState+0x20>)
  402a1a:	6812      	ldr	r2, [r2, #0]
  402a1c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402a1e:	4a04      	ldr	r2, [pc, #16]	; (402a30 <vTaskSetTimeOutState+0x24>)
  402a20:	6812      	ldr	r2, [r2, #0]
  402a22:	6042      	str	r2, [r0, #4]
  402a24:	bd08      	pop	{r3, pc}
  402a26:	bf00      	nop
  402a28:	004018ed 	.word	0x004018ed
  402a2c:	20003674 	.word	0x20003674
  402a30:	20003678 	.word	0x20003678

00402a34 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  402a34:	b538      	push	{r3, r4, r5, lr}
  402a36:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  402a38:	4604      	mov	r4, r0
  402a3a:	b918      	cbnz	r0, 402a44 <xTaskCheckForTimeOut+0x10>
  402a3c:	4b18      	ldr	r3, [pc, #96]	; (402aa0 <xTaskCheckForTimeOut+0x6c>)
  402a3e:	4798      	blx	r3
  402a40:	bf00      	nop
  402a42:	e7fd      	b.n	402a40 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
  402a44:	b919      	cbnz	r1, 402a4e <xTaskCheckForTimeOut+0x1a>
  402a46:	4b16      	ldr	r3, [pc, #88]	; (402aa0 <xTaskCheckForTimeOut+0x6c>)
  402a48:	4798      	blx	r3
  402a4a:	bf00      	nop
  402a4c:	e7fd      	b.n	402a4a <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
  402a4e:	4b15      	ldr	r3, [pc, #84]	; (402aa4 <xTaskCheckForTimeOut+0x70>)
  402a50:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  402a52:	682b      	ldr	r3, [r5, #0]
  402a54:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a58:	d019      	beq.n	402a8e <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  402a5a:	4a13      	ldr	r2, [pc, #76]	; (402aa8 <xTaskCheckForTimeOut+0x74>)
  402a5c:	6811      	ldr	r1, [r2, #0]
  402a5e:	6822      	ldr	r2, [r4, #0]
  402a60:	428a      	cmp	r2, r1
  402a62:	d004      	beq.n	402a6e <xTaskCheckForTimeOut+0x3a>
  402a64:	4a11      	ldr	r2, [pc, #68]	; (402aac <xTaskCheckForTimeOut+0x78>)
  402a66:	6811      	ldr	r1, [r2, #0]
  402a68:	6862      	ldr	r2, [r4, #4]
  402a6a:	428a      	cmp	r2, r1
  402a6c:	d911      	bls.n	402a92 <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  402a6e:	4a0f      	ldr	r2, [pc, #60]	; (402aac <xTaskCheckForTimeOut+0x78>)
  402a70:	6811      	ldr	r1, [r2, #0]
  402a72:	6862      	ldr	r2, [r4, #4]
  402a74:	1a89      	subs	r1, r1, r2
  402a76:	428b      	cmp	r3, r1
  402a78:	d90d      	bls.n	402a96 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  402a7a:	490c      	ldr	r1, [pc, #48]	; (402aac <xTaskCheckForTimeOut+0x78>)
  402a7c:	6809      	ldr	r1, [r1, #0]
  402a7e:	1a52      	subs	r2, r2, r1
  402a80:	4413      	add	r3, r2
  402a82:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402a84:	4620      	mov	r0, r4
  402a86:	4b0a      	ldr	r3, [pc, #40]	; (402ab0 <xTaskCheckForTimeOut+0x7c>)
  402a88:	4798      	blx	r3
			xReturn = pdFALSE;
  402a8a:	2400      	movs	r4, #0
  402a8c:	e004      	b.n	402a98 <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  402a8e:	2400      	movs	r4, #0
  402a90:	e002      	b.n	402a98 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  402a92:	2401      	movs	r4, #1
  402a94:	e000      	b.n	402a98 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  402a96:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  402a98:	4b06      	ldr	r3, [pc, #24]	; (402ab4 <xTaskCheckForTimeOut+0x80>)
  402a9a:	4798      	blx	r3

	return xReturn;
}
  402a9c:	4620      	mov	r0, r4
  402a9e:	bd38      	pop	{r3, r4, r5, pc}
  402aa0:	004018ed 	.word	0x004018ed
  402aa4:	004018fd 	.word	0x004018fd
  402aa8:	20003674 	.word	0x20003674
  402aac:	20003678 	.word	0x20003678
  402ab0:	00402a0d 	.word	0x00402a0d
  402ab4:	0040191d 	.word	0x0040191d

00402ab8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  402ab8:	2201      	movs	r2, #1
  402aba:	4b01      	ldr	r3, [pc, #4]	; (402ac0 <vTaskMissedYield+0x8>)
  402abc:	601a      	str	r2, [r3, #0]
  402abe:	4770      	bx	lr
  402ac0:	20003698 	.word	0x20003698

00402ac4 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  402ac4:	4b01      	ldr	r3, [pc, #4]	; (402acc <xTaskGetCurrentTaskHandle+0x8>)
  402ac6:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  402ac8:	4770      	bx	lr
  402aca:	bf00      	nop
  402acc:	2000365c 	.word	0x2000365c

00402ad0 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  402ad0:	4b05      	ldr	r3, [pc, #20]	; (402ae8 <xTaskGetSchedulerState+0x18>)
  402ad2:	681b      	ldr	r3, [r3, #0]
  402ad4:	b133      	cbz	r3, 402ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  402ad6:	4b05      	ldr	r3, [pc, #20]	; (402aec <xTaskGetSchedulerState+0x1c>)
  402ad8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
  402ada:	2b00      	cmp	r3, #0
  402adc:	bf14      	ite	ne
  402ade:	2002      	movne	r0, #2
  402ae0:	2001      	moveq	r0, #1
  402ae2:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402ae4:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  402ae6:	4770      	bx	lr
  402ae8:	20003598 	.word	0x20003598
  402aec:	20003630 	.word	0x20003630

00402af0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  402af0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402af2:	4604      	mov	r4, r0
  402af4:	2800      	cmp	r0, #0
  402af6:	d02e      	beq.n	402b56 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402af8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402afa:	4a17      	ldr	r2, [pc, #92]	; (402b58 <vTaskPriorityInherit+0x68>)
  402afc:	6812      	ldr	r2, [r2, #0]
  402afe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402b00:	4293      	cmp	r3, r2
  402b02:	d228      	bcs.n	402b56 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  402b04:	4a14      	ldr	r2, [pc, #80]	; (402b58 <vTaskPriorityInherit+0x68>)
  402b06:	6812      	ldr	r2, [r2, #0]
  402b08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402b0a:	f1c2 0205 	rsb	r2, r2, #5
  402b0e:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402b10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b14:	4a11      	ldr	r2, [pc, #68]	; (402b5c <vTaskPriorityInherit+0x6c>)
  402b16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402b1a:	6942      	ldr	r2, [r0, #20]
  402b1c:	429a      	cmp	r2, r3
  402b1e:	d116      	bne.n	402b4e <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  402b20:	1d05      	adds	r5, r0, #4
  402b22:	4628      	mov	r0, r5
  402b24:	4b0e      	ldr	r3, [pc, #56]	; (402b60 <vTaskPriorityInherit+0x70>)
  402b26:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402b28:	4b0b      	ldr	r3, [pc, #44]	; (402b58 <vTaskPriorityInherit+0x68>)
  402b2a:	681b      	ldr	r3, [r3, #0]
  402b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  402b30:	4a0c      	ldr	r2, [pc, #48]	; (402b64 <vTaskPriorityInherit+0x74>)
  402b32:	6812      	ldr	r2, [r2, #0]
  402b34:	4293      	cmp	r3, r2
  402b36:	bf84      	itt	hi
  402b38:	4a0a      	ldrhi	r2, [pc, #40]	; (402b64 <vTaskPriorityInherit+0x74>)
  402b3a:	6013      	strhi	r3, [r2, #0]
  402b3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b40:	4806      	ldr	r0, [pc, #24]	; (402b5c <vTaskPriorityInherit+0x6c>)
  402b42:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  402b46:	4629      	mov	r1, r5
  402b48:	4b07      	ldr	r3, [pc, #28]	; (402b68 <vTaskPriorityInherit+0x78>)
  402b4a:	4798      	blx	r3
  402b4c:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402b4e:	4b02      	ldr	r3, [pc, #8]	; (402b58 <vTaskPriorityInherit+0x68>)
  402b50:	681b      	ldr	r3, [r3, #0]
  402b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402b54:	62c3      	str	r3, [r0, #44]	; 0x2c
  402b56:	bd38      	pop	{r3, r4, r5, pc}
  402b58:	2000365c 	.word	0x2000365c
  402b5c:	200035cc 	.word	0x200035cc
  402b60:	00401865 	.word	0x00401865
  402b64:	200035c8 	.word	0x200035c8
  402b68:	0040180d 	.word	0x0040180d

00402b6c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  402b6c:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  402b6e:	4604      	mov	r4, r0
  402b70:	b1d0      	cbz	r0, 402ba8 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402b72:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402b74:	6c83      	ldr	r3, [r0, #72]	; 0x48
  402b76:	429a      	cmp	r2, r3
  402b78:	d016      	beq.n	402ba8 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  402b7a:	1d05      	adds	r5, r0, #4
  402b7c:	4628      	mov	r0, r5
  402b7e:	4b0b      	ldr	r3, [pc, #44]	; (402bac <vTaskPriorityDisinherit+0x40>)
  402b80:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  402b82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b84:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  402b86:	f1c3 0205 	rsb	r2, r3, #5
  402b8a:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  402b8c:	4a08      	ldr	r2, [pc, #32]	; (402bb0 <vTaskPriorityDisinherit+0x44>)
  402b8e:	6812      	ldr	r2, [r2, #0]
  402b90:	4293      	cmp	r3, r2
  402b92:	bf84      	itt	hi
  402b94:	4a06      	ldrhi	r2, [pc, #24]	; (402bb0 <vTaskPriorityDisinherit+0x44>)
  402b96:	6013      	strhi	r3, [r2, #0]
  402b98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b9c:	4805      	ldr	r0, [pc, #20]	; (402bb4 <vTaskPriorityDisinherit+0x48>)
  402b9e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  402ba2:	4629      	mov	r1, r5
  402ba4:	4b04      	ldr	r3, [pc, #16]	; (402bb8 <vTaskPriorityDisinherit+0x4c>)
  402ba6:	4798      	blx	r3
  402ba8:	bd38      	pop	{r3, r4, r5, pc}
  402baa:	bf00      	nop
  402bac:	00401865 	.word	0x00401865
  402bb0:	200035c8 	.word	0x200035c8
  402bb4:	200035cc 	.word	0x200035cc
  402bb8:	0040180d 	.word	0x0040180d

00402bbc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  402bbc:	b510      	push	{r4, lr}
  402bbe:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402bc0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402bc2:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  402bc4:	4291      	cmp	r1, r2
  402bc6:	d80a      	bhi.n	402bde <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  402bc8:	1ad2      	subs	r2, r2, r3
  402bca:	6981      	ldr	r1, [r0, #24]
  402bcc:	428a      	cmp	r2, r1
  402bce:	d211      	bcs.n	402bf4 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402bd0:	4b0a      	ldr	r3, [pc, #40]	; (402bfc <prvInsertTimerInActiveList+0x40>)
  402bd2:	6818      	ldr	r0, [r3, #0]
  402bd4:	1d21      	adds	r1, r4, #4
  402bd6:	4b0a      	ldr	r3, [pc, #40]	; (402c00 <prvInsertTimerInActiveList+0x44>)
  402bd8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  402bda:	2000      	movs	r0, #0
  402bdc:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402bde:	429a      	cmp	r2, r3
  402be0:	d201      	bcs.n	402be6 <prvInsertTimerInActiveList+0x2a>
  402be2:	4299      	cmp	r1, r3
  402be4:	d208      	bcs.n	402bf8 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402be6:	4b07      	ldr	r3, [pc, #28]	; (402c04 <prvInsertTimerInActiveList+0x48>)
  402be8:	6818      	ldr	r0, [r3, #0]
  402bea:	1d21      	adds	r1, r4, #4
  402bec:	4b04      	ldr	r3, [pc, #16]	; (402c00 <prvInsertTimerInActiveList+0x44>)
  402bee:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  402bf0:	2000      	movs	r0, #0
  402bf2:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402bf4:	2001      	movs	r0, #1
  402bf6:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402bf8:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402bfa:	bd10      	pop	{r4, pc}
  402bfc:	200036d8 	.word	0x200036d8
  402c00:	00401829 	.word	0x00401829
  402c04:	200036a4 	.word	0x200036a4

00402c08 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402c08:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402c0a:	4b0d      	ldr	r3, [pc, #52]	; (402c40 <prvCheckForValidListAndQueue+0x38>)
  402c0c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402c0e:	4b0d      	ldr	r3, [pc, #52]	; (402c44 <prvCheckForValidListAndQueue+0x3c>)
  402c10:	681b      	ldr	r3, [r3, #0]
  402c12:	b98b      	cbnz	r3, 402c38 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
  402c14:	4d0c      	ldr	r5, [pc, #48]	; (402c48 <prvCheckForValidListAndQueue+0x40>)
  402c16:	4628      	mov	r0, r5
  402c18:	4e0c      	ldr	r6, [pc, #48]	; (402c4c <prvCheckForValidListAndQueue+0x44>)
  402c1a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402c1c:	4c0c      	ldr	r4, [pc, #48]	; (402c50 <prvCheckForValidListAndQueue+0x48>)
  402c1e:	4620      	mov	r0, r4
  402c20:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402c22:	4b0c      	ldr	r3, [pc, #48]	; (402c54 <prvCheckForValidListAndQueue+0x4c>)
  402c24:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402c26:	4b0c      	ldr	r3, [pc, #48]	; (402c58 <prvCheckForValidListAndQueue+0x50>)
  402c28:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  402c2a:	2005      	movs	r0, #5
  402c2c:	210c      	movs	r1, #12
  402c2e:	2200      	movs	r2, #0
  402c30:	4b0a      	ldr	r3, [pc, #40]	; (402c5c <prvCheckForValidListAndQueue+0x54>)
  402c32:	4798      	blx	r3
  402c34:	4b03      	ldr	r3, [pc, #12]	; (402c44 <prvCheckForValidListAndQueue+0x3c>)
  402c36:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  402c38:	4b09      	ldr	r3, [pc, #36]	; (402c60 <prvCheckForValidListAndQueue+0x58>)
  402c3a:	4798      	blx	r3
  402c3c:	bd70      	pop	{r4, r5, r6, pc}
  402c3e:	bf00      	nop
  402c40:	004018fd 	.word	0x004018fd
  402c44:	200036d4 	.word	0x200036d4
  402c48:	200036a8 	.word	0x200036a8
  402c4c:	004017ed 	.word	0x004017ed
  402c50:	200036bc 	.word	0x200036bc
  402c54:	200036a4 	.word	0x200036a4
  402c58:	200036d8 	.word	0x200036d8
  402c5c:	00401cd1 	.word	0x00401cd1
  402c60:	0040191d 	.word	0x0040191d

00402c64 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  402c64:	b510      	push	{r4, lr}
  402c66:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  402c68:	4b0b      	ldr	r3, [pc, #44]	; (402c98 <xTimerCreateTimerTask+0x34>)
  402c6a:	4798      	blx	r3

	if( xTimerQueue != NULL )
  402c6c:	4b0b      	ldr	r3, [pc, #44]	; (402c9c <xTimerCreateTimerTask+0x38>)
  402c6e:	681b      	ldr	r3, [r3, #0]
  402c70:	b15b      	cbz	r3, 402c8a <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402c72:	2304      	movs	r3, #4
  402c74:	9300      	str	r3, [sp, #0]
  402c76:	2300      	movs	r3, #0
  402c78:	9301      	str	r3, [sp, #4]
  402c7a:	9302      	str	r3, [sp, #8]
  402c7c:	9303      	str	r3, [sp, #12]
  402c7e:	4808      	ldr	r0, [pc, #32]	; (402ca0 <xTimerCreateTimerTask+0x3c>)
  402c80:	4908      	ldr	r1, [pc, #32]	; (402ca4 <xTimerCreateTimerTask+0x40>)
  402c82:	228c      	movs	r2, #140	; 0x8c
  402c84:	4c08      	ldr	r4, [pc, #32]	; (402ca8 <xTimerCreateTimerTask+0x44>)
  402c86:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
  402c88:	b918      	cbnz	r0, 402c92 <xTimerCreateTimerTask+0x2e>
  402c8a:	4b08      	ldr	r3, [pc, #32]	; (402cac <xTimerCreateTimerTask+0x48>)
  402c8c:	4798      	blx	r3
  402c8e:	bf00      	nop
  402c90:	e7fd      	b.n	402c8e <xTimerCreateTimerTask+0x2a>
	return xReturn;
}
  402c92:	b004      	add	sp, #16
  402c94:	bd10      	pop	{r4, pc}
  402c96:	bf00      	nop
  402c98:	00402c09 	.word	0x00402c09
  402c9c:	200036d4 	.word	0x200036d4
  402ca0:	00402e09 	.word	0x00402e09
  402ca4:	0040b5d4 	.word	0x0040b5d4
  402ca8:	004021cd 	.word	0x004021cd
  402cac:	004018ed 	.word	0x004018ed

00402cb0 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  402cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402cb4:	4680      	mov	r8, r0
  402cb6:	4616      	mov	r6, r2
  402cb8:	461d      	mov	r5, r3
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  402cba:	460f      	mov	r7, r1
  402cbc:	b919      	cbnz	r1, 402cc6 <xTimerCreate+0x16>
	{
		pxNewTimer = NULL;
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  402cbe:	4b0c      	ldr	r3, [pc, #48]	; (402cf0 <xTimerCreate+0x40>)
  402cc0:	4798      	blx	r3
  402cc2:	bf00      	nop
  402cc4:	e7fd      	b.n	402cc2 <xTimerCreate+0x12>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  402cc6:	2028      	movs	r0, #40	; 0x28
  402cc8:	4b0a      	ldr	r3, [pc, #40]	; (402cf4 <xTimerCreate+0x44>)
  402cca:	4798      	blx	r3
		if( pxNewTimer != NULL )
  402ccc:	4604      	mov	r4, r0
  402cce:	b158      	cbz	r0, 402ce8 <xTimerCreate+0x38>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  402cd0:	4b09      	ldr	r3, [pc, #36]	; (402cf8 <xTimerCreate+0x48>)
  402cd2:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  402cd4:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  402cd8:	61a7      	str	r7, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  402cda:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  402cdc:	6225      	str	r5, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  402cde:	9b06      	ldr	r3, [sp, #24]
  402ce0:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  402ce2:	1d20      	adds	r0, r4, #4
  402ce4:	4b05      	ldr	r3, [pc, #20]	; (402cfc <xTimerCreate+0x4c>)
  402ce6:	4798      	blx	r3
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
}
  402ce8:	4620      	mov	r0, r4
  402cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cee:	bf00      	nop
  402cf0:	004018ed 	.word	0x004018ed
  402cf4:	00401a45 	.word	0x00401a45
  402cf8:	00402c09 	.word	0x00402c09
  402cfc:	00401805 	.word	0x00401805

00402d00 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  402d00:	b510      	push	{r4, lr}
  402d02:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402d04:	4c0f      	ldr	r4, [pc, #60]	; (402d44 <xTimerGenericCommand+0x44>)
  402d06:	6824      	ldr	r4, [r4, #0]
  402d08:	b1c4      	cbz	r4, 402d3c <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402d0a:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  402d0c:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  402d0e:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
  402d10:	b96b      	cbnz	r3, 402d2e <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402d12:	4b0d      	ldr	r3, [pc, #52]	; (402d48 <xTimerGenericCommand+0x48>)
  402d14:	4798      	blx	r3
  402d16:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  402d18:	4b0a      	ldr	r3, [pc, #40]	; (402d44 <xTimerGenericCommand+0x44>)
  402d1a:	6818      	ldr	r0, [r3, #0]
  402d1c:	a901      	add	r1, sp, #4
  402d1e:	bf07      	ittee	eq
  402d20:	9a06      	ldreq	r2, [sp, #24]
  402d22:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402d24:	2200      	movne	r2, #0
  402d26:	4613      	movne	r3, r2
  402d28:	4c08      	ldr	r4, [pc, #32]	; (402d4c <xTimerGenericCommand+0x4c>)
  402d2a:	47a0      	blx	r4
  402d2c:	e007      	b.n	402d3e <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402d2e:	4620      	mov	r0, r4
  402d30:	a901      	add	r1, sp, #4
  402d32:	461a      	mov	r2, r3
  402d34:	2300      	movs	r3, #0
  402d36:	4c06      	ldr	r4, [pc, #24]	; (402d50 <xTimerGenericCommand+0x50>)
  402d38:	47a0      	blx	r4
  402d3a:	e000      	b.n	402d3e <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
  402d3c:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
  402d3e:	b004      	add	sp, #16
  402d40:	bd10      	pop	{r4, pc}
  402d42:	bf00      	nop
  402d44:	200036d4 	.word	0x200036d4
  402d48:	00402ad1 	.word	0x00402ad1
  402d4c:	00401d29 	.word	0x00401d29
  402d50:	00401ea9 	.word	0x00401ea9

00402d54 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  402d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d58:	b082      	sub	sp, #8
  402d5a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  402d5c:	4b22      	ldr	r3, [pc, #136]	; (402de8 <prvSampleTimeNow+0x94>)
  402d5e:	4798      	blx	r3
  402d60:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
  402d62:	4b22      	ldr	r3, [pc, #136]	; (402dec <prvSampleTimeNow+0x98>)
  402d64:	681b      	ldr	r3, [r3, #0]
  402d66:	4298      	cmp	r0, r3
  402d68:	d234      	bcs.n	402dd4 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402d6a:	4e21      	ldr	r6, [pc, #132]	; (402df0 <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402d6c:	4f21      	ldr	r7, [pc, #132]	; (402df4 <prvSampleTimeNow+0xa0>)
  402d6e:	e024      	b.n	402dba <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d70:	68da      	ldr	r2, [r3, #12]
  402d72:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d76:	68db      	ldr	r3, [r3, #12]
  402d78:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402d7a:	1d25      	adds	r5, r4, #4
  402d7c:	4628      	mov	r0, r5
  402d7e:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402d82:	4620      	mov	r0, r4
  402d84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402d86:	69e3      	ldr	r3, [r4, #28]
  402d88:	2b01      	cmp	r3, #1
  402d8a:	d116      	bne.n	402dba <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402d8c:	69a3      	ldr	r3, [r4, #24]
  402d8e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402d90:	4553      	cmp	r3, sl
  402d92:	d906      	bls.n	402da2 <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402d94:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402d96:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d98:	6830      	ldr	r0, [r6, #0]
  402d9a:	4629      	mov	r1, r5
  402d9c:	4b16      	ldr	r3, [pc, #88]	; (402df8 <prvSampleTimeNow+0xa4>)
  402d9e:	4798      	blx	r3
  402da0:	e00b      	b.n	402dba <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  402da2:	2300      	movs	r3, #0
  402da4:	9300      	str	r3, [sp, #0]
  402da6:	4620      	mov	r0, r4
  402da8:	4619      	mov	r1, r3
  402daa:	4652      	mov	r2, sl
  402dac:	4c13      	ldr	r4, [pc, #76]	; (402dfc <prvSampleTimeNow+0xa8>)
  402dae:	47a0      	blx	r4
				configASSERT( xResult );
  402db0:	b918      	cbnz	r0, 402dba <prvSampleTimeNow+0x66>
  402db2:	4b13      	ldr	r3, [pc, #76]	; (402e00 <prvSampleTimeNow+0xac>)
  402db4:	4798      	blx	r3
  402db6:	bf00      	nop
  402db8:	e7fd      	b.n	402db6 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402dba:	6833      	ldr	r3, [r6, #0]
  402dbc:	681a      	ldr	r2, [r3, #0]
  402dbe:	2a00      	cmp	r2, #0
  402dc0:	d1d6      	bne.n	402d70 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402dc2:	4a10      	ldr	r2, [pc, #64]	; (402e04 <prvSampleTimeNow+0xb0>)
  402dc4:	6811      	ldr	r1, [r2, #0]
  402dc6:	480a      	ldr	r0, [pc, #40]	; (402df0 <prvSampleTimeNow+0x9c>)
  402dc8:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
  402dca:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
  402dcc:	2301      	movs	r3, #1
  402dce:	f8c9 3000 	str.w	r3, [r9]
  402dd2:	e002      	b.n	402dda <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402dd4:	2300      	movs	r3, #0
  402dd6:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
  402dda:	4b04      	ldr	r3, [pc, #16]	; (402dec <prvSampleTimeNow+0x98>)
  402ddc:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
  402de0:	4640      	mov	r0, r8
  402de2:	b002      	add	sp, #8
  402de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402de8:	0040244d 	.word	0x0040244d
  402dec:	200036d0 	.word	0x200036d0
  402df0:	200036a4 	.word	0x200036a4
  402df4:	00401865 	.word	0x00401865
  402df8:	00401829 	.word	0x00401829
  402dfc:	00402d01 	.word	0x00402d01
  402e00:	004018ed 	.word	0x004018ed
  402e04:	200036d8 	.word	0x200036d8

00402e08 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402e0c:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  402e0e:	4d4d      	ldr	r5, [pc, #308]	; (402f44 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
  402e10:	f8df 8160 	ldr.w	r8, [pc, #352]	; 402f74 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402e14:	4b4c      	ldr	r3, [pc, #304]	; (402f48 <prvTimerTask+0x140>)
  402e16:	681b      	ldr	r3, [r3, #0]
  402e18:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402e1a:	2a00      	cmp	r2, #0
  402e1c:	f000 8087 	beq.w	402f2e <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402e20:	68db      	ldr	r3, [r3, #12]
  402e22:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  402e24:	4b49      	ldr	r3, [pc, #292]	; (402f4c <prvTimerTask+0x144>)
  402e26:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402e28:	a803      	add	r0, sp, #12
  402e2a:	4b49      	ldr	r3, [pc, #292]	; (402f50 <prvTimerTask+0x148>)
  402e2c:	4798      	blx	r3
  402e2e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402e30:	9b03      	ldr	r3, [sp, #12]
  402e32:	2b00      	cmp	r3, #0
  402e34:	d130      	bne.n	402e98 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402e36:	4286      	cmp	r6, r0
  402e38:	d824      	bhi.n	402e84 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
  402e3a:	4b46      	ldr	r3, [pc, #280]	; (402f54 <prvTimerTask+0x14c>)
  402e3c:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402e3e:	4b42      	ldr	r3, [pc, #264]	; (402f48 <prvTimerTask+0x140>)
  402e40:	681b      	ldr	r3, [r3, #0]
  402e42:	68db      	ldr	r3, [r3, #12]
  402e44:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  402e46:	1d20      	adds	r0, r4, #4
  402e48:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402e4a:	69e3      	ldr	r3, [r4, #28]
  402e4c:	2b01      	cmp	r3, #1
  402e4e:	d114      	bne.n	402e7a <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402e50:	69a1      	ldr	r1, [r4, #24]
  402e52:	4620      	mov	r0, r4
  402e54:	4431      	add	r1, r6
  402e56:	463a      	mov	r2, r7
  402e58:	4633      	mov	r3, r6
  402e5a:	4f3f      	ldr	r7, [pc, #252]	; (402f58 <prvTimerTask+0x150>)
  402e5c:	47b8      	blx	r7
  402e5e:	2801      	cmp	r0, #1
  402e60:	d10b      	bne.n	402e7a <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  402e62:	2300      	movs	r3, #0
  402e64:	9300      	str	r3, [sp, #0]
  402e66:	4620      	mov	r0, r4
  402e68:	4619      	mov	r1, r3
  402e6a:	4632      	mov	r2, r6
  402e6c:	4e3b      	ldr	r6, [pc, #236]	; (402f5c <prvTimerTask+0x154>)
  402e6e:	47b0      	blx	r6
			configASSERT( xResult );
  402e70:	b918      	cbnz	r0, 402e7a <prvTimerTask+0x72>
  402e72:	4b3b      	ldr	r3, [pc, #236]	; (402f60 <prvTimerTask+0x158>)
  402e74:	4798      	blx	r3
  402e76:	bf00      	nop
  402e78:	e7fd      	b.n	402e76 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402e7c:	4620      	mov	r0, r4
  402e7e:	4798      	blx	r3
  402e80:	e00c      	b.n	402e9c <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  402e82:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  402e84:	6828      	ldr	r0, [r5, #0]
  402e86:	1bf1      	subs	r1, r6, r7
  402e88:	4b36      	ldr	r3, [pc, #216]	; (402f64 <prvTimerTask+0x15c>)
  402e8a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402e8c:	4b31      	ldr	r3, [pc, #196]	; (402f54 <prvTimerTask+0x14c>)
  402e8e:	4798      	blx	r3
  402e90:	b920      	cbnz	r0, 402e9c <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  402e92:	4b35      	ldr	r3, [pc, #212]	; (402f68 <prvTimerTask+0x160>)
  402e94:	4798      	blx	r3
  402e96:	e001      	b.n	402e9c <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  402e98:	4b2e      	ldr	r3, [pc, #184]	; (402f54 <prvTimerTask+0x14c>)
  402e9a:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402e9c:	a802      	add	r0, sp, #8
  402e9e:	4b2c      	ldr	r3, [pc, #176]	; (402f50 <prvTimerTask+0x148>)
  402ea0:	4798      	blx	r3
  402ea2:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402ea4:	4e31      	ldr	r6, [pc, #196]	; (402f6c <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402ea6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 402f58 <prvTimerTask+0x150>
  402eaa:	e038      	b.n	402f1e <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
  402eac:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  402eae:	b11c      	cbz	r4, 402eb8 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402eb0:	6961      	ldr	r1, [r4, #20]
  402eb2:	b109      	cbz	r1, 402eb8 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  402eb4:	1d20      	adds	r0, r4, #4
  402eb6:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  402eb8:	9903      	ldr	r1, [sp, #12]
  402eba:	2902      	cmp	r1, #2
  402ebc:	d01f      	beq.n	402efe <prvTimerTask+0xf6>
  402ebe:	2903      	cmp	r1, #3
  402ec0:	d02a      	beq.n	402f18 <prvTimerTask+0x110>
  402ec2:	2900      	cmp	r1, #0
  402ec4:	d12b      	bne.n	402f1e <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402ec6:	9b04      	ldr	r3, [sp, #16]
  402ec8:	69a1      	ldr	r1, [r4, #24]
  402eca:	4620      	mov	r0, r4
  402ecc:	4419      	add	r1, r3
  402ece:	463a      	mov	r2, r7
  402ed0:	47c8      	blx	r9
  402ed2:	2801      	cmp	r0, #1
  402ed4:	d123      	bne.n	402f1e <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402ed8:	4620      	mov	r0, r4
  402eda:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402edc:	69e3      	ldr	r3, [r4, #28]
  402ede:	2b01      	cmp	r3, #1
  402ee0:	d11d      	bne.n	402f1e <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402ee2:	69a2      	ldr	r2, [r4, #24]
  402ee4:	2300      	movs	r3, #0
  402ee6:	9300      	str	r3, [sp, #0]
  402ee8:	4620      	mov	r0, r4
  402eea:	4619      	mov	r1, r3
  402eec:	9c04      	ldr	r4, [sp, #16]
  402eee:	4422      	add	r2, r4
  402ef0:	4c1a      	ldr	r4, [pc, #104]	; (402f5c <prvTimerTask+0x154>)
  402ef2:	47a0      	blx	r4
						configASSERT( xResult );
  402ef4:	b998      	cbnz	r0, 402f1e <prvTimerTask+0x116>
  402ef6:	4b1a      	ldr	r3, [pc, #104]	; (402f60 <prvTimerTask+0x158>)
  402ef8:	4798      	blx	r3
  402efa:	bf00      	nop
  402efc:	e7fd      	b.n	402efa <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  402efe:	9904      	ldr	r1, [sp, #16]
  402f00:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402f02:	b919      	cbnz	r1, 402f0c <prvTimerTask+0x104>
  402f04:	4b16      	ldr	r3, [pc, #88]	; (402f60 <prvTimerTask+0x158>)
  402f06:	4798      	blx	r3
  402f08:	bf00      	nop
  402f0a:	e7fd      	b.n	402f08 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402f0c:	4620      	mov	r0, r4
  402f0e:	4439      	add	r1, r7
  402f10:	463a      	mov	r2, r7
  402f12:	463b      	mov	r3, r7
  402f14:	47c8      	blx	r9
  402f16:	e002      	b.n	402f1e <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  402f18:	4620      	mov	r0, r4
  402f1a:	4b15      	ldr	r3, [pc, #84]	; (402f70 <prvTimerTask+0x168>)
  402f1c:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402f1e:	6828      	ldr	r0, [r5, #0]
  402f20:	a903      	add	r1, sp, #12
  402f22:	2200      	movs	r2, #0
  402f24:	4613      	mov	r3, r2
  402f26:	47b0      	blx	r6
  402f28:	2800      	cmp	r0, #0
  402f2a:	d1bf      	bne.n	402eac <prvTimerTask+0xa4>
  402f2c:	e772      	b.n	402e14 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  402f2e:	4b07      	ldr	r3, [pc, #28]	; (402f4c <prvTimerTask+0x144>)
  402f30:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402f32:	a803      	add	r0, sp, #12
  402f34:	4b06      	ldr	r3, [pc, #24]	; (402f50 <prvTimerTask+0x148>)
  402f36:	4798      	blx	r3
  402f38:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402f3a:	9b03      	ldr	r3, [sp, #12]
  402f3c:	2b00      	cmp	r3, #0
  402f3e:	d0a0      	beq.n	402e82 <prvTimerTask+0x7a>
  402f40:	e7aa      	b.n	402e98 <prvTimerTask+0x90>
  402f42:	bf00      	nop
  402f44:	200036d4 	.word	0x200036d4
  402f48:	200036a4 	.word	0x200036a4
  402f4c:	0040243d 	.word	0x0040243d
  402f50:	00402d55 	.word	0x00402d55
  402f54:	004025a9 	.word	0x004025a9
  402f58:	00402bbd 	.word	0x00402bbd
  402f5c:	00402d01 	.word	0x00402d01
  402f60:	004018ed 	.word	0x004018ed
  402f64:	00402095 	.word	0x00402095
  402f68:	004018dd 	.word	0x004018dd
  402f6c:	00401f39 	.word	0x00401f39
  402f70:	00401b09 	.word	0x00401b09
  402f74:	00401865 	.word	0x00401865

00402f78 <vTimerCallback>:
		LED_Toggle(LED1_GPIO);
		xSemaphoreTake(xSem, portMAX_DELAY);
	}
}

void vTimerCallback(void *pvParameters){
  402f78:	b510      	push	{r4, lr}
	xSemaphoreGive(xSem);
  402f7a:	4b04      	ldr	r3, [pc, #16]	; (402f8c <vTimerCallback+0x14>)
  402f7c:	6818      	ldr	r0, [r3, #0]
  402f7e:	2100      	movs	r1, #0
  402f80:	460a      	mov	r2, r1
  402f82:	460b      	mov	r3, r1
  402f84:	4c02      	ldr	r4, [pc, #8]	; (402f90 <vTimerCallback+0x18>)
  402f86:	47a0      	blx	r4
  402f88:	bd10      	pop	{r4, pc}
  402f8a:	bf00      	nop
  402f8c:	20003820 	.word	0x20003820
  402f90:	00401d29 	.word	0x00401d29

00402f94 <task_led1>:
		vTaskDelay(DELAY_500MS);
	}
}

static void task_led1(void *pvParameters)
{
  402f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UNUSED(pvParameters);
	for (;;) {
		printf_mux("\tLed1!");
  402f96:	4f08      	ldr	r7, [pc, #32]	; (402fb8 <task_led1+0x24>)
  402f98:	4e08      	ldr	r6, [pc, #32]	; (402fbc <task_led1+0x28>)
		LED_Toggle(LED1_GPIO);
  402f9a:	4d09      	ldr	r5, [pc, #36]	; (402fc0 <task_led1+0x2c>)

static void task_led1(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		printf_mux("\tLed1!");
  402f9c:	4638      	mov	r0, r7
  402f9e:	47b0      	blx	r6
		LED_Toggle(LED1_GPIO);
  402fa0:	202e      	movs	r0, #46	; 0x2e
  402fa2:	47a8      	blx	r5
		xSemaphoreTake(xSem, portMAX_DELAY);
  402fa4:	4b07      	ldr	r3, [pc, #28]	; (402fc4 <task_led1+0x30>)
  402fa6:	6818      	ldr	r0, [r3, #0]
  402fa8:	2100      	movs	r1, #0
  402faa:	f04f 32ff 	mov.w	r2, #4294967295
  402fae:	460b      	mov	r3, r1
  402fb0:	4c05      	ldr	r4, [pc, #20]	; (402fc8 <task_led1+0x34>)
  402fb2:	47a0      	blx	r4
  402fb4:	e7f2      	b.n	402f9c <task_led1+0x8>
  402fb6:	bf00      	nop
  402fb8:	0040b5dc 	.word	0x0040b5dc
  402fbc:	00400229 	.word	0x00400229
  402fc0:	00401015 	.word	0x00401015
  402fc4:	20003820 	.word	0x20003820
  402fc8:	00401f39 	.word	0x00401f39

00402fcc <task_led0>:
		vTaskDelay(DELAY_1S);
	}
}

static void task_led0(void *pvParameters)
{
  402fcc:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		printf_mux("\tLed0!");
  402fce:	4e06      	ldr	r6, [pc, #24]	; (402fe8 <task_led0+0x1c>)
  402fd0:	4d06      	ldr	r5, [pc, #24]	; (402fec <task_led0+0x20>)
		LED_Toggle(LED0_GPIO);
  402fd2:	4c07      	ldr	r4, [pc, #28]	; (402ff0 <task_led0+0x24>)

static void task_led0(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		printf_mux("\tLed0!");
  402fd4:	4630      	mov	r0, r6
  402fd6:	47a8      	blx	r5
		LED_Toggle(LED0_GPIO);
  402fd8:	2017      	movs	r0, #23
  402fda:	47a0      	blx	r4
		vTaskDelay(DELAY_500MS);
  402fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402fe0:	4b04      	ldr	r3, [pc, #16]	; (402ff4 <task_led0+0x28>)
  402fe2:	4798      	blx	r3
  402fe4:	e7f6      	b.n	402fd4 <task_led0+0x8>
  402fe6:	bf00      	nop
  402fe8:	0040b5e4 	.word	0x0040b5e4
  402fec:	00400229 	.word	0x00400229
  402ff0:	00401015 	.word	0x00401015
  402ff4:	004026b1 	.word	0x004026b1

00402ff8 <task_monitor>:
/**
 * \brief This task, when activated, send every ten seconds on debug UART
 * the whole report of free heap and total tasks status
 */
static void task_monitor(void *pvParameters)
{
  402ff8:	b580      	push	{r7, lr}
	static portCHAR szList[256];
	UNUSED(pvParameters);

	for (;;) {
		printf_mux("--- Number of Tasks: %u", (unsigned int)uxTaskGetNumberOfTasks());
  402ffa:	4f0a      	ldr	r7, [pc, #40]	; (403024 <task_monitor+0x2c>)
  402ffc:	4e0a      	ldr	r6, [pc, #40]	; (403028 <task_monitor+0x30>)
  402ffe:	4c0b      	ldr	r4, [pc, #44]	; (40302c <task_monitor+0x34>)
  403000:	47b8      	blx	r7
  403002:	4601      	mov	r1, r0
  403004:	4630      	mov	r0, r6
  403006:	47a0      	blx	r4
		printf_mux("Name\t\tState\tPrior\tStack\tNum");
  403008:	4809      	ldr	r0, [pc, #36]	; (403030 <task_monitor+0x38>)
  40300a:	47a0      	blx	r4
		vTaskList((signed portCHAR *)szList);
  40300c:	4d09      	ldr	r5, [pc, #36]	; (403034 <task_monitor+0x3c>)
  40300e:	4628      	mov	r0, r5
  403010:	4b09      	ldr	r3, [pc, #36]	; (403038 <task_monitor+0x40>)
  403012:	4798      	blx	r3
		printf_mux(szList);
  403014:	4628      	mov	r0, r5
  403016:	47a0      	blx	r4
		vTaskDelay(DELAY_1S);
  403018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40301c:	4b07      	ldr	r3, [pc, #28]	; (40303c <task_monitor+0x44>)
  40301e:	4798      	blx	r3
  403020:	e7ee      	b.n	403000 <task_monitor+0x8>
  403022:	bf00      	nop
  403024:	0040246d 	.word	0x0040246d
  403028:	0040b5ec 	.word	0x0040b5ec
  40302c:	00400229 	.word	0x00400229
  403030:	0040b604 	.word	0x0040b604
  403034:	200036dc 	.word	0x200036dc
  403038:	00402785 	.word	0x00402785
  40303c:	004026b1 	.word	0x004026b1

00403040 <vApplicationIdleHook>:

/**
 * \brief This function is called by FreeRTOS idle task
 */
extern void vApplicationIdleHook(void)
{
  403040:	4770      	bx	lr
  403042:	bf00      	nop

00403044 <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  403044:	4770      	bx	lr
  403046:	bf00      	nop

00403048 <SPI_Handler>:
struct ili9225_opt_t g_ili9225_display_opt;
/**
 * \brief Override SPI handler.
 */
void SPI_Handler(void)
{
  403048:	b508      	push	{r3, lr}
	ili9225_spi_handler();
  40304a:	4b01      	ldr	r3, [pc, #4]	; (403050 <SPI_Handler+0x8>)
  40304c:	4798      	blx	r3
  40304e:	bd08      	pop	{r3, pc}
  403050:	00400b1d 	.word	0x00400b1d

00403054 <config_lcd>:
}

void config_lcd(void){
  403054:	b510      	push	{r4, lr}
	
	/* Initialize display parameter */
	g_ili9225_display_opt.ul_width = ILI9225_LCD_WIDTH;
  403056:	4c0c      	ldr	r4, [pc, #48]	; (403088 <config_lcd+0x34>)
  403058:	23b0      	movs	r3, #176	; 0xb0
  40305a:	6023      	str	r3, [r4, #0]
	g_ili9225_display_opt.ul_height = ILI9225_LCD_HEIGHT;
  40305c:	23dc      	movs	r3, #220	; 0xdc
  40305e:	6063      	str	r3, [r4, #4]
	g_ili9225_display_opt.foreground_color = COLOR_BLACK;
  403060:	2300      	movs	r3, #0
  403062:	60a3      	str	r3, [r4, #8]
	g_ili9225_display_opt.background_color = COLOR_WHITE;
  403064:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  403068:	60e3      	str	r3, [r4, #12]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  40306a:	4b08      	ldr	r3, [pc, #32]	; (40308c <config_lcd+0x38>)
  40306c:	4798      	blx	r3

	/* Initialize LCD */
	ili9225_init(&g_ili9225_display_opt);
  40306e:	4620      	mov	r0, r4
  403070:	4b07      	ldr	r3, [pc, #28]	; (403090 <config_lcd+0x3c>)
  403072:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_AVG_BACKLIGHT_LEVEL);
  403074:	2008      	movs	r0, #8
  403076:	4b07      	ldr	r3, [pc, #28]	; (403094 <config_lcd+0x40>)
  403078:	4798      	blx	r3

	/* Turn on LCD */
	ili9225_display_on();
  40307a:	4b07      	ldr	r3, [pc, #28]	; (403098 <config_lcd+0x44>)
  40307c:	4798      	blx	r3
	
	/* Draw filled rectangle with white color */
	ili9225_fill( (ili9225_color_t) COLOR_WHITE);
  40307e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  403082:	4b06      	ldr	r3, [pc, #24]	; (40309c <config_lcd+0x48>)
  403084:	4798      	blx	r3
  403086:	bd10      	pop	{r4, pc}
  403088:	20003828 	.word	0x20003828
  40308c:	00400a35 	.word	0x00400a35
  403090:	00400bcd 	.word	0x00400bcd
  403094:	004009d9 	.word	0x004009d9
  403098:	00400b35 	.word	0x00400b35
  40309c:	00400d95 	.word	0x00400d95

004030a0 <main>:
void vTimerCallback(void *pvParameters){
	xSemaphoreGive(xSem);
}

int main (void)
{
  4030a0:	b530      	push	{r4, r5, lr}
  4030a2:	b085      	sub	sp, #20
	/* Initialize Board and Clock */
	sysclk_init();
  4030a4:	4b36      	ldr	r3, [pc, #216]	; (403180 <main+0xe0>)
  4030a6:	4798      	blx	r3
	board_init();
  4030a8:	4b36      	ldr	r3, [pc, #216]	; (403184 <main+0xe4>)
  4030aa:	4798      	blx	r3

	/* Initialize the console uart */
	configure_console();
  4030ac:	4b36      	ldr	r3, [pc, #216]	; (403188 <main+0xe8>)
  4030ae:	4798      	blx	r3
	printf("Console OK!\n");
  4030b0:	4836      	ldr	r0, [pc, #216]	; (40318c <main+0xec>)
  4030b2:	4b37      	ldr	r3, [pc, #220]	; (403190 <main+0xf0>)
  4030b4:	4798      	blx	r3
	
	config_lcd();
  4030b6:	4b37      	ldr	r3, [pc, #220]	; (403194 <main+0xf4>)
  4030b8:	4798      	blx	r3
	ili9225_set_foreground_color(COLOR_BLACK);
  4030ba:	2000      	movs	r0, #0
  4030bc:	4b36      	ldr	r3, [pc, #216]	; (403198 <main+0xf8>)
  4030be:	4798      	blx	r3
	ili9225_draw_string(10,10, (uint8_t *)"IMU FreeRTOS");
  4030c0:	200a      	movs	r0, #10
  4030c2:	4601      	mov	r1, r0
  4030c4:	4a35      	ldr	r2, [pc, #212]	; (40319c <main+0xfc>)
  4030c6:	4b36      	ldr	r3, [pc, #216]	; (4031a0 <main+0x100>)
  4030c8:	4798      	blx	r3
	
	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
  4030ca:	2300      	movs	r3, #0
  4030cc:	9300      	str	r3, [sp, #0]
  4030ce:	9301      	str	r3, [sp, #4]
  4030d0:	9302      	str	r3, [sp, #8]
  4030d2:	9303      	str	r3, [sp, #12]
  4030d4:	4833      	ldr	r0, [pc, #204]	; (4031a4 <main+0x104>)
  4030d6:	4934      	ldr	r1, [pc, #208]	; (4031a8 <main+0x108>)
  4030d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4030dc:	4c33      	ldr	r4, [pc, #204]	; (4031ac <main+0x10c>)
  4030de:	47a0      	blx	r4
  4030e0:	2801      	cmp	r0, #1
  4030e2:	d002      	beq.n	4030ea <main+0x4a>
	TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Monitor task\r\n");
  4030e4:	4832      	ldr	r0, [pc, #200]	; (4031b0 <main+0x110>)
  4030e6:	4b2a      	ldr	r3, [pc, #168]	; (403190 <main+0xf0>)
  4030e8:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_led0, "Led0", TASK_LED_STACK_SIZE, NULL,
  4030ea:	2301      	movs	r3, #1
  4030ec:	9300      	str	r3, [sp, #0]
  4030ee:	2300      	movs	r3, #0
  4030f0:	9301      	str	r3, [sp, #4]
  4030f2:	9302      	str	r3, [sp, #8]
  4030f4:	9303      	str	r3, [sp, #12]
  4030f6:	482f      	ldr	r0, [pc, #188]	; (4031b4 <main+0x114>)
  4030f8:	492f      	ldr	r1, [pc, #188]	; (4031b8 <main+0x118>)
  4030fa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4030fe:	4c2b      	ldr	r4, [pc, #172]	; (4031ac <main+0x10c>)
  403100:	47a0      	blx	r4
  403102:	2801      	cmp	r0, #1
  403104:	d002      	beq.n	40310c <main+0x6c>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  403106:	482d      	ldr	r0, [pc, #180]	; (4031bc <main+0x11c>)
  403108:	4b21      	ldr	r3, [pc, #132]	; (403190 <main+0xf0>)
  40310a:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_led1, "Led1", TASK_LED_STACK_SIZE, NULL,
  40310c:	2301      	movs	r3, #1
  40310e:	9300      	str	r3, [sp, #0]
  403110:	2300      	movs	r3, #0
  403112:	9301      	str	r3, [sp, #4]
  403114:	9302      	str	r3, [sp, #8]
  403116:	9303      	str	r3, [sp, #12]
  403118:	4829      	ldr	r0, [pc, #164]	; (4031c0 <main+0x120>)
  40311a:	492a      	ldr	r1, [pc, #168]	; (4031c4 <main+0x124>)
  40311c:	f44f 7280 	mov.w	r2, #256	; 0x100
  403120:	4c22      	ldr	r4, [pc, #136]	; (4031ac <main+0x10c>)
  403122:	47a0      	blx	r4
  403124:	2801      	cmp	r0, #1
  403126:	d002      	beq.n	40312e <main+0x8e>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  403128:	4824      	ldr	r0, [pc, #144]	; (4031bc <main+0x11c>)
  40312a:	4b19      	ldr	r3, [pc, #100]	; (403190 <main+0xf0>)
  40312c:	4798      	blx	r3
	}
	
	xTimer = xTimerCreate("Timer", DELAY_1S , pdTRUE, NULL, vTimerCallback);
  40312e:	4b26      	ldr	r3, [pc, #152]	; (4031c8 <main+0x128>)
  403130:	9300      	str	r3, [sp, #0]
  403132:	4826      	ldr	r0, [pc, #152]	; (4031cc <main+0x12c>)
  403134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403138:	2201      	movs	r2, #1
  40313a:	2300      	movs	r3, #0
  40313c:	4c24      	ldr	r4, [pc, #144]	; (4031d0 <main+0x130>)
  40313e:	47a0      	blx	r4
  403140:	4605      	mov	r5, r0
  403142:	4b24      	ldr	r3, [pc, #144]	; (4031d4 <main+0x134>)
  403144:	6018      	str	r0, [r3, #0]
	
	xTimerStart(xTimer, 0);
  403146:	4b24      	ldr	r3, [pc, #144]	; (4031d8 <main+0x138>)
  403148:	4798      	blx	r3
  40314a:	4602      	mov	r2, r0
  40314c:	2400      	movs	r4, #0
  40314e:	9400      	str	r4, [sp, #0]
  403150:	4628      	mov	r0, r5
  403152:	4621      	mov	r1, r4
  403154:	4623      	mov	r3, r4
  403156:	4d21      	ldr	r5, [pc, #132]	; (4031dc <main+0x13c>)
  403158:	47a8      	blx	r5
	
	vSemaphoreCreateBinary(xSem);
  40315a:	2001      	movs	r0, #1
  40315c:	4621      	mov	r1, r4
  40315e:	2203      	movs	r2, #3
  403160:	4b1f      	ldr	r3, [pc, #124]	; (4031e0 <main+0x140>)
  403162:	4798      	blx	r3
  403164:	4b1f      	ldr	r3, [pc, #124]	; (4031e4 <main+0x144>)
  403166:	6018      	str	r0, [r3, #0]
  403168:	b120      	cbz	r0, 403174 <main+0xd4>
  40316a:	4621      	mov	r1, r4
  40316c:	4622      	mov	r2, r4
  40316e:	4623      	mov	r3, r4
  403170:	4c1d      	ldr	r4, [pc, #116]	; (4031e8 <main+0x148>)
  403172:	47a0      	blx	r4
	
	/*xMux = xSemaphoreCreateMutex();*/
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  403174:	4b1d      	ldr	r3, [pc, #116]	; (4031ec <main+0x14c>)
  403176:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  403178:	2000      	movs	r0, #0
  40317a:	b005      	add	sp, #20
  40317c:	bd30      	pop	{r4, r5, pc}
  40317e:	bf00      	nop
  403180:	00400315 	.word	0x00400315
  403184:	004008fd 	.word	0x004008fd
  403188:	00400285 	.word	0x00400285
  40318c:	0040b638 	.word	0x0040b638
  403190:	00403241 	.word	0x00403241
  403194:	00403055 	.word	0x00403055
  403198:	00400b59 	.word	0x00400b59
  40319c:	0040b648 	.word	0x0040b648
  4031a0:	00400e01 	.word	0x00400e01
  4031a4:	00402ff9 	.word	0x00402ff9
  4031a8:	0040b658 	.word	0x0040b658
  4031ac:	004021cd 	.word	0x004021cd
  4031b0:	0040b660 	.word	0x0040b660
  4031b4:	00402fcd 	.word	0x00402fcd
  4031b8:	0040b680 	.word	0x0040b680
  4031bc:	0040b688 	.word	0x0040b688
  4031c0:	00402f95 	.word	0x00402f95
  4031c4:	0040b6ac 	.word	0x0040b6ac
  4031c8:	00402f79 	.word	0x00402f79
  4031cc:	0040b6b4 	.word	0x0040b6b4
  4031d0:	00402cb1 	.word	0x00402cb1
  4031d4:	20003824 	.word	0x20003824
  4031d8:	0040244d 	.word	0x0040244d
  4031dc:	00402d01 	.word	0x00402d01
  4031e0:	00401cd1 	.word	0x00401cd1
  4031e4:	20003820 	.word	0x20003820
  4031e8:	00401d29 	.word	0x00401d29
  4031ec:	004023d5 	.word	0x004023d5

004031f0 <__libc_init_array>:
  4031f0:	b570      	push	{r4, r5, r6, lr}
  4031f2:	4e0f      	ldr	r6, [pc, #60]	; (403230 <__libc_init_array+0x40>)
  4031f4:	4d0f      	ldr	r5, [pc, #60]	; (403234 <__libc_init_array+0x44>)
  4031f6:	1b76      	subs	r6, r6, r5
  4031f8:	10b6      	asrs	r6, r6, #2
  4031fa:	d007      	beq.n	40320c <__libc_init_array+0x1c>
  4031fc:	3d04      	subs	r5, #4
  4031fe:	2400      	movs	r4, #0
  403200:	3401      	adds	r4, #1
  403202:	f855 3f04 	ldr.w	r3, [r5, #4]!
  403206:	4798      	blx	r3
  403208:	42a6      	cmp	r6, r4
  40320a:	d1f9      	bne.n	403200 <__libc_init_array+0x10>
  40320c:	4e0a      	ldr	r6, [pc, #40]	; (403238 <__libc_init_array+0x48>)
  40320e:	4d0b      	ldr	r5, [pc, #44]	; (40323c <__libc_init_array+0x4c>)
  403210:	f008 fb38 	bl	40b884 <_init>
  403214:	1b76      	subs	r6, r6, r5
  403216:	10b6      	asrs	r6, r6, #2
  403218:	d008      	beq.n	40322c <__libc_init_array+0x3c>
  40321a:	3d04      	subs	r5, #4
  40321c:	2400      	movs	r4, #0
  40321e:	3401      	adds	r4, #1
  403220:	f855 3f04 	ldr.w	r3, [r5, #4]!
  403224:	4798      	blx	r3
  403226:	42a6      	cmp	r6, r4
  403228:	d1f9      	bne.n	40321e <__libc_init_array+0x2e>
  40322a:	bd70      	pop	{r4, r5, r6, pc}
  40322c:	bd70      	pop	{r4, r5, r6, pc}
  40322e:	bf00      	nop
  403230:	0040b890 	.word	0x0040b890
  403234:	0040b890 	.word	0x0040b890
  403238:	0040b898 	.word	0x0040b898
  40323c:	0040b890 	.word	0x0040b890

00403240 <iprintf>:
  403240:	b40f      	push	{r0, r1, r2, r3}
  403242:	b510      	push	{r4, lr}
  403244:	4b07      	ldr	r3, [pc, #28]	; (403264 <iprintf+0x24>)
  403246:	b082      	sub	sp, #8
  403248:	ac04      	add	r4, sp, #16
  40324a:	f854 2b04 	ldr.w	r2, [r4], #4
  40324e:	6818      	ldr	r0, [r3, #0]
  403250:	4623      	mov	r3, r4
  403252:	6881      	ldr	r1, [r0, #8]
  403254:	9401      	str	r4, [sp, #4]
  403256:	f001 fd13 	bl	404c80 <_vfiprintf_r>
  40325a:	b002      	add	sp, #8
  40325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403260:	b004      	add	sp, #16
  403262:	4770      	bx	lr
  403264:	20000520 	.word	0x20000520

00403268 <memcpy>:
  403268:	4684      	mov	ip, r0
  40326a:	ea41 0300 	orr.w	r3, r1, r0
  40326e:	f013 0303 	ands.w	r3, r3, #3
  403272:	d149      	bne.n	403308 <memcpy+0xa0>
  403274:	3a40      	subs	r2, #64	; 0x40
  403276:	d323      	bcc.n	4032c0 <memcpy+0x58>
  403278:	680b      	ldr	r3, [r1, #0]
  40327a:	6003      	str	r3, [r0, #0]
  40327c:	684b      	ldr	r3, [r1, #4]
  40327e:	6043      	str	r3, [r0, #4]
  403280:	688b      	ldr	r3, [r1, #8]
  403282:	6083      	str	r3, [r0, #8]
  403284:	68cb      	ldr	r3, [r1, #12]
  403286:	60c3      	str	r3, [r0, #12]
  403288:	690b      	ldr	r3, [r1, #16]
  40328a:	6103      	str	r3, [r0, #16]
  40328c:	694b      	ldr	r3, [r1, #20]
  40328e:	6143      	str	r3, [r0, #20]
  403290:	698b      	ldr	r3, [r1, #24]
  403292:	6183      	str	r3, [r0, #24]
  403294:	69cb      	ldr	r3, [r1, #28]
  403296:	61c3      	str	r3, [r0, #28]
  403298:	6a0b      	ldr	r3, [r1, #32]
  40329a:	6203      	str	r3, [r0, #32]
  40329c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  40329e:	6243      	str	r3, [r0, #36]	; 0x24
  4032a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4032a2:	6283      	str	r3, [r0, #40]	; 0x28
  4032a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  4032a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  4032a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4032aa:	6303      	str	r3, [r0, #48]	; 0x30
  4032ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  4032ae:	6343      	str	r3, [r0, #52]	; 0x34
  4032b0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  4032b2:	6383      	str	r3, [r0, #56]	; 0x38
  4032b4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  4032b6:	63c3      	str	r3, [r0, #60]	; 0x3c
  4032b8:	3040      	adds	r0, #64	; 0x40
  4032ba:	3140      	adds	r1, #64	; 0x40
  4032bc:	3a40      	subs	r2, #64	; 0x40
  4032be:	d2db      	bcs.n	403278 <memcpy+0x10>
  4032c0:	3230      	adds	r2, #48	; 0x30
  4032c2:	d30b      	bcc.n	4032dc <memcpy+0x74>
  4032c4:	680b      	ldr	r3, [r1, #0]
  4032c6:	6003      	str	r3, [r0, #0]
  4032c8:	684b      	ldr	r3, [r1, #4]
  4032ca:	6043      	str	r3, [r0, #4]
  4032cc:	688b      	ldr	r3, [r1, #8]
  4032ce:	6083      	str	r3, [r0, #8]
  4032d0:	68cb      	ldr	r3, [r1, #12]
  4032d2:	60c3      	str	r3, [r0, #12]
  4032d4:	3010      	adds	r0, #16
  4032d6:	3110      	adds	r1, #16
  4032d8:	3a10      	subs	r2, #16
  4032da:	d2f3      	bcs.n	4032c4 <memcpy+0x5c>
  4032dc:	320c      	adds	r2, #12
  4032de:	d305      	bcc.n	4032ec <memcpy+0x84>
  4032e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032e4:	f840 3b04 	str.w	r3, [r0], #4
  4032e8:	3a04      	subs	r2, #4
  4032ea:	d2f9      	bcs.n	4032e0 <memcpy+0x78>
  4032ec:	3204      	adds	r2, #4
  4032ee:	d008      	beq.n	403302 <memcpy+0x9a>
  4032f0:	07d2      	lsls	r2, r2, #31
  4032f2:	bf1c      	itt	ne
  4032f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4032f8:	f800 3b01 	strbne.w	r3, [r0], #1
  4032fc:	d301      	bcc.n	403302 <memcpy+0x9a>
  4032fe:	880b      	ldrh	r3, [r1, #0]
  403300:	8003      	strh	r3, [r0, #0]
  403302:	4660      	mov	r0, ip
  403304:	4770      	bx	lr
  403306:	bf00      	nop
  403308:	2a08      	cmp	r2, #8
  40330a:	d313      	bcc.n	403334 <memcpy+0xcc>
  40330c:	078b      	lsls	r3, r1, #30
  40330e:	d0b1      	beq.n	403274 <memcpy+0xc>
  403310:	f010 0303 	ands.w	r3, r0, #3
  403314:	d0ae      	beq.n	403274 <memcpy+0xc>
  403316:	f1c3 0304 	rsb	r3, r3, #4
  40331a:	1ad2      	subs	r2, r2, r3
  40331c:	07db      	lsls	r3, r3, #31
  40331e:	bf1c      	itt	ne
  403320:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403324:	f800 3b01 	strbne.w	r3, [r0], #1
  403328:	d3a4      	bcc.n	403274 <memcpy+0xc>
  40332a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40332e:	f820 3b02 	strh.w	r3, [r0], #2
  403332:	e79f      	b.n	403274 <memcpy+0xc>
  403334:	3a04      	subs	r2, #4
  403336:	d3d9      	bcc.n	4032ec <memcpy+0x84>
  403338:	3a01      	subs	r2, #1
  40333a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40333e:	f800 3b01 	strb.w	r3, [r0], #1
  403342:	d2f9      	bcs.n	403338 <memcpy+0xd0>
  403344:	780b      	ldrb	r3, [r1, #0]
  403346:	7003      	strb	r3, [r0, #0]
  403348:	784b      	ldrb	r3, [r1, #1]
  40334a:	7043      	strb	r3, [r0, #1]
  40334c:	788b      	ldrb	r3, [r1, #2]
  40334e:	7083      	strb	r3, [r0, #2]
  403350:	4660      	mov	r0, ip
  403352:	4770      	bx	lr

00403354 <memset>:
  403354:	b4f0      	push	{r4, r5, r6, r7}
  403356:	0784      	lsls	r4, r0, #30
  403358:	d043      	beq.n	4033e2 <memset+0x8e>
  40335a:	1e54      	subs	r4, r2, #1
  40335c:	2a00      	cmp	r2, #0
  40335e:	d03e      	beq.n	4033de <memset+0x8a>
  403360:	b2cd      	uxtb	r5, r1
  403362:	4603      	mov	r3, r0
  403364:	e003      	b.n	40336e <memset+0x1a>
  403366:	1e62      	subs	r2, r4, #1
  403368:	2c00      	cmp	r4, #0
  40336a:	d038      	beq.n	4033de <memset+0x8a>
  40336c:	4614      	mov	r4, r2
  40336e:	f803 5b01 	strb.w	r5, [r3], #1
  403372:	079a      	lsls	r2, r3, #30
  403374:	d1f7      	bne.n	403366 <memset+0x12>
  403376:	2c03      	cmp	r4, #3
  403378:	d92a      	bls.n	4033d0 <memset+0x7c>
  40337a:	b2cd      	uxtb	r5, r1
  40337c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403380:	2c0f      	cmp	r4, #15
  403382:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403386:	d915      	bls.n	4033b4 <memset+0x60>
  403388:	f1a4 0710 	sub.w	r7, r4, #16
  40338c:	093f      	lsrs	r7, r7, #4
  40338e:	f103 0610 	add.w	r6, r3, #16
  403392:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  403396:	461a      	mov	r2, r3
  403398:	6015      	str	r5, [r2, #0]
  40339a:	6055      	str	r5, [r2, #4]
  40339c:	6095      	str	r5, [r2, #8]
  40339e:	60d5      	str	r5, [r2, #12]
  4033a0:	3210      	adds	r2, #16
  4033a2:	42b2      	cmp	r2, r6
  4033a4:	d1f8      	bne.n	403398 <memset+0x44>
  4033a6:	f004 040f 	and.w	r4, r4, #15
  4033aa:	3701      	adds	r7, #1
  4033ac:	2c03      	cmp	r4, #3
  4033ae:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  4033b2:	d90d      	bls.n	4033d0 <memset+0x7c>
  4033b4:	461e      	mov	r6, r3
  4033b6:	4622      	mov	r2, r4
  4033b8:	3a04      	subs	r2, #4
  4033ba:	2a03      	cmp	r2, #3
  4033bc:	f846 5b04 	str.w	r5, [r6], #4
  4033c0:	d8fa      	bhi.n	4033b8 <memset+0x64>
  4033c2:	1f22      	subs	r2, r4, #4
  4033c4:	f022 0203 	bic.w	r2, r2, #3
  4033c8:	3204      	adds	r2, #4
  4033ca:	4413      	add	r3, r2
  4033cc:	f004 0403 	and.w	r4, r4, #3
  4033d0:	b12c      	cbz	r4, 4033de <memset+0x8a>
  4033d2:	b2c9      	uxtb	r1, r1
  4033d4:	441c      	add	r4, r3
  4033d6:	f803 1b01 	strb.w	r1, [r3], #1
  4033da:	42a3      	cmp	r3, r4
  4033dc:	d1fb      	bne.n	4033d6 <memset+0x82>
  4033de:	bcf0      	pop	{r4, r5, r6, r7}
  4033e0:	4770      	bx	lr
  4033e2:	4614      	mov	r4, r2
  4033e4:	4603      	mov	r3, r0
  4033e6:	e7c6      	b.n	403376 <memset+0x22>

004033e8 <setbuf>:
  4033e8:	2900      	cmp	r1, #0
  4033ea:	bf0c      	ite	eq
  4033ec:	2202      	moveq	r2, #2
  4033ee:	2200      	movne	r2, #0
  4033f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4033f4:	f000 b800 	b.w	4033f8 <setvbuf>

004033f8 <setvbuf>:
  4033f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4033fc:	4d3c      	ldr	r5, [pc, #240]	; (4034f0 <setvbuf+0xf8>)
  4033fe:	4604      	mov	r4, r0
  403400:	682d      	ldr	r5, [r5, #0]
  403402:	4688      	mov	r8, r1
  403404:	4616      	mov	r6, r2
  403406:	461f      	mov	r7, r3
  403408:	b115      	cbz	r5, 403410 <setvbuf+0x18>
  40340a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40340c:	2b00      	cmp	r3, #0
  40340e:	d04f      	beq.n	4034b0 <setvbuf+0xb8>
  403410:	2e02      	cmp	r6, #2
  403412:	d830      	bhi.n	403476 <setvbuf+0x7e>
  403414:	2f00      	cmp	r7, #0
  403416:	db2e      	blt.n	403476 <setvbuf+0x7e>
  403418:	4628      	mov	r0, r5
  40341a:	4621      	mov	r1, r4
  40341c:	f003 fb70 	bl	406b00 <_fflush_r>
  403420:	89a3      	ldrh	r3, [r4, #12]
  403422:	2200      	movs	r2, #0
  403424:	6062      	str	r2, [r4, #4]
  403426:	61a2      	str	r2, [r4, #24]
  403428:	061a      	lsls	r2, r3, #24
  40342a:	d428      	bmi.n	40347e <setvbuf+0x86>
  40342c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  403430:	b29b      	uxth	r3, r3
  403432:	2e02      	cmp	r6, #2
  403434:	81a3      	strh	r3, [r4, #12]
  403436:	d02d      	beq.n	403494 <setvbuf+0x9c>
  403438:	f1b8 0f00 	cmp.w	r8, #0
  40343c:	d03c      	beq.n	4034b8 <setvbuf+0xc0>
  40343e:	2e01      	cmp	r6, #1
  403440:	d013      	beq.n	40346a <setvbuf+0x72>
  403442:	b29b      	uxth	r3, r3
  403444:	f003 0008 	and.w	r0, r3, #8
  403448:	4a2a      	ldr	r2, [pc, #168]	; (4034f4 <setvbuf+0xfc>)
  40344a:	b280      	uxth	r0, r0
  40344c:	63ea      	str	r2, [r5, #60]	; 0x3c
  40344e:	f8c4 8000 	str.w	r8, [r4]
  403452:	f8c4 8010 	str.w	r8, [r4, #16]
  403456:	6167      	str	r7, [r4, #20]
  403458:	b178      	cbz	r0, 40347a <setvbuf+0x82>
  40345a:	f013 0f03 	tst.w	r3, #3
  40345e:	bf18      	it	ne
  403460:	2700      	movne	r7, #0
  403462:	60a7      	str	r7, [r4, #8]
  403464:	2000      	movs	r0, #0
  403466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40346a:	f043 0301 	orr.w	r3, r3, #1
  40346e:	427a      	negs	r2, r7
  403470:	81a3      	strh	r3, [r4, #12]
  403472:	61a2      	str	r2, [r4, #24]
  403474:	e7e5      	b.n	403442 <setvbuf+0x4a>
  403476:	f04f 30ff 	mov.w	r0, #4294967295
  40347a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40347e:	4628      	mov	r0, r5
  403480:	6921      	ldr	r1, [r4, #16]
  403482:	f003 fc9d 	bl	406dc0 <_free_r>
  403486:	89a3      	ldrh	r3, [r4, #12]
  403488:	2e02      	cmp	r6, #2
  40348a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40348e:	b29b      	uxth	r3, r3
  403490:	81a3      	strh	r3, [r4, #12]
  403492:	d1d1      	bne.n	403438 <setvbuf+0x40>
  403494:	2000      	movs	r0, #0
  403496:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40349a:	f043 0302 	orr.w	r3, r3, #2
  40349e:	2500      	movs	r5, #0
  4034a0:	2101      	movs	r1, #1
  4034a2:	81a3      	strh	r3, [r4, #12]
  4034a4:	60a5      	str	r5, [r4, #8]
  4034a6:	6022      	str	r2, [r4, #0]
  4034a8:	6122      	str	r2, [r4, #16]
  4034aa:	6161      	str	r1, [r4, #20]
  4034ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4034b0:	4628      	mov	r0, r5
  4034b2:	f003 fb41 	bl	406b38 <__sinit>
  4034b6:	e7ab      	b.n	403410 <setvbuf+0x18>
  4034b8:	2f00      	cmp	r7, #0
  4034ba:	bf08      	it	eq
  4034bc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  4034c0:	4638      	mov	r0, r7
  4034c2:	f003 ff77 	bl	4073b4 <malloc>
  4034c6:	4680      	mov	r8, r0
  4034c8:	b128      	cbz	r0, 4034d6 <setvbuf+0xde>
  4034ca:	89a3      	ldrh	r3, [r4, #12]
  4034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4034d0:	b29b      	uxth	r3, r3
  4034d2:	81a3      	strh	r3, [r4, #12]
  4034d4:	e7b3      	b.n	40343e <setvbuf+0x46>
  4034d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4034da:	f003 ff6b 	bl	4073b4 <malloc>
  4034de:	4680      	mov	r8, r0
  4034e0:	b918      	cbnz	r0, 4034ea <setvbuf+0xf2>
  4034e2:	89a3      	ldrh	r3, [r4, #12]
  4034e4:	f04f 30ff 	mov.w	r0, #4294967295
  4034e8:	e7d5      	b.n	403496 <setvbuf+0x9e>
  4034ea:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4034ee:	e7ec      	b.n	4034ca <setvbuf+0xd2>
  4034f0:	20000520 	.word	0x20000520
  4034f4:	00406b2d 	.word	0x00406b2d

004034f8 <sprintf>:
  4034f8:	b40e      	push	{r1, r2, r3}
  4034fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034fc:	b09c      	sub	sp, #112	; 0x70
  4034fe:	ac21      	add	r4, sp, #132	; 0x84
  403500:	f854 2b04 	ldr.w	r2, [r4], #4
  403504:	490e      	ldr	r1, [pc, #56]	; (403540 <sprintf+0x48>)
  403506:	4606      	mov	r6, r0
  403508:	4623      	mov	r3, r4
  40350a:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40350e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  403512:	6808      	ldr	r0, [r1, #0]
  403514:	f64f 77ff 	movw	r7, #65535	; 0xffff
  403518:	a902      	add	r1, sp, #8
  40351a:	9602      	str	r6, [sp, #8]
  40351c:	9606      	str	r6, [sp, #24]
  40351e:	9401      	str	r4, [sp, #4]
  403520:	f8ad e014 	strh.w	lr, [sp, #20]
  403524:	9504      	str	r5, [sp, #16]
  403526:	9507      	str	r5, [sp, #28]
  403528:	f8ad 7016 	strh.w	r7, [sp, #22]
  40352c:	f000 f8f0 	bl	403710 <_svfprintf_r>
  403530:	9b02      	ldr	r3, [sp, #8]
  403532:	2200      	movs	r2, #0
  403534:	701a      	strb	r2, [r3, #0]
  403536:	b01c      	add	sp, #112	; 0x70
  403538:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40353c:	b003      	add	sp, #12
  40353e:	4770      	bx	lr
  403540:	20000520 	.word	0x20000520

00403544 <strcat>:
  403544:	0783      	lsls	r3, r0, #30
  403546:	b570      	push	{r4, r5, r6, lr}
  403548:	4606      	mov	r6, r0
  40354a:	d11f      	bne.n	40358c <strcat+0x48>
  40354c:	6803      	ldr	r3, [r0, #0]
  40354e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  403552:	ea22 0303 	bic.w	r3, r2, r3
  403556:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40355a:	bf08      	it	eq
  40355c:	1d03      	addeq	r3, r0, #4
  40355e:	d115      	bne.n	40358c <strcat+0x48>
  403560:	4618      	mov	r0, r3
  403562:	f853 4b04 	ldr.w	r4, [r3], #4
  403566:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40356a:	ea25 0404 	bic.w	r4, r5, r4
  40356e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  403572:	d0f5      	beq.n	403560 <strcat+0x1c>
  403574:	7803      	ldrb	r3, [r0, #0]
  403576:	b12b      	cbz	r3, 403584 <strcat+0x40>
  403578:	1c43      	adds	r3, r0, #1
  40357a:	781c      	ldrb	r4, [r3, #0]
  40357c:	4618      	mov	r0, r3
  40357e:	3301      	adds	r3, #1
  403580:	2c00      	cmp	r4, #0
  403582:	d1fa      	bne.n	40357a <strcat+0x36>
  403584:	f000 f804 	bl	403590 <strcpy>
  403588:	4630      	mov	r0, r6
  40358a:	bd70      	pop	{r4, r5, r6, pc}
  40358c:	4630      	mov	r0, r6
  40358e:	e7f1      	b.n	403574 <strcat+0x30>

00403590 <strcpy>:
  403590:	ea80 0201 	eor.w	r2, r0, r1
  403594:	4684      	mov	ip, r0
  403596:	f012 0f03 	tst.w	r2, #3
  40359a:	d14f      	bne.n	40363c <strcpy+0xac>
  40359c:	f011 0f03 	tst.w	r1, #3
  4035a0:	d132      	bne.n	403608 <strcpy+0x78>
  4035a2:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4035a6:	f011 0f04 	tst.w	r1, #4
  4035aa:	f851 3b04 	ldr.w	r3, [r1], #4
  4035ae:	d00b      	beq.n	4035c8 <strcpy+0x38>
  4035b0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4035b4:	439a      	bics	r2, r3
  4035b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4035ba:	bf04      	itt	eq
  4035bc:	f84c 3b04 	streq.w	r3, [ip], #4
  4035c0:	f851 3b04 	ldreq.w	r3, [r1], #4
  4035c4:	d116      	bne.n	4035f4 <strcpy+0x64>
  4035c6:	bf00      	nop
  4035c8:	f851 4b04 	ldr.w	r4, [r1], #4
  4035cc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4035d0:	439a      	bics	r2, r3
  4035d2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4035d6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4035da:	d10b      	bne.n	4035f4 <strcpy+0x64>
  4035dc:	f84c 3b04 	str.w	r3, [ip], #4
  4035e0:	43a2      	bics	r2, r4
  4035e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4035e6:	bf04      	itt	eq
  4035e8:	f851 3b04 	ldreq.w	r3, [r1], #4
  4035ec:	f84c 4b04 	streq.w	r4, [ip], #4
  4035f0:	d0ea      	beq.n	4035c8 <strcpy+0x38>
  4035f2:	4623      	mov	r3, r4
  4035f4:	f80c 3b01 	strb.w	r3, [ip], #1
  4035f8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4035fc:	ea4f 2333 	mov.w	r3, r3, ror #8
  403600:	d1f8      	bne.n	4035f4 <strcpy+0x64>
  403602:	f85d 4b04 	ldr.w	r4, [sp], #4
  403606:	4770      	bx	lr
  403608:	f011 0f01 	tst.w	r1, #1
  40360c:	d006      	beq.n	40361c <strcpy+0x8c>
  40360e:	f811 2b01 	ldrb.w	r2, [r1], #1
  403612:	f80c 2b01 	strb.w	r2, [ip], #1
  403616:	2a00      	cmp	r2, #0
  403618:	bf08      	it	eq
  40361a:	4770      	bxeq	lr
  40361c:	f011 0f02 	tst.w	r1, #2
  403620:	d0bf      	beq.n	4035a2 <strcpy+0x12>
  403622:	f831 2b02 	ldrh.w	r2, [r1], #2
  403626:	f012 0fff 	tst.w	r2, #255	; 0xff
  40362a:	bf16      	itet	ne
  40362c:	f82c 2b02 	strhne.w	r2, [ip], #2
  403630:	f88c 2000 	strbeq.w	r2, [ip]
  403634:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  403638:	d1b3      	bne.n	4035a2 <strcpy+0x12>
  40363a:	4770      	bx	lr
  40363c:	f811 2b01 	ldrb.w	r2, [r1], #1
  403640:	f80c 2b01 	strb.w	r2, [ip], #1
  403644:	2a00      	cmp	r2, #0
  403646:	d1f9      	bne.n	40363c <strcpy+0xac>
  403648:	4770      	bx	lr
  40364a:	bf00      	nop

0040364c <strlen>:
  40364c:	f020 0103 	bic.w	r1, r0, #3
  403650:	f010 0003 	ands.w	r0, r0, #3
  403654:	f1c0 0000 	rsb	r0, r0, #0
  403658:	f851 3b04 	ldr.w	r3, [r1], #4
  40365c:	f100 0c04 	add.w	ip, r0, #4
  403660:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  403664:	f06f 0200 	mvn.w	r2, #0
  403668:	bf1c      	itt	ne
  40366a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40366e:	4313      	orrne	r3, r2
  403670:	f04f 0c01 	mov.w	ip, #1
  403674:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  403678:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40367c:	eba3 020c 	sub.w	r2, r3, ip
  403680:	ea22 0203 	bic.w	r2, r2, r3
  403684:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  403688:	bf04      	itt	eq
  40368a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40368e:	3004      	addeq	r0, #4
  403690:	d0f4      	beq.n	40367c <strlen+0x30>
  403692:	f013 0fff 	tst.w	r3, #255	; 0xff
  403696:	bf1f      	itttt	ne
  403698:	3001      	addne	r0, #1
  40369a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40369e:	3001      	addne	r0, #1
  4036a0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  4036a4:	bf18      	it	ne
  4036a6:	3001      	addne	r0, #1
  4036a8:	4770      	bx	lr
  4036aa:	bf00      	nop

004036ac <strncpy>:
  4036ac:	ea40 0301 	orr.w	r3, r0, r1
  4036b0:	079b      	lsls	r3, r3, #30
  4036b2:	b470      	push	{r4, r5, r6}
  4036b4:	d12a      	bne.n	40370c <strncpy+0x60>
  4036b6:	2a03      	cmp	r2, #3
  4036b8:	d928      	bls.n	40370c <strncpy+0x60>
  4036ba:	460c      	mov	r4, r1
  4036bc:	4603      	mov	r3, r0
  4036be:	4621      	mov	r1, r4
  4036c0:	f854 5b04 	ldr.w	r5, [r4], #4
  4036c4:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  4036c8:	ea26 0605 	bic.w	r6, r6, r5
  4036cc:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  4036d0:	d105      	bne.n	4036de <strncpy+0x32>
  4036d2:	3a04      	subs	r2, #4
  4036d4:	2a03      	cmp	r2, #3
  4036d6:	f843 5b04 	str.w	r5, [r3], #4
  4036da:	4621      	mov	r1, r4
  4036dc:	d8ef      	bhi.n	4036be <strncpy+0x12>
  4036de:	b19a      	cbz	r2, 403708 <strncpy+0x5c>
  4036e0:	780c      	ldrb	r4, [r1, #0]
  4036e2:	3a01      	subs	r2, #1
  4036e4:	701c      	strb	r4, [r3, #0]
  4036e6:	3301      	adds	r3, #1
  4036e8:	b13c      	cbz	r4, 4036fa <strncpy+0x4e>
  4036ea:	b16a      	cbz	r2, 403708 <strncpy+0x5c>
  4036ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  4036f0:	3a01      	subs	r2, #1
  4036f2:	f803 4b01 	strb.w	r4, [r3], #1
  4036f6:	2c00      	cmp	r4, #0
  4036f8:	d1f7      	bne.n	4036ea <strncpy+0x3e>
  4036fa:	b12a      	cbz	r2, 403708 <strncpy+0x5c>
  4036fc:	441a      	add	r2, r3
  4036fe:	2100      	movs	r1, #0
  403700:	f803 1b01 	strb.w	r1, [r3], #1
  403704:	4293      	cmp	r3, r2
  403706:	d1fb      	bne.n	403700 <strncpy+0x54>
  403708:	bc70      	pop	{r4, r5, r6}
  40370a:	4770      	bx	lr
  40370c:	4603      	mov	r3, r0
  40370e:	e7e6      	b.n	4036de <strncpy+0x32>

00403710 <_svfprintf_r>:
  403710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403714:	b0c9      	sub	sp, #292	; 0x124
  403716:	9310      	str	r3, [sp, #64]	; 0x40
  403718:	910c      	str	r1, [sp, #48]	; 0x30
  40371a:	4691      	mov	r9, r2
  40371c:	900d      	str	r0, [sp, #52]	; 0x34
  40371e:	f003 fdd5 	bl	4072cc <_localeconv_r>
  403722:	6800      	ldr	r0, [r0, #0]
  403724:	9015      	str	r0, [sp, #84]	; 0x54
  403726:	f7ff ff91 	bl	40364c <strlen>
  40372a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40372c:	9018      	str	r0, [sp, #96]	; 0x60
  40372e:	89a3      	ldrh	r3, [r4, #12]
  403730:	061e      	lsls	r6, r3, #24
  403732:	d503      	bpl.n	40373c <_svfprintf_r+0x2c>
  403734:	6923      	ldr	r3, [r4, #16]
  403736:	2b00      	cmp	r3, #0
  403738:	f001 8081 	beq.w	40483e <_svfprintf_r+0x112e>
  40373c:	ac38      	add	r4, sp, #224	; 0xe0
  40373e:	46a4      	mov	ip, r4
  403740:	9408      	str	r4, [sp, #32]
  403742:	942b      	str	r4, [sp, #172]	; 0xac
  403744:	2500      	movs	r5, #0
  403746:	2400      	movs	r4, #0
  403748:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40374c:	2300      	movs	r3, #0
  40374e:	9311      	str	r3, [sp, #68]	; 0x44
  403750:	932d      	str	r3, [sp, #180]	; 0xb4
  403752:	932c      	str	r3, [sp, #176]	; 0xb0
  403754:	931a      	str	r3, [sp, #104]	; 0x68
  403756:	9319      	str	r3, [sp, #100]	; 0x64
  403758:	930e      	str	r3, [sp, #56]	; 0x38
  40375a:	4666      	mov	r6, ip
  40375c:	f899 3000 	ldrb.w	r3, [r9]
  403760:	2b00      	cmp	r3, #0
  403762:	f000 80f8 	beq.w	403956 <_svfprintf_r+0x246>
  403766:	2b25      	cmp	r3, #37	; 0x25
  403768:	f000 80f5 	beq.w	403956 <_svfprintf_r+0x246>
  40376c:	f109 0201 	add.w	r2, r9, #1
  403770:	e001      	b.n	403776 <_svfprintf_r+0x66>
  403772:	2b25      	cmp	r3, #37	; 0x25
  403774:	d004      	beq.n	403780 <_svfprintf_r+0x70>
  403776:	7813      	ldrb	r3, [r2, #0]
  403778:	4614      	mov	r4, r2
  40377a:	3201      	adds	r2, #1
  40377c:	2b00      	cmp	r3, #0
  40377e:	d1f8      	bne.n	403772 <_svfprintf_r+0x62>
  403780:	ebc9 0504 	rsb	r5, r9, r4
  403784:	b17d      	cbz	r5, 4037a6 <_svfprintf_r+0x96>
  403786:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403788:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40378a:	3301      	adds	r3, #1
  40378c:	442a      	add	r2, r5
  40378e:	2b07      	cmp	r3, #7
  403790:	f8c6 9000 	str.w	r9, [r6]
  403794:	6075      	str	r5, [r6, #4]
  403796:	922d      	str	r2, [sp, #180]	; 0xb4
  403798:	932c      	str	r3, [sp, #176]	; 0xb0
  40379a:	f300 80c2 	bgt.w	403922 <_svfprintf_r+0x212>
  40379e:	3608      	adds	r6, #8
  4037a0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4037a2:	4428      	add	r0, r5
  4037a4:	900e      	str	r0, [sp, #56]	; 0x38
  4037a6:	7823      	ldrb	r3, [r4, #0]
  4037a8:	2b00      	cmp	r3, #0
  4037aa:	f000 80c2 	beq.w	403932 <_svfprintf_r+0x222>
  4037ae:	2300      	movs	r3, #0
  4037b0:	f894 8001 	ldrb.w	r8, [r4, #1]
  4037b4:	461a      	mov	r2, r3
  4037b6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  4037ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4037bc:	9309      	str	r3, [sp, #36]	; 0x24
  4037be:	f104 0901 	add.w	r9, r4, #1
  4037c2:	f04f 34ff 	mov.w	r4, #4294967295
  4037c6:	940a      	str	r4, [sp, #40]	; 0x28
  4037c8:	f109 0901 	add.w	r9, r9, #1
  4037cc:	f1a8 0320 	sub.w	r3, r8, #32
  4037d0:	2b58      	cmp	r3, #88	; 0x58
  4037d2:	f200 83c5 	bhi.w	403f60 <_svfprintf_r+0x850>
  4037d6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4037da:	026a      	.short	0x026a
  4037dc:	03c303c3 	.word	0x03c303c3
  4037e0:	03c30271 	.word	0x03c30271
  4037e4:	03c303c3 	.word	0x03c303c3
  4037e8:	03c303c3 	.word	0x03c303c3
  4037ec:	031403c3 	.word	0x031403c3
  4037f0:	03c30366 	.word	0x03c30366
  4037f4:	00c0009d 	.word	0x00c0009d
  4037f8:	027803c3 	.word	0x027803c3
  4037fc:	027f027f 	.word	0x027f027f
  403800:	027f027f 	.word	0x027f027f
  403804:	027f027f 	.word	0x027f027f
  403808:	027f027f 	.word	0x027f027f
  40380c:	03c3027f 	.word	0x03c3027f
  403810:	03c303c3 	.word	0x03c303c3
  403814:	03c303c3 	.word	0x03c303c3
  403818:	03c303c3 	.word	0x03c303c3
  40381c:	03c303c3 	.word	0x03c303c3
  403820:	029003c3 	.word	0x029003c3
  403824:	03c30371 	.word	0x03c30371
  403828:	03c30371 	.word	0x03c30371
  40382c:	03c303c3 	.word	0x03c303c3
  403830:	036a03c3 	.word	0x036a03c3
  403834:	03c303c3 	.word	0x03c303c3
  403838:	03c30078 	.word	0x03c30078
  40383c:	03c303c3 	.word	0x03c303c3
  403840:	03c303c3 	.word	0x03c303c3
  403844:	03c30059 	.word	0x03c30059
  403848:	02af03c3 	.word	0x02af03c3
  40384c:	03c303c3 	.word	0x03c303c3
  403850:	03c303c3 	.word	0x03c303c3
  403854:	03c303c3 	.word	0x03c303c3
  403858:	03c303c3 	.word	0x03c303c3
  40385c:	03c303c3 	.word	0x03c303c3
  403860:	03480337 	.word	0x03480337
  403864:	03710371 	.word	0x03710371
  403868:	02ff0371 	.word	0x02ff0371
  40386c:	03c30348 	.word	0x03c30348
  403870:	030803c3 	.word	0x030803c3
  403874:	02c503c3 	.word	0x02c503c3
  403878:	0320007c 	.word	0x0320007c
  40387c:	03c303a3 	.word	0x03c303a3
  403880:	03c302d9 	.word	0x03c302d9
  403884:	03c3005f 	.word	0x03c3005f
  403888:	00de03c3 	.word	0x00de03c3
  40388c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403890:	f04c 0c10 	orr.w	ip, ip, #16
  403894:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403898:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40389a:	06a2      	lsls	r2, r4, #26
  40389c:	f100 8354 	bmi.w	403f48 <_svfprintf_r+0x838>
  4038a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4038a2:	06e3      	lsls	r3, r4, #27
  4038a4:	f100 85bd 	bmi.w	404422 <_svfprintf_r+0xd12>
  4038a8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4038ac:	f01c 0f40 	tst.w	ip, #64	; 0x40
  4038b0:	f000 85b7 	beq.w	404422 <_svfprintf_r+0xd12>
  4038b4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4038b8:	2500      	movs	r5, #0
  4038ba:	f8bc 4000 	ldrh.w	r4, [ip]
  4038be:	f10c 0c04 	add.w	ip, ip, #4
  4038c2:	2301      	movs	r3, #1
  4038c4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4038c8:	e08c      	b.n	4039e4 <_svfprintf_r+0x2d4>
  4038ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4038cc:	f045 0510 	orr.w	r5, r5, #16
  4038d0:	9509      	str	r5, [sp, #36]	; 0x24
  4038d2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4038d6:	f01c 0320 	ands.w	r3, ip, #32
  4038da:	f040 832a 	bne.w	403f32 <_svfprintf_r+0x822>
  4038de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4038e2:	f01c 0210 	ands.w	r2, ip, #16
  4038e6:	f040 85a4 	bne.w	404432 <_svfprintf_r+0xd22>
  4038ea:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4038ee:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  4038f2:	f000 859e 	beq.w	404432 <_svfprintf_r+0xd22>
  4038f6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4038fa:	4613      	mov	r3, r2
  4038fc:	f8bc 4000 	ldrh.w	r4, [ip]
  403900:	f10c 0c04 	add.w	ip, ip, #4
  403904:	2500      	movs	r5, #0
  403906:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40390a:	e06b      	b.n	4039e4 <_svfprintf_r+0x2d4>
  40390c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40390e:	9310      	str	r3, [sp, #64]	; 0x40
  403910:	4264      	negs	r4, r4
  403912:	940f      	str	r4, [sp, #60]	; 0x3c
  403914:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403916:	f045 0504 	orr.w	r5, r5, #4
  40391a:	9509      	str	r5, [sp, #36]	; 0x24
  40391c:	f899 8000 	ldrb.w	r8, [r9]
  403920:	e752      	b.n	4037c8 <_svfprintf_r+0xb8>
  403922:	980d      	ldr	r0, [sp, #52]	; 0x34
  403924:	990c      	ldr	r1, [sp, #48]	; 0x30
  403926:	aa2b      	add	r2, sp, #172	; 0xac
  403928:	f004 fe02 	bl	408530 <__ssprint_r>
  40392c:	b940      	cbnz	r0, 403940 <_svfprintf_r+0x230>
  40392e:	ae38      	add	r6, sp, #224	; 0xe0
  403930:	e736      	b.n	4037a0 <_svfprintf_r+0x90>
  403932:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  403934:	b123      	cbz	r3, 403940 <_svfprintf_r+0x230>
  403936:	980d      	ldr	r0, [sp, #52]	; 0x34
  403938:	990c      	ldr	r1, [sp, #48]	; 0x30
  40393a:	aa2b      	add	r2, sp, #172	; 0xac
  40393c:	f004 fdf8 	bl	408530 <__ssprint_r>
  403940:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403942:	980e      	ldr	r0, [sp, #56]	; 0x38
  403944:	89a3      	ldrh	r3, [r4, #12]
  403946:	f013 0f40 	tst.w	r3, #64	; 0x40
  40394a:	bf18      	it	ne
  40394c:	f04f 30ff 	movne.w	r0, #4294967295
  403950:	b049      	add	sp, #292	; 0x124
  403952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403956:	464c      	mov	r4, r9
  403958:	e725      	b.n	4037a6 <_svfprintf_r+0x96>
  40395a:	f899 8000 	ldrb.w	r8, [r9]
  40395e:	f109 0001 	add.w	r0, r9, #1
  403962:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  403966:	f001 810c 	beq.w	404b82 <_svfprintf_r+0x1472>
  40396a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40396e:	2b09      	cmp	r3, #9
  403970:	bf98      	it	ls
  403972:	2100      	movls	r1, #0
  403974:	f201 806b 	bhi.w	404a4e <_svfprintf_r+0x133e>
  403978:	f810 8b01 	ldrb.w	r8, [r0], #1
  40397c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  403980:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  403984:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  403988:	2b09      	cmp	r3, #9
  40398a:	d9f5      	bls.n	403978 <_svfprintf_r+0x268>
  40398c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  403990:	910a      	str	r1, [sp, #40]	; 0x28
  403992:	4681      	mov	r9, r0
  403994:	e71a      	b.n	4037cc <_svfprintf_r+0xbc>
  403996:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403998:	4ca1      	ldr	r4, [pc, #644]	; (403c20 <_svfprintf_r+0x510>)
  40399a:	06af      	lsls	r7, r5, #26
  40399c:	941a      	str	r4, [sp, #104]	; 0x68
  40399e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4039a2:	f140 81d1 	bpl.w	403d48 <_svfprintf_r+0x638>
  4039a6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4039aa:	f10c 0307 	add.w	r3, ip, #7
  4039ae:	f023 0307 	bic.w	r3, r3, #7
  4039b2:	f103 0408 	add.w	r4, r3, #8
  4039b6:	9410      	str	r4, [sp, #64]	; 0x40
  4039b8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4039bc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4039c0:	f01c 0f01 	tst.w	ip, #1
  4039c4:	f000 8462 	beq.w	40428c <_svfprintf_r+0xb7c>
  4039c8:	ea54 0005 	orrs.w	r0, r4, r5
  4039cc:	f000 845e 	beq.w	40428c <_svfprintf_r+0xb7c>
  4039d0:	2330      	movs	r3, #48	; 0x30
  4039d2:	f04c 0c02 	orr.w	ip, ip, #2
  4039d6:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  4039da:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  4039de:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4039e2:	2302      	movs	r3, #2
  4039e4:	f04f 0a00 	mov.w	sl, #0
  4039e8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4039ec:	990a      	ldr	r1, [sp, #40]	; 0x28
  4039ee:	2900      	cmp	r1, #0
  4039f0:	db05      	blt.n	4039fe <_svfprintf_r+0x2ee>
  4039f2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4039f6:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  4039fa:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4039fe:	ea54 0005 	orrs.w	r0, r4, r5
  403a02:	f040 82c5 	bne.w	403f90 <_svfprintf_r+0x880>
  403a06:	990a      	ldr	r1, [sp, #40]	; 0x28
  403a08:	2900      	cmp	r1, #0
  403a0a:	f040 82c1 	bne.w	403f90 <_svfprintf_r+0x880>
  403a0e:	2b00      	cmp	r3, #0
  403a10:	f040 8438 	bne.w	404284 <_svfprintf_r+0xb74>
  403a14:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403a18:	f01c 0f01 	tst.w	ip, #1
  403a1c:	f000 8432 	beq.w	404284 <_svfprintf_r+0xb74>
  403a20:	af48      	add	r7, sp, #288	; 0x120
  403a22:	2330      	movs	r3, #48	; 0x30
  403a24:	9d08      	ldr	r5, [sp, #32]
  403a26:	f807 3d41 	strb.w	r3, [r7, #-65]!
  403a2a:	1bec      	subs	r4, r5, r7
  403a2c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  403a30:	2500      	movs	r5, #0
  403a32:	4564      	cmp	r4, ip
  403a34:	bfa8      	it	ge
  403a36:	46a4      	movge	ip, r4
  403a38:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  403a3c:	9514      	str	r5, [sp, #80]	; 0x50
  403a3e:	f1ba 0f00 	cmp.w	sl, #0
  403a42:	d002      	beq.n	403a4a <_svfprintf_r+0x33a>
  403a44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403a46:	3501      	adds	r5, #1
  403a48:	950b      	str	r5, [sp, #44]	; 0x2c
  403a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a4c:	f013 0302 	ands.w	r3, r3, #2
  403a50:	9312      	str	r3, [sp, #72]	; 0x48
  403a52:	d002      	beq.n	403a5a <_svfprintf_r+0x34a>
  403a54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403a56:	3502      	adds	r5, #2
  403a58:	950b      	str	r5, [sp, #44]	; 0x2c
  403a5a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403a5e:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  403a62:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  403a66:	f040 8290 	bne.w	403f8a <_svfprintf_r+0x87a>
  403a6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403a6c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  403a70:	ebcc 0b05 	rsb	fp, ip, r5
  403a74:	f1bb 0f00 	cmp.w	fp, #0
  403a78:	f340 8287 	ble.w	403f8a <_svfprintf_r+0x87a>
  403a7c:	f1bb 0f10 	cmp.w	fp, #16
  403a80:	992d      	ldr	r1, [sp, #180]	; 0xb4
  403a82:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  403a84:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 403c28 <_svfprintf_r+0x518>
  403a88:	dd2c      	ble.n	403ae4 <_svfprintf_r+0x3d4>
  403a8a:	971b      	str	r7, [sp, #108]	; 0x6c
  403a8c:	4630      	mov	r0, r6
  403a8e:	4657      	mov	r7, sl
  403a90:	2510      	movs	r5, #16
  403a92:	46ca      	mov	sl, r9
  403a94:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  403a96:	46a1      	mov	r9, r4
  403a98:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  403a9a:	e006      	b.n	403aaa <_svfprintf_r+0x39a>
  403a9c:	f1ab 0b10 	sub.w	fp, fp, #16
  403aa0:	f1bb 0f10 	cmp.w	fp, #16
  403aa4:	f100 0008 	add.w	r0, r0, #8
  403aa8:	dd17      	ble.n	403ada <_svfprintf_r+0x3ca>
  403aaa:	3201      	adds	r2, #1
  403aac:	3110      	adds	r1, #16
  403aae:	2a07      	cmp	r2, #7
  403ab0:	912d      	str	r1, [sp, #180]	; 0xb4
  403ab2:	922c      	str	r2, [sp, #176]	; 0xb0
  403ab4:	6007      	str	r7, [r0, #0]
  403ab6:	6045      	str	r5, [r0, #4]
  403ab8:	ddf0      	ble.n	403a9c <_svfprintf_r+0x38c>
  403aba:	4620      	mov	r0, r4
  403abc:	4631      	mov	r1, r6
  403abe:	aa2b      	add	r2, sp, #172	; 0xac
  403ac0:	f004 fd36 	bl	408530 <__ssprint_r>
  403ac4:	2800      	cmp	r0, #0
  403ac6:	f47f af3b 	bne.w	403940 <_svfprintf_r+0x230>
  403aca:	f1ab 0b10 	sub.w	fp, fp, #16
  403ace:	f1bb 0f10 	cmp.w	fp, #16
  403ad2:	992d      	ldr	r1, [sp, #180]	; 0xb4
  403ad4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  403ad6:	a838      	add	r0, sp, #224	; 0xe0
  403ad8:	dce7      	bgt.n	403aaa <_svfprintf_r+0x39a>
  403ada:	464c      	mov	r4, r9
  403adc:	46d1      	mov	r9, sl
  403ade:	46ba      	mov	sl, r7
  403ae0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  403ae2:	4606      	mov	r6, r0
  403ae4:	3201      	adds	r2, #1
  403ae6:	eb0b 0c01 	add.w	ip, fp, r1
  403aea:	2a07      	cmp	r2, #7
  403aec:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403af0:	922c      	str	r2, [sp, #176]	; 0xb0
  403af2:	e886 0c00 	stmia.w	r6, {sl, fp}
  403af6:	f300 841a 	bgt.w	40432e <_svfprintf_r+0xc1e>
  403afa:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403afe:	3608      	adds	r6, #8
  403b00:	f1ba 0f00 	cmp.w	sl, #0
  403b04:	d00f      	beq.n	403b26 <_svfprintf_r+0x416>
  403b06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403b08:	f10c 0c01 	add.w	ip, ip, #1
  403b0c:	3301      	adds	r3, #1
  403b0e:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  403b12:	2201      	movs	r2, #1
  403b14:	2b07      	cmp	r3, #7
  403b16:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403b1a:	932c      	str	r3, [sp, #176]	; 0xb0
  403b1c:	e886 0006 	stmia.w	r6, {r1, r2}
  403b20:	f300 83a4 	bgt.w	40426c <_svfprintf_r+0xb5c>
  403b24:	3608      	adds	r6, #8
  403b26:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403b28:	b173      	cbz	r3, 403b48 <_svfprintf_r+0x438>
  403b2a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403b2c:	f10c 0c02 	add.w	ip, ip, #2
  403b30:	3301      	adds	r3, #1
  403b32:	a924      	add	r1, sp, #144	; 0x90
  403b34:	2202      	movs	r2, #2
  403b36:	2b07      	cmp	r3, #7
  403b38:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403b3c:	932c      	str	r3, [sp, #176]	; 0xb0
  403b3e:	e886 0006 	stmia.w	r6, {r1, r2}
  403b42:	f300 8387 	bgt.w	404254 <_svfprintf_r+0xb44>
  403b46:	3608      	adds	r6, #8
  403b48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  403b4a:	2d80      	cmp	r5, #128	; 0x80
  403b4c:	f000 82ca 	beq.w	4040e4 <_svfprintf_r+0x9d4>
  403b50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403b52:	ebc4 0a05 	rsb	sl, r4, r5
  403b56:	f1ba 0f00 	cmp.w	sl, #0
  403b5a:	dd3b      	ble.n	403bd4 <_svfprintf_r+0x4c4>
  403b5c:	f1ba 0f10 	cmp.w	sl, #16
  403b60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403b62:	4d30      	ldr	r5, [pc, #192]	; (403c24 <_svfprintf_r+0x514>)
  403b64:	dd2b      	ble.n	403bbe <_svfprintf_r+0x4ae>
  403b66:	940a      	str	r4, [sp, #40]	; 0x28
  403b68:	4632      	mov	r2, r6
  403b6a:	f04f 0b10 	mov.w	fp, #16
  403b6e:	462e      	mov	r6, r5
  403b70:	4661      	mov	r1, ip
  403b72:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  403b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403b76:	e006      	b.n	403b86 <_svfprintf_r+0x476>
  403b78:	f1aa 0a10 	sub.w	sl, sl, #16
  403b7c:	f1ba 0f10 	cmp.w	sl, #16
  403b80:	f102 0208 	add.w	r2, r2, #8
  403b84:	dd17      	ble.n	403bb6 <_svfprintf_r+0x4a6>
  403b86:	3301      	adds	r3, #1
  403b88:	3110      	adds	r1, #16
  403b8a:	2b07      	cmp	r3, #7
  403b8c:	912d      	str	r1, [sp, #180]	; 0xb4
  403b8e:	932c      	str	r3, [sp, #176]	; 0xb0
  403b90:	e882 0840 	stmia.w	r2, {r6, fp}
  403b94:	ddf0      	ble.n	403b78 <_svfprintf_r+0x468>
  403b96:	4620      	mov	r0, r4
  403b98:	4629      	mov	r1, r5
  403b9a:	aa2b      	add	r2, sp, #172	; 0xac
  403b9c:	f004 fcc8 	bl	408530 <__ssprint_r>
  403ba0:	2800      	cmp	r0, #0
  403ba2:	f47f aecd 	bne.w	403940 <_svfprintf_r+0x230>
  403ba6:	f1aa 0a10 	sub.w	sl, sl, #16
  403baa:	f1ba 0f10 	cmp.w	sl, #16
  403bae:	992d      	ldr	r1, [sp, #180]	; 0xb4
  403bb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403bb2:	aa38      	add	r2, sp, #224	; 0xe0
  403bb4:	dce7      	bgt.n	403b86 <_svfprintf_r+0x476>
  403bb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403bb8:	4635      	mov	r5, r6
  403bba:	468c      	mov	ip, r1
  403bbc:	4616      	mov	r6, r2
  403bbe:	3301      	adds	r3, #1
  403bc0:	44d4      	add	ip, sl
  403bc2:	2b07      	cmp	r3, #7
  403bc4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403bc8:	932c      	str	r3, [sp, #176]	; 0xb0
  403bca:	e886 0420 	stmia.w	r6, {r5, sl}
  403bce:	f300 8335 	bgt.w	40423c <_svfprintf_r+0xb2c>
  403bd2:	3608      	adds	r6, #8
  403bd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403bd6:	05ed      	lsls	r5, r5, #23
  403bd8:	f100 8224 	bmi.w	404024 <_svfprintf_r+0x914>
  403bdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403bde:	44a4      	add	ip, r4
  403be0:	3301      	adds	r3, #1
  403be2:	2b07      	cmp	r3, #7
  403be4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403be8:	6037      	str	r7, [r6, #0]
  403bea:	6074      	str	r4, [r6, #4]
  403bec:	932c      	str	r3, [sp, #176]	; 0xb0
  403bee:	f300 830f 	bgt.w	404210 <_svfprintf_r+0xb00>
  403bf2:	3608      	adds	r6, #8
  403bf4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403bf6:	0763      	lsls	r3, r4, #29
  403bf8:	d549      	bpl.n	403c8e <_svfprintf_r+0x57e>
  403bfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403bfc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403bfe:	1a2c      	subs	r4, r5, r0
  403c00:	2c00      	cmp	r4, #0
  403c02:	dd44      	ble.n	403c8e <_svfprintf_r+0x57e>
  403c04:	2c10      	cmp	r4, #16
  403c06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403c08:	f8df a01c 	ldr.w	sl, [pc, #28]	; 403c28 <_svfprintf_r+0x518>
  403c0c:	dd2b      	ble.n	403c66 <_svfprintf_r+0x556>
  403c0e:	4657      	mov	r7, sl
  403c10:	2510      	movs	r5, #16
  403c12:	4662      	mov	r2, ip
  403c14:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  403c18:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  403c1c:	e00b      	b.n	403c36 <_svfprintf_r+0x526>
  403c1e:	bf00      	nop
  403c20:	0040b6f8 	.word	0x0040b6f8
  403c24:	0040b6c4 	.word	0x0040b6c4
  403c28:	0040b718 	.word	0x0040b718
  403c2c:	3c10      	subs	r4, #16
  403c2e:	2c10      	cmp	r4, #16
  403c30:	f106 0608 	add.w	r6, r6, #8
  403c34:	dd15      	ble.n	403c62 <_svfprintf_r+0x552>
  403c36:	3301      	adds	r3, #1
  403c38:	3210      	adds	r2, #16
  403c3a:	2b07      	cmp	r3, #7
  403c3c:	922d      	str	r2, [sp, #180]	; 0xb4
  403c3e:	932c      	str	r3, [sp, #176]	; 0xb0
  403c40:	6037      	str	r7, [r6, #0]
  403c42:	6075      	str	r5, [r6, #4]
  403c44:	ddf2      	ble.n	403c2c <_svfprintf_r+0x51c>
  403c46:	4650      	mov	r0, sl
  403c48:	4641      	mov	r1, r8
  403c4a:	aa2b      	add	r2, sp, #172	; 0xac
  403c4c:	f004 fc70 	bl	408530 <__ssprint_r>
  403c50:	2800      	cmp	r0, #0
  403c52:	f47f ae75 	bne.w	403940 <_svfprintf_r+0x230>
  403c56:	3c10      	subs	r4, #16
  403c58:	2c10      	cmp	r4, #16
  403c5a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  403c5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403c5e:	ae38      	add	r6, sp, #224	; 0xe0
  403c60:	dce9      	bgt.n	403c36 <_svfprintf_r+0x526>
  403c62:	4694      	mov	ip, r2
  403c64:	46ba      	mov	sl, r7
  403c66:	3301      	adds	r3, #1
  403c68:	44a4      	add	ip, r4
  403c6a:	2b07      	cmp	r3, #7
  403c6c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403c70:	932c      	str	r3, [sp, #176]	; 0xb0
  403c72:	f8c6 a000 	str.w	sl, [r6]
  403c76:	6074      	str	r4, [r6, #4]
  403c78:	dd09      	ble.n	403c8e <_svfprintf_r+0x57e>
  403c7a:	980d      	ldr	r0, [sp, #52]	; 0x34
  403c7c:	990c      	ldr	r1, [sp, #48]	; 0x30
  403c7e:	aa2b      	add	r2, sp, #172	; 0xac
  403c80:	f004 fc56 	bl	408530 <__ssprint_r>
  403c84:	2800      	cmp	r0, #0
  403c86:	f47f ae5b 	bne.w	403940 <_svfprintf_r+0x230>
  403c8a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  403c8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403c90:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403c92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403c94:	42a8      	cmp	r0, r5
  403c96:	bfac      	ite	ge
  403c98:	1824      	addge	r4, r4, r0
  403c9a:	1964      	addlt	r4, r4, r5
  403c9c:	940e      	str	r4, [sp, #56]	; 0x38
  403c9e:	f1bc 0f00 	cmp.w	ip, #0
  403ca2:	f040 82c1 	bne.w	404228 <_svfprintf_r+0xb18>
  403ca6:	2300      	movs	r3, #0
  403ca8:	932c      	str	r3, [sp, #176]	; 0xb0
  403caa:	ae38      	add	r6, sp, #224	; 0xe0
  403cac:	e556      	b.n	40375c <_svfprintf_r+0x4c>
  403cae:	f899 8000 	ldrb.w	r8, [r9]
  403cb2:	2a00      	cmp	r2, #0
  403cb4:	f47f ad88 	bne.w	4037c8 <_svfprintf_r+0xb8>
  403cb8:	2220      	movs	r2, #32
  403cba:	e585      	b.n	4037c8 <_svfprintf_r+0xb8>
  403cbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403cbe:	f045 0501 	orr.w	r5, r5, #1
  403cc2:	9509      	str	r5, [sp, #36]	; 0x24
  403cc4:	f899 8000 	ldrb.w	r8, [r9]
  403cc8:	e57e      	b.n	4037c8 <_svfprintf_r+0xb8>
  403cca:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403ccc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  403cd0:	9509      	str	r5, [sp, #36]	; 0x24
  403cd2:	f899 8000 	ldrb.w	r8, [r9]
  403cd6:	e577      	b.n	4037c8 <_svfprintf_r+0xb8>
  403cd8:	2400      	movs	r4, #0
  403cda:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  403cde:	940f      	str	r4, [sp, #60]	; 0x3c
  403ce0:	4621      	mov	r1, r4
  403ce2:	f819 8b01 	ldrb.w	r8, [r9], #1
  403ce6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  403cea:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  403cee:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  403cf2:	2b09      	cmp	r3, #9
  403cf4:	d9f5      	bls.n	403ce2 <_svfprintf_r+0x5d2>
  403cf6:	910f      	str	r1, [sp, #60]	; 0x3c
  403cf8:	e568      	b.n	4037cc <_svfprintf_r+0xbc>
  403cfa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403cfe:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403d02:	f04c 0c10 	orr.w	ip, ip, #16
  403d06:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403d0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403d0c:	06a5      	lsls	r5, r4, #26
  403d0e:	f140 80b2 	bpl.w	403e76 <_svfprintf_r+0x766>
  403d12:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403d14:	1de9      	adds	r1, r5, #7
  403d16:	f021 0107 	bic.w	r1, r1, #7
  403d1a:	e9d1 2300 	ldrd	r2, r3, [r1]
  403d1e:	3108      	adds	r1, #8
  403d20:	9110      	str	r1, [sp, #64]	; 0x40
  403d22:	4614      	mov	r4, r2
  403d24:	461d      	mov	r5, r3
  403d26:	2a00      	cmp	r2, #0
  403d28:	f173 0c00 	sbcs.w	ip, r3, #0
  403d2c:	f2c0 8394 	blt.w	404458 <_svfprintf_r+0xd48>
  403d30:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403d34:	2301      	movs	r3, #1
  403d36:	e659      	b.n	4039ec <_svfprintf_r+0x2dc>
  403d38:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403d3a:	4cb6      	ldr	r4, [pc, #728]	; (404014 <_svfprintf_r+0x904>)
  403d3c:	06af      	lsls	r7, r5, #26
  403d3e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403d42:	941a      	str	r4, [sp, #104]	; 0x68
  403d44:	f53f ae2f 	bmi.w	4039a6 <_svfprintf_r+0x296>
  403d48:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403d4a:	06ed      	lsls	r5, r5, #27
  403d4c:	f140 8443 	bpl.w	4045d6 <_svfprintf_r+0xec6>
  403d50:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  403d54:	2500      	movs	r5, #0
  403d56:	f8dc 4000 	ldr.w	r4, [ip]
  403d5a:	f10c 0c04 	add.w	ip, ip, #4
  403d5e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403d62:	e62b      	b.n	4039bc <_svfprintf_r+0x2ac>
  403d64:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403d68:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403d6c:	f01c 0f20 	tst.w	ip, #32
  403d70:	f000 8440 	beq.w	4045f4 <_svfprintf_r+0xee4>
  403d74:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403d76:	6821      	ldr	r1, [r4, #0]
  403d78:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403d7a:	17e5      	asrs	r5, r4, #31
  403d7c:	462b      	mov	r3, r5
  403d7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403d80:	4622      	mov	r2, r4
  403d82:	3504      	adds	r5, #4
  403d84:	9510      	str	r5, [sp, #64]	; 0x40
  403d86:	e9c1 2300 	strd	r2, r3, [r1]
  403d8a:	e4e7      	b.n	40375c <_svfprintf_r+0x4c>
  403d8c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403d8e:	f04f 0a00 	mov.w	sl, #0
  403d92:	6827      	ldr	r7, [r4, #0]
  403d94:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  403d98:	1d25      	adds	r5, r4, #4
  403d9a:	2f00      	cmp	r7, #0
  403d9c:	f000 85e9 	beq.w	404972 <_svfprintf_r+0x1262>
  403da0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403da2:	4638      	mov	r0, r7
  403da4:	2c00      	cmp	r4, #0
  403da6:	f2c0 859b 	blt.w	4048e0 <_svfprintf_r+0x11d0>
  403daa:	4651      	mov	r1, sl
  403dac:	4622      	mov	r2, r4
  403dae:	f003 fda5 	bl	4078fc <memchr>
  403db2:	2800      	cmp	r0, #0
  403db4:	f000 8613 	beq.w	4049de <_svfprintf_r+0x12ce>
  403db8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403dba:	1bc0      	subs	r0, r0, r7
  403dbc:	42a0      	cmp	r0, r4
  403dbe:	bfb8      	it	lt
  403dc0:	4604      	movlt	r4, r0
  403dc2:	9510      	str	r5, [sp, #64]	; 0x40
  403dc4:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  403dc8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  403dcc:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  403dd0:	950b      	str	r5, [sp, #44]	; 0x2c
  403dd2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403dd6:	e632      	b.n	403a3e <_svfprintf_r+0x32e>
  403dd8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403ddc:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  403de0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403de4:	f899 8000 	ldrb.w	r8, [r9]
  403de8:	e4ee      	b.n	4037c8 <_svfprintf_r+0xb8>
  403dea:	f899 8000 	ldrb.w	r8, [r9]
  403dee:	464b      	mov	r3, r9
  403df0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  403df4:	f000 847f 	beq.w	4046f6 <_svfprintf_r+0xfe6>
  403df8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403dfa:	f045 0510 	orr.w	r5, r5, #16
  403dfe:	9509      	str	r5, [sp, #36]	; 0x24
  403e00:	e4e2      	b.n	4037c8 <_svfprintf_r+0xb8>
  403e02:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403e04:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403e06:	6824      	ldr	r4, [r4, #0]
  403e08:	1d2b      	adds	r3, r5, #4
  403e0a:	2c00      	cmp	r4, #0
  403e0c:	940f      	str	r4, [sp, #60]	; 0x3c
  403e0e:	f6ff ad7d 	blt.w	40390c <_svfprintf_r+0x1fc>
  403e12:	9310      	str	r3, [sp, #64]	; 0x40
  403e14:	f899 8000 	ldrb.w	r8, [r9]
  403e18:	e4d6      	b.n	4037c8 <_svfprintf_r+0xb8>
  403e1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403e1c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403e20:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403e22:	487d      	ldr	r0, [pc, #500]	; (404018 <_svfprintf_r+0x908>)
  403e24:	3504      	adds	r5, #4
  403e26:	681c      	ldr	r4, [r3, #0]
  403e28:	f04f 0878 	mov.w	r8, #120	; 0x78
  403e2c:	2330      	movs	r3, #48	; 0x30
  403e2e:	f04c 0c02 	orr.w	ip, ip, #2
  403e32:	9510      	str	r5, [sp, #64]	; 0x40
  403e34:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  403e38:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403e3c:	2500      	movs	r5, #0
  403e3e:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  403e42:	901a      	str	r0, [sp, #104]	; 0x68
  403e44:	2302      	movs	r3, #2
  403e46:	e5cd      	b.n	4039e4 <_svfprintf_r+0x2d4>
  403e48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403e4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403e4c:	681a      	ldr	r2, [r3, #0]
  403e4e:	2401      	movs	r4, #1
  403e50:	2300      	movs	r3, #0
  403e52:	3504      	adds	r5, #4
  403e54:	469a      	mov	sl, r3
  403e56:	940b      	str	r4, [sp, #44]	; 0x2c
  403e58:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  403e5c:	9510      	str	r5, [sp, #64]	; 0x40
  403e5e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  403e62:	930a      	str	r3, [sp, #40]	; 0x28
  403e64:	9314      	str	r3, [sp, #80]	; 0x50
  403e66:	af2e      	add	r7, sp, #184	; 0xb8
  403e68:	e5ef      	b.n	403a4a <_svfprintf_r+0x33a>
  403e6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403e6c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403e70:	06a5      	lsls	r5, r4, #26
  403e72:	f53f af4e 	bmi.w	403d12 <_svfprintf_r+0x602>
  403e76:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403e7a:	f01c 0f10 	tst.w	ip, #16
  403e7e:	f040 82df 	bne.w	404440 <_svfprintf_r+0xd30>
  403e82:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403e86:	f01c 0f40 	tst.w	ip, #64	; 0x40
  403e8a:	f000 82d9 	beq.w	404440 <_svfprintf_r+0xd30>
  403e8e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  403e92:	f9bc 4000 	ldrsh.w	r4, [ip]
  403e96:	f10c 0c04 	add.w	ip, ip, #4
  403e9a:	17e5      	asrs	r5, r4, #31
  403e9c:	4622      	mov	r2, r4
  403e9e:	462b      	mov	r3, r5
  403ea0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403ea4:	e73f      	b.n	403d26 <_svfprintf_r+0x616>
  403ea6:	f899 8000 	ldrb.w	r8, [r9]
  403eaa:	222b      	movs	r2, #43	; 0x2b
  403eac:	e48c      	b.n	4037c8 <_svfprintf_r+0xb8>
  403eae:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403eb0:	f045 0508 	orr.w	r5, r5, #8
  403eb4:	9509      	str	r5, [sp, #36]	; 0x24
  403eb6:	f899 8000 	ldrb.w	r8, [r9]
  403eba:	e485      	b.n	4037c8 <_svfprintf_r+0xb8>
  403ebc:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403ebe:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403ec2:	1deb      	adds	r3, r5, #7
  403ec4:	f023 0307 	bic.w	r3, r3, #7
  403ec8:	f103 0c08 	add.w	ip, r3, #8
  403ecc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403ed0:	e9d3 4500 	ldrd	r4, r5, [r3]
  403ed4:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  403ed8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  403edc:	f004 faac 	bl	408438 <__fpclassifyd>
  403ee0:	2801      	cmp	r0, #1
  403ee2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  403ee6:	f040 835c 	bne.w	4045a2 <_svfprintf_r+0xe92>
  403eea:	2200      	movs	r2, #0
  403eec:	2300      	movs	r3, #0
  403eee:	f006 fc63 	bl	40a7b8 <__aeabi_dcmplt>
  403ef2:	2800      	cmp	r0, #0
  403ef4:	f040 8563 	bne.w	4049be <_svfprintf_r+0x12ae>
  403ef8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403efc:	2503      	movs	r5, #3
  403efe:	950b      	str	r5, [sp, #44]	; 0x2c
  403f00:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403f02:	4f46      	ldr	r7, [pc, #280]	; (40401c <_svfprintf_r+0x90c>)
  403f04:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  403f08:	4b45      	ldr	r3, [pc, #276]	; (404020 <_svfprintf_r+0x910>)
  403f0a:	2400      	movs	r4, #0
  403f0c:	9509      	str	r5, [sp, #36]	; 0x24
  403f0e:	2500      	movs	r5, #0
  403f10:	940a      	str	r4, [sp, #40]	; 0x28
  403f12:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403f16:	bfd8      	it	le
  403f18:	461f      	movle	r7, r3
  403f1a:	2403      	movs	r4, #3
  403f1c:	9514      	str	r5, [sp, #80]	; 0x50
  403f1e:	e58e      	b.n	403a3e <_svfprintf_r+0x32e>
  403f20:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403f24:	f04c 0c20 	orr.w	ip, ip, #32
  403f28:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403f2c:	f899 8000 	ldrb.w	r8, [r9]
  403f30:	e44a      	b.n	4037c8 <_svfprintf_r+0xb8>
  403f32:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403f34:	1de3      	adds	r3, r4, #7
  403f36:	f023 0307 	bic.w	r3, r3, #7
  403f3a:	f103 0508 	add.w	r5, r3, #8
  403f3e:	9510      	str	r5, [sp, #64]	; 0x40
  403f40:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f44:	2300      	movs	r3, #0
  403f46:	e54d      	b.n	4039e4 <_svfprintf_r+0x2d4>
  403f48:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403f4a:	1deb      	adds	r3, r5, #7
  403f4c:	f023 0307 	bic.w	r3, r3, #7
  403f50:	f103 0c08 	add.w	ip, r3, #8
  403f54:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f58:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403f5c:	2301      	movs	r3, #1
  403f5e:	e541      	b.n	4039e4 <_svfprintf_r+0x2d4>
  403f60:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403f64:	f1b8 0f00 	cmp.w	r8, #0
  403f68:	f43f ace3 	beq.w	403932 <_svfprintf_r+0x222>
  403f6c:	2300      	movs	r3, #0
  403f6e:	f04f 0c01 	mov.w	ip, #1
  403f72:	469a      	mov	sl, r3
  403f74:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  403f78:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  403f7c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  403f80:	930a      	str	r3, [sp, #40]	; 0x28
  403f82:	9314      	str	r3, [sp, #80]	; 0x50
  403f84:	4664      	mov	r4, ip
  403f86:	af2e      	add	r7, sp, #184	; 0xb8
  403f88:	e55f      	b.n	403a4a <_svfprintf_r+0x33a>
  403f8a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  403f8e:	e5b7      	b.n	403b00 <_svfprintf_r+0x3f0>
  403f90:	2b01      	cmp	r3, #1
  403f92:	f000 80ec 	beq.w	40416e <_svfprintf_r+0xa5e>
  403f96:	2b02      	cmp	r3, #2
  403f98:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  403f9c:	d118      	bne.n	403fd0 <_svfprintf_r+0x8c0>
  403f9e:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  403fa2:	4619      	mov	r1, r3
  403fa4:	f004 000f 	and.w	r0, r4, #15
  403fa8:	0922      	lsrs	r2, r4, #4
  403faa:	f81c 0000 	ldrb.w	r0, [ip, r0]
  403fae:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  403fb2:	092b      	lsrs	r3, r5, #4
  403fb4:	7008      	strb	r0, [r1, #0]
  403fb6:	ea52 0003 	orrs.w	r0, r2, r3
  403fba:	460f      	mov	r7, r1
  403fbc:	4614      	mov	r4, r2
  403fbe:	461d      	mov	r5, r3
  403fc0:	f101 31ff 	add.w	r1, r1, #4294967295
  403fc4:	d1ee      	bne.n	403fa4 <_svfprintf_r+0x894>
  403fc6:	9d08      	ldr	r5, [sp, #32]
  403fc8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  403fcc:	1bec      	subs	r4, r5, r7
  403fce:	e52d      	b.n	403a2c <_svfprintf_r+0x31c>
  403fd0:	08e0      	lsrs	r0, r4, #3
  403fd2:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  403fd6:	f004 0207 	and.w	r2, r4, #7
  403fda:	08e9      	lsrs	r1, r5, #3
  403fdc:	3230      	adds	r2, #48	; 0x30
  403fde:	ea50 0c01 	orrs.w	ip, r0, r1
  403fe2:	461f      	mov	r7, r3
  403fe4:	701a      	strb	r2, [r3, #0]
  403fe6:	4604      	mov	r4, r0
  403fe8:	460d      	mov	r5, r1
  403fea:	f103 33ff 	add.w	r3, r3, #4294967295
  403fee:	d1ef      	bne.n	403fd0 <_svfprintf_r+0x8c0>
  403ff0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403ff2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  403ff6:	07e0      	lsls	r0, r4, #31
  403ff8:	4639      	mov	r1, r7
  403ffa:	f140 80c1 	bpl.w	404180 <_svfprintf_r+0xa70>
  403ffe:	2a30      	cmp	r2, #48	; 0x30
  404000:	f000 80be 	beq.w	404180 <_svfprintf_r+0xa70>
  404004:	9d08      	ldr	r5, [sp, #32]
  404006:	461f      	mov	r7, r3
  404008:	2330      	movs	r3, #48	; 0x30
  40400a:	1bec      	subs	r4, r5, r7
  40400c:	f801 3c01 	strb.w	r3, [r1, #-1]
  404010:	e50c      	b.n	403a2c <_svfprintf_r+0x31c>
  404012:	bf00      	nop
  404014:	0040b6e4 	.word	0x0040b6e4
  404018:	0040b6f8 	.word	0x0040b6f8
  40401c:	0040b6d8 	.word	0x0040b6d8
  404020:	0040b6d4 	.word	0x0040b6d4
  404024:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  404028:	f340 80ad 	ble.w	404186 <_svfprintf_r+0xa76>
  40402c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404030:	2200      	movs	r2, #0
  404032:	2300      	movs	r3, #0
  404034:	f8cd c01c 	str.w	ip, [sp, #28]
  404038:	f006 fbb4 	bl	40a7a4 <__aeabi_dcmpeq>
  40403c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404040:	2800      	cmp	r0, #0
  404042:	f000 8126 	beq.w	404292 <_svfprintf_r+0xb82>
  404046:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404048:	49aa      	ldr	r1, [pc, #680]	; (4042f4 <_svfprintf_r+0xbe4>)
  40404a:	3301      	adds	r3, #1
  40404c:	f10c 0c01 	add.w	ip, ip, #1
  404050:	2201      	movs	r2, #1
  404052:	2b07      	cmp	r3, #7
  404054:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404058:	932c      	str	r3, [sp, #176]	; 0xb0
  40405a:	e886 0006 	stmia.w	r6, {r1, r2}
  40405e:	f300 82ed 	bgt.w	40463c <_svfprintf_r+0xf2c>
  404062:	3608      	adds	r6, #8
  404064:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404066:	9c11      	ldr	r4, [sp, #68]	; 0x44
  404068:	42a3      	cmp	r3, r4
  40406a:	db03      	blt.n	404074 <_svfprintf_r+0x964>
  40406c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40406e:	07ec      	lsls	r4, r5, #31
  404070:	f57f adc0 	bpl.w	403bf4 <_svfprintf_r+0x4e4>
  404074:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404076:	9c18      	ldr	r4, [sp, #96]	; 0x60
  404078:	3301      	adds	r3, #1
  40407a:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40407c:	44a4      	add	ip, r4
  40407e:	2b07      	cmp	r3, #7
  404080:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404084:	6035      	str	r5, [r6, #0]
  404086:	6074      	str	r4, [r6, #4]
  404088:	932c      	str	r3, [sp, #176]	; 0xb0
  40408a:	f300 833e 	bgt.w	40470a <_svfprintf_r+0xffa>
  40408e:	3608      	adds	r6, #8
  404090:	9d11      	ldr	r5, [sp, #68]	; 0x44
  404092:	1e6c      	subs	r4, r5, #1
  404094:	2c00      	cmp	r4, #0
  404096:	f77f adad 	ble.w	403bf4 <_svfprintf_r+0x4e4>
  40409a:	2c10      	cmp	r4, #16
  40409c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40409e:	4d96      	ldr	r5, [pc, #600]	; (4042f8 <_svfprintf_r+0xbe8>)
  4040a0:	f340 8197 	ble.w	4043d2 <_svfprintf_r+0xcc2>
  4040a4:	2710      	movs	r7, #16
  4040a6:	4662      	mov	r2, ip
  4040a8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4040ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  4040b0:	e004      	b.n	4040bc <_svfprintf_r+0x9ac>
  4040b2:	3608      	adds	r6, #8
  4040b4:	3c10      	subs	r4, #16
  4040b6:	2c10      	cmp	r4, #16
  4040b8:	f340 818a 	ble.w	4043d0 <_svfprintf_r+0xcc0>
  4040bc:	3301      	adds	r3, #1
  4040be:	3210      	adds	r2, #16
  4040c0:	2b07      	cmp	r3, #7
  4040c2:	922d      	str	r2, [sp, #180]	; 0xb4
  4040c4:	932c      	str	r3, [sp, #176]	; 0xb0
  4040c6:	e886 00a0 	stmia.w	r6, {r5, r7}
  4040ca:	ddf2      	ble.n	4040b2 <_svfprintf_r+0x9a2>
  4040cc:	4640      	mov	r0, r8
  4040ce:	4651      	mov	r1, sl
  4040d0:	aa2b      	add	r2, sp, #172	; 0xac
  4040d2:	f004 fa2d 	bl	408530 <__ssprint_r>
  4040d6:	2800      	cmp	r0, #0
  4040d8:	f47f ac32 	bne.w	403940 <_svfprintf_r+0x230>
  4040dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4040de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4040e0:	ae38      	add	r6, sp, #224	; 0xe0
  4040e2:	e7e7      	b.n	4040b4 <_svfprintf_r+0x9a4>
  4040e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4040e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4040e8:	ebc0 0a05 	rsb	sl, r0, r5
  4040ec:	f1ba 0f00 	cmp.w	sl, #0
  4040f0:	f77f ad2e 	ble.w	403b50 <_svfprintf_r+0x440>
  4040f4:	f1ba 0f10 	cmp.w	sl, #16
  4040f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4040fa:	4d7f      	ldr	r5, [pc, #508]	; (4042f8 <_svfprintf_r+0xbe8>)
  4040fc:	dd2b      	ble.n	404156 <_svfprintf_r+0xa46>
  4040fe:	9412      	str	r4, [sp, #72]	; 0x48
  404100:	4632      	mov	r2, r6
  404102:	f04f 0b10 	mov.w	fp, #16
  404106:	462e      	mov	r6, r5
  404108:	4661      	mov	r1, ip
  40410a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40410c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40410e:	e006      	b.n	40411e <_svfprintf_r+0xa0e>
  404110:	f1aa 0a10 	sub.w	sl, sl, #16
  404114:	f1ba 0f10 	cmp.w	sl, #16
  404118:	f102 0208 	add.w	r2, r2, #8
  40411c:	dd17      	ble.n	40414e <_svfprintf_r+0xa3e>
  40411e:	3301      	adds	r3, #1
  404120:	3110      	adds	r1, #16
  404122:	2b07      	cmp	r3, #7
  404124:	912d      	str	r1, [sp, #180]	; 0xb4
  404126:	932c      	str	r3, [sp, #176]	; 0xb0
  404128:	e882 0840 	stmia.w	r2, {r6, fp}
  40412c:	ddf0      	ble.n	404110 <_svfprintf_r+0xa00>
  40412e:	4620      	mov	r0, r4
  404130:	4629      	mov	r1, r5
  404132:	aa2b      	add	r2, sp, #172	; 0xac
  404134:	f004 f9fc 	bl	408530 <__ssprint_r>
  404138:	2800      	cmp	r0, #0
  40413a:	f47f ac01 	bne.w	403940 <_svfprintf_r+0x230>
  40413e:	f1aa 0a10 	sub.w	sl, sl, #16
  404142:	f1ba 0f10 	cmp.w	sl, #16
  404146:	992d      	ldr	r1, [sp, #180]	; 0xb4
  404148:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40414a:	aa38      	add	r2, sp, #224	; 0xe0
  40414c:	dce7      	bgt.n	40411e <_svfprintf_r+0xa0e>
  40414e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  404150:	4635      	mov	r5, r6
  404152:	468c      	mov	ip, r1
  404154:	4616      	mov	r6, r2
  404156:	3301      	adds	r3, #1
  404158:	44d4      	add	ip, sl
  40415a:	2b07      	cmp	r3, #7
  40415c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404160:	932c      	str	r3, [sp, #176]	; 0xb0
  404162:	e886 0420 	stmia.w	r6, {r5, sl}
  404166:	f300 820f 	bgt.w	404588 <_svfprintf_r+0xe78>
  40416a:	3608      	adds	r6, #8
  40416c:	e4f0      	b.n	403b50 <_svfprintf_r+0x440>
  40416e:	2d00      	cmp	r5, #0
  404170:	bf08      	it	eq
  404172:	2c0a      	cmpeq	r4, #10
  404174:	f080 8138 	bcs.w	4043e8 <_svfprintf_r+0xcd8>
  404178:	3430      	adds	r4, #48	; 0x30
  40417a:	af48      	add	r7, sp, #288	; 0x120
  40417c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  404180:	9d08      	ldr	r5, [sp, #32]
  404182:	1bec      	subs	r4, r5, r7
  404184:	e452      	b.n	403a2c <_svfprintf_r+0x31c>
  404186:	9c11      	ldr	r4, [sp, #68]	; 0x44
  404188:	2c01      	cmp	r4, #1
  40418a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40418c:	f340 81d2 	ble.w	404534 <_svfprintf_r+0xe24>
  404190:	3401      	adds	r4, #1
  404192:	f10c 0301 	add.w	r3, ip, #1
  404196:	2201      	movs	r2, #1
  404198:	2c07      	cmp	r4, #7
  40419a:	932d      	str	r3, [sp, #180]	; 0xb4
  40419c:	6037      	str	r7, [r6, #0]
  40419e:	942c      	str	r4, [sp, #176]	; 0xb0
  4041a0:	6072      	str	r2, [r6, #4]
  4041a2:	f300 81d8 	bgt.w	404556 <_svfprintf_r+0xe46>
  4041a6:	3608      	adds	r6, #8
  4041a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4041aa:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  4041ae:	3401      	adds	r4, #1
  4041b0:	6035      	str	r5, [r6, #0]
  4041b2:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4041b4:	4498      	add	r8, r3
  4041b6:	2c07      	cmp	r4, #7
  4041b8:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4041bc:	942c      	str	r4, [sp, #176]	; 0xb0
  4041be:	6075      	str	r5, [r6, #4]
  4041c0:	f300 81d5 	bgt.w	40456e <_svfprintf_r+0xe5e>
  4041c4:	3608      	adds	r6, #8
  4041c6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4041ca:	2200      	movs	r2, #0
  4041cc:	2300      	movs	r3, #0
  4041ce:	f006 fae9 	bl	40a7a4 <__aeabi_dcmpeq>
  4041d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4041d4:	2800      	cmp	r0, #0
  4041d6:	f040 80b9 	bne.w	40434c <_svfprintf_r+0xc3c>
  4041da:	1e6b      	subs	r3, r5, #1
  4041dc:	3401      	adds	r4, #1
  4041de:	3701      	adds	r7, #1
  4041e0:	4498      	add	r8, r3
  4041e2:	2c07      	cmp	r4, #7
  4041e4:	942c      	str	r4, [sp, #176]	; 0xb0
  4041e6:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4041ea:	6037      	str	r7, [r6, #0]
  4041ec:	6073      	str	r3, [r6, #4]
  4041ee:	f300 80e2 	bgt.w	4043b6 <_svfprintf_r+0xca6>
  4041f2:	3608      	adds	r6, #8
  4041f4:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  4041f8:	3401      	adds	r4, #1
  4041fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4041fc:	44c4      	add	ip, r8
  4041fe:	ab27      	add	r3, sp, #156	; 0x9c
  404200:	2c07      	cmp	r4, #7
  404202:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404206:	942c      	str	r4, [sp, #176]	; 0xb0
  404208:	e886 0028 	stmia.w	r6, {r3, r5}
  40420c:	f77f acf1 	ble.w	403bf2 <_svfprintf_r+0x4e2>
  404210:	980d      	ldr	r0, [sp, #52]	; 0x34
  404212:	990c      	ldr	r1, [sp, #48]	; 0x30
  404214:	aa2b      	add	r2, sp, #172	; 0xac
  404216:	f004 f98b 	bl	408530 <__ssprint_r>
  40421a:	2800      	cmp	r0, #0
  40421c:	f47f ab90 	bne.w	403940 <_svfprintf_r+0x230>
  404220:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404224:	ae38      	add	r6, sp, #224	; 0xe0
  404226:	e4e5      	b.n	403bf4 <_svfprintf_r+0x4e4>
  404228:	980d      	ldr	r0, [sp, #52]	; 0x34
  40422a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40422c:	aa2b      	add	r2, sp, #172	; 0xac
  40422e:	f004 f97f 	bl	408530 <__ssprint_r>
  404232:	2800      	cmp	r0, #0
  404234:	f43f ad37 	beq.w	403ca6 <_svfprintf_r+0x596>
  404238:	f7ff bb82 	b.w	403940 <_svfprintf_r+0x230>
  40423c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40423e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404240:	aa2b      	add	r2, sp, #172	; 0xac
  404242:	f004 f975 	bl	408530 <__ssprint_r>
  404246:	2800      	cmp	r0, #0
  404248:	f47f ab7a 	bne.w	403940 <_svfprintf_r+0x230>
  40424c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404250:	ae38      	add	r6, sp, #224	; 0xe0
  404252:	e4bf      	b.n	403bd4 <_svfprintf_r+0x4c4>
  404254:	980d      	ldr	r0, [sp, #52]	; 0x34
  404256:	990c      	ldr	r1, [sp, #48]	; 0x30
  404258:	aa2b      	add	r2, sp, #172	; 0xac
  40425a:	f004 f969 	bl	408530 <__ssprint_r>
  40425e:	2800      	cmp	r0, #0
  404260:	f47f ab6e 	bne.w	403940 <_svfprintf_r+0x230>
  404264:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404268:	ae38      	add	r6, sp, #224	; 0xe0
  40426a:	e46d      	b.n	403b48 <_svfprintf_r+0x438>
  40426c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40426e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404270:	aa2b      	add	r2, sp, #172	; 0xac
  404272:	f004 f95d 	bl	408530 <__ssprint_r>
  404276:	2800      	cmp	r0, #0
  404278:	f47f ab62 	bne.w	403940 <_svfprintf_r+0x230>
  40427c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404280:	ae38      	add	r6, sp, #224	; 0xe0
  404282:	e450      	b.n	403b26 <_svfprintf_r+0x416>
  404284:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404286:	af38      	add	r7, sp, #224	; 0xe0
  404288:	f7ff bbd0 	b.w	403a2c <_svfprintf_r+0x31c>
  40428c:	2302      	movs	r3, #2
  40428e:	f7ff bba9 	b.w	4039e4 <_svfprintf_r+0x2d4>
  404292:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404294:	2b00      	cmp	r3, #0
  404296:	f340 81dd 	ble.w	404654 <_svfprintf_r+0xf44>
  40429a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40429c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40429e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  4042a2:	42ac      	cmp	r4, r5
  4042a4:	bfa8      	it	ge
  4042a6:	462c      	movge	r4, r5
  4042a8:	2c00      	cmp	r4, #0
  4042aa:	44ba      	add	sl, r7
  4042ac:	dd0b      	ble.n	4042c6 <_svfprintf_r+0xbb6>
  4042ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4042b0:	44a4      	add	ip, r4
  4042b2:	3301      	adds	r3, #1
  4042b4:	2b07      	cmp	r3, #7
  4042b6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4042ba:	6037      	str	r7, [r6, #0]
  4042bc:	6074      	str	r4, [r6, #4]
  4042be:	932c      	str	r3, [sp, #176]	; 0xb0
  4042c0:	f300 831e 	bgt.w	404900 <_svfprintf_r+0x11f0>
  4042c4:	3608      	adds	r6, #8
  4042c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4042c8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  4042cc:	1b2c      	subs	r4, r5, r4
  4042ce:	2c00      	cmp	r4, #0
  4042d0:	f340 80d7 	ble.w	404482 <_svfprintf_r+0xd72>
  4042d4:	2c10      	cmp	r4, #16
  4042d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4042d8:	4d07      	ldr	r5, [pc, #28]	; (4042f8 <_svfprintf_r+0xbe8>)
  4042da:	f340 81a3 	ble.w	404624 <_svfprintf_r+0xf14>
  4042de:	970a      	str	r7, [sp, #40]	; 0x28
  4042e0:	f04f 0810 	mov.w	r8, #16
  4042e4:	462f      	mov	r7, r5
  4042e6:	4662      	mov	r2, ip
  4042e8:	4625      	mov	r5, r4
  4042ea:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  4042ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4042f0:	e009      	b.n	404306 <_svfprintf_r+0xbf6>
  4042f2:	bf00      	nop
  4042f4:	0040b714 	.word	0x0040b714
  4042f8:	0040b6c4 	.word	0x0040b6c4
  4042fc:	3608      	adds	r6, #8
  4042fe:	3d10      	subs	r5, #16
  404300:	2d10      	cmp	r5, #16
  404302:	f340 818b 	ble.w	40461c <_svfprintf_r+0xf0c>
  404306:	3301      	adds	r3, #1
  404308:	3210      	adds	r2, #16
  40430a:	2b07      	cmp	r3, #7
  40430c:	922d      	str	r2, [sp, #180]	; 0xb4
  40430e:	932c      	str	r3, [sp, #176]	; 0xb0
  404310:	e886 0180 	stmia.w	r6, {r7, r8}
  404314:	ddf2      	ble.n	4042fc <_svfprintf_r+0xbec>
  404316:	4658      	mov	r0, fp
  404318:	4621      	mov	r1, r4
  40431a:	aa2b      	add	r2, sp, #172	; 0xac
  40431c:	f004 f908 	bl	408530 <__ssprint_r>
  404320:	2800      	cmp	r0, #0
  404322:	f47f ab0d 	bne.w	403940 <_svfprintf_r+0x230>
  404326:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  404328:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40432a:	ae38      	add	r6, sp, #224	; 0xe0
  40432c:	e7e7      	b.n	4042fe <_svfprintf_r+0xbee>
  40432e:	980d      	ldr	r0, [sp, #52]	; 0x34
  404330:	990c      	ldr	r1, [sp, #48]	; 0x30
  404332:	aa2b      	add	r2, sp, #172	; 0xac
  404334:	f004 f8fc 	bl	408530 <__ssprint_r>
  404338:	2800      	cmp	r0, #0
  40433a:	f47f ab01 	bne.w	403940 <_svfprintf_r+0x230>
  40433e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  404342:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404346:	ae38      	add	r6, sp, #224	; 0xe0
  404348:	f7ff bbda 	b.w	403b00 <_svfprintf_r+0x3f0>
  40434c:	1e6f      	subs	r7, r5, #1
  40434e:	2f00      	cmp	r7, #0
  404350:	f77f af50 	ble.w	4041f4 <_svfprintf_r+0xae4>
  404354:	2f10      	cmp	r7, #16
  404356:	4dae      	ldr	r5, [pc, #696]	; (404610 <_svfprintf_r+0xf00>)
  404358:	dd23      	ble.n	4043a2 <_svfprintf_r+0xc92>
  40435a:	4643      	mov	r3, r8
  40435c:	f04f 0a10 	mov.w	sl, #16
  404360:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404364:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404368:	e004      	b.n	404374 <_svfprintf_r+0xc64>
  40436a:	3f10      	subs	r7, #16
  40436c:	2f10      	cmp	r7, #16
  40436e:	f106 0608 	add.w	r6, r6, #8
  404372:	dd15      	ble.n	4043a0 <_svfprintf_r+0xc90>
  404374:	3401      	adds	r4, #1
  404376:	3310      	adds	r3, #16
  404378:	2c07      	cmp	r4, #7
  40437a:	932d      	str	r3, [sp, #180]	; 0xb4
  40437c:	942c      	str	r4, [sp, #176]	; 0xb0
  40437e:	e886 0420 	stmia.w	r6, {r5, sl}
  404382:	ddf2      	ble.n	40436a <_svfprintf_r+0xc5a>
  404384:	4640      	mov	r0, r8
  404386:	4659      	mov	r1, fp
  404388:	aa2b      	add	r2, sp, #172	; 0xac
  40438a:	f004 f8d1 	bl	408530 <__ssprint_r>
  40438e:	2800      	cmp	r0, #0
  404390:	f47f aad6 	bne.w	403940 <_svfprintf_r+0x230>
  404394:	3f10      	subs	r7, #16
  404396:	2f10      	cmp	r7, #16
  404398:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40439a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40439c:	ae38      	add	r6, sp, #224	; 0xe0
  40439e:	dce9      	bgt.n	404374 <_svfprintf_r+0xc64>
  4043a0:	4698      	mov	r8, r3
  4043a2:	3401      	adds	r4, #1
  4043a4:	44b8      	add	r8, r7
  4043a6:	2c07      	cmp	r4, #7
  4043a8:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4043ac:	942c      	str	r4, [sp, #176]	; 0xb0
  4043ae:	e886 00a0 	stmia.w	r6, {r5, r7}
  4043b2:	f77f af1e 	ble.w	4041f2 <_svfprintf_r+0xae2>
  4043b6:	980d      	ldr	r0, [sp, #52]	; 0x34
  4043b8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4043ba:	aa2b      	add	r2, sp, #172	; 0xac
  4043bc:	f004 f8b8 	bl	408530 <__ssprint_r>
  4043c0:	2800      	cmp	r0, #0
  4043c2:	f47f aabd 	bne.w	403940 <_svfprintf_r+0x230>
  4043c6:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  4043ca:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4043cc:	ae38      	add	r6, sp, #224	; 0xe0
  4043ce:	e711      	b.n	4041f4 <_svfprintf_r+0xae4>
  4043d0:	4694      	mov	ip, r2
  4043d2:	3301      	adds	r3, #1
  4043d4:	44a4      	add	ip, r4
  4043d6:	2b07      	cmp	r3, #7
  4043d8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4043dc:	932c      	str	r3, [sp, #176]	; 0xb0
  4043de:	6035      	str	r5, [r6, #0]
  4043e0:	6074      	str	r4, [r6, #4]
  4043e2:	f77f ac06 	ble.w	403bf2 <_svfprintf_r+0x4e2>
  4043e6:	e713      	b.n	404210 <_svfprintf_r+0xb00>
  4043e8:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  4043ec:	4620      	mov	r0, r4
  4043ee:	4629      	mov	r1, r5
  4043f0:	220a      	movs	r2, #10
  4043f2:	2300      	movs	r3, #0
  4043f4:	f006 fa30 	bl	40a858 <__aeabi_uldivmod>
  4043f8:	3230      	adds	r2, #48	; 0x30
  4043fa:	f88b 2000 	strb.w	r2, [fp]
  4043fe:	4620      	mov	r0, r4
  404400:	4629      	mov	r1, r5
  404402:	220a      	movs	r2, #10
  404404:	2300      	movs	r3, #0
  404406:	f006 fa27 	bl	40a858 <__aeabi_uldivmod>
  40440a:	4604      	mov	r4, r0
  40440c:	460d      	mov	r5, r1
  40440e:	ea54 0c05 	orrs.w	ip, r4, r5
  404412:	465f      	mov	r7, fp
  404414:	f10b 3bff 	add.w	fp, fp, #4294967295
  404418:	d1e8      	bne.n	4043ec <_svfprintf_r+0xcdc>
  40441a:	9d08      	ldr	r5, [sp, #32]
  40441c:	1bec      	subs	r4, r5, r7
  40441e:	f7ff bb05 	b.w	403a2c <_svfprintf_r+0x31c>
  404422:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404424:	2301      	movs	r3, #1
  404426:	682c      	ldr	r4, [r5, #0]
  404428:	3504      	adds	r5, #4
  40442a:	9510      	str	r5, [sp, #64]	; 0x40
  40442c:	2500      	movs	r5, #0
  40442e:	f7ff bad9 	b.w	4039e4 <_svfprintf_r+0x2d4>
  404432:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404434:	682c      	ldr	r4, [r5, #0]
  404436:	3504      	adds	r5, #4
  404438:	9510      	str	r5, [sp, #64]	; 0x40
  40443a:	2500      	movs	r5, #0
  40443c:	f7ff bad2 	b.w	4039e4 <_svfprintf_r+0x2d4>
  404440:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404442:	682c      	ldr	r4, [r5, #0]
  404444:	3504      	adds	r5, #4
  404446:	9510      	str	r5, [sp, #64]	; 0x40
  404448:	17e5      	asrs	r5, r4, #31
  40444a:	4622      	mov	r2, r4
  40444c:	462b      	mov	r3, r5
  40444e:	2a00      	cmp	r2, #0
  404450:	f173 0c00 	sbcs.w	ip, r3, #0
  404454:	f6bf ac6c 	bge.w	403d30 <_svfprintf_r+0x620>
  404458:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40445c:	4264      	negs	r4, r4
  40445e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404462:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  404466:	2301      	movs	r3, #1
  404468:	f7ff bac0 	b.w	4039ec <_svfprintf_r+0x2dc>
  40446c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40446e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404470:	aa2b      	add	r2, sp, #172	; 0xac
  404472:	f004 f85d 	bl	408530 <__ssprint_r>
  404476:	2800      	cmp	r0, #0
  404478:	f47f aa62 	bne.w	403940 <_svfprintf_r+0x230>
  40447c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404480:	ae38      	add	r6, sp, #224	; 0xe0
  404482:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404484:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404486:	442f      	add	r7, r5
  404488:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40448a:	42ac      	cmp	r4, r5
  40448c:	db42      	blt.n	404514 <_svfprintf_r+0xe04>
  40448e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404490:	07e9      	lsls	r1, r5, #31
  404492:	d43f      	bmi.n	404514 <_svfprintf_r+0xe04>
  404494:	9811      	ldr	r0, [sp, #68]	; 0x44
  404496:	ebc7 050a 	rsb	r5, r7, sl
  40449a:	1b04      	subs	r4, r0, r4
  40449c:	42ac      	cmp	r4, r5
  40449e:	bfb8      	it	lt
  4044a0:	4625      	movlt	r5, r4
  4044a2:	2d00      	cmp	r5, #0
  4044a4:	dd0b      	ble.n	4044be <_svfprintf_r+0xdae>
  4044a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4044a8:	44ac      	add	ip, r5
  4044aa:	3301      	adds	r3, #1
  4044ac:	2b07      	cmp	r3, #7
  4044ae:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4044b2:	6037      	str	r7, [r6, #0]
  4044b4:	6075      	str	r5, [r6, #4]
  4044b6:	932c      	str	r3, [sp, #176]	; 0xb0
  4044b8:	f300 824c 	bgt.w	404954 <_svfprintf_r+0x1244>
  4044bc:	3608      	adds	r6, #8
  4044be:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  4044c2:	1b64      	subs	r4, r4, r5
  4044c4:	2c00      	cmp	r4, #0
  4044c6:	f77f ab95 	ble.w	403bf4 <_svfprintf_r+0x4e4>
  4044ca:	2c10      	cmp	r4, #16
  4044cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4044ce:	4d50      	ldr	r5, [pc, #320]	; (404610 <_svfprintf_r+0xf00>)
  4044d0:	f77f af7f 	ble.w	4043d2 <_svfprintf_r+0xcc2>
  4044d4:	2710      	movs	r7, #16
  4044d6:	4662      	mov	r2, ip
  4044d8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4044dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  4044e0:	e004      	b.n	4044ec <_svfprintf_r+0xddc>
  4044e2:	3608      	adds	r6, #8
  4044e4:	3c10      	subs	r4, #16
  4044e6:	2c10      	cmp	r4, #16
  4044e8:	f77f af72 	ble.w	4043d0 <_svfprintf_r+0xcc0>
  4044ec:	3301      	adds	r3, #1
  4044ee:	3210      	adds	r2, #16
  4044f0:	2b07      	cmp	r3, #7
  4044f2:	922d      	str	r2, [sp, #180]	; 0xb4
  4044f4:	932c      	str	r3, [sp, #176]	; 0xb0
  4044f6:	e886 00a0 	stmia.w	r6, {r5, r7}
  4044fa:	ddf2      	ble.n	4044e2 <_svfprintf_r+0xdd2>
  4044fc:	4640      	mov	r0, r8
  4044fe:	4651      	mov	r1, sl
  404500:	aa2b      	add	r2, sp, #172	; 0xac
  404502:	f004 f815 	bl	408530 <__ssprint_r>
  404506:	2800      	cmp	r0, #0
  404508:	f47f aa1a 	bne.w	403940 <_svfprintf_r+0x230>
  40450c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40450e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404510:	ae38      	add	r6, sp, #224	; 0xe0
  404512:	e7e7      	b.n	4044e4 <_svfprintf_r+0xdd4>
  404514:	9d18      	ldr	r5, [sp, #96]	; 0x60
  404516:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404518:	44ac      	add	ip, r5
  40451a:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40451c:	3301      	adds	r3, #1
  40451e:	6035      	str	r5, [r6, #0]
  404520:	9d18      	ldr	r5, [sp, #96]	; 0x60
  404522:	2b07      	cmp	r3, #7
  404524:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404528:	6075      	str	r5, [r6, #4]
  40452a:	932c      	str	r3, [sp, #176]	; 0xb0
  40452c:	f300 81f4 	bgt.w	404918 <_svfprintf_r+0x1208>
  404530:	3608      	adds	r6, #8
  404532:	e7af      	b.n	404494 <_svfprintf_r+0xd84>
  404534:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404536:	07ea      	lsls	r2, r5, #31
  404538:	f53f ae2a 	bmi.w	404190 <_svfprintf_r+0xa80>
  40453c:	3401      	adds	r4, #1
  40453e:	f10c 0801 	add.w	r8, ip, #1
  404542:	2301      	movs	r3, #1
  404544:	2c07      	cmp	r4, #7
  404546:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40454a:	942c      	str	r4, [sp, #176]	; 0xb0
  40454c:	6037      	str	r7, [r6, #0]
  40454e:	6073      	str	r3, [r6, #4]
  404550:	f77f ae4f 	ble.w	4041f2 <_svfprintf_r+0xae2>
  404554:	e72f      	b.n	4043b6 <_svfprintf_r+0xca6>
  404556:	980d      	ldr	r0, [sp, #52]	; 0x34
  404558:	990c      	ldr	r1, [sp, #48]	; 0x30
  40455a:	aa2b      	add	r2, sp, #172	; 0xac
  40455c:	f003 ffe8 	bl	408530 <__ssprint_r>
  404560:	2800      	cmp	r0, #0
  404562:	f47f a9ed 	bne.w	403940 <_svfprintf_r+0x230>
  404566:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  404568:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40456a:	ae38      	add	r6, sp, #224	; 0xe0
  40456c:	e61c      	b.n	4041a8 <_svfprintf_r+0xa98>
  40456e:	980d      	ldr	r0, [sp, #52]	; 0x34
  404570:	990c      	ldr	r1, [sp, #48]	; 0x30
  404572:	aa2b      	add	r2, sp, #172	; 0xac
  404574:	f003 ffdc 	bl	408530 <__ssprint_r>
  404578:	2800      	cmp	r0, #0
  40457a:	f47f a9e1 	bne.w	403940 <_svfprintf_r+0x230>
  40457e:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  404582:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  404584:	ae38      	add	r6, sp, #224	; 0xe0
  404586:	e61e      	b.n	4041c6 <_svfprintf_r+0xab6>
  404588:	980d      	ldr	r0, [sp, #52]	; 0x34
  40458a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40458c:	aa2b      	add	r2, sp, #172	; 0xac
  40458e:	f003 ffcf 	bl	408530 <__ssprint_r>
  404592:	2800      	cmp	r0, #0
  404594:	f47f a9d4 	bne.w	403940 <_svfprintf_r+0x230>
  404598:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40459c:	ae38      	add	r6, sp, #224	; 0xe0
  40459e:	f7ff bad7 	b.w	403b50 <_svfprintf_r+0x440>
  4045a2:	f003 ff49 	bl	408438 <__fpclassifyd>
  4045a6:	2800      	cmp	r0, #0
  4045a8:	f040 80bb 	bne.w	404722 <_svfprintf_r+0x1012>
  4045ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4045ae:	4f19      	ldr	r7, [pc, #100]	; (404614 <_svfprintf_r+0xf04>)
  4045b0:	4b19      	ldr	r3, [pc, #100]	; (404618 <_svfprintf_r+0xf08>)
  4045b2:	f04f 0c03 	mov.w	ip, #3
  4045b6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  4045ba:	9409      	str	r4, [sp, #36]	; 0x24
  4045bc:	900a      	str	r0, [sp, #40]	; 0x28
  4045be:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4045c2:	9014      	str	r0, [sp, #80]	; 0x50
  4045c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4045c8:	bfd8      	it	le
  4045ca:	461f      	movle	r7, r3
  4045cc:	4664      	mov	r4, ip
  4045ce:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4045d2:	f7ff ba34 	b.w	403a3e <_svfprintf_r+0x32e>
  4045d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4045d8:	0664      	lsls	r4, r4, #25
  4045da:	f140 8150 	bpl.w	40487e <_svfprintf_r+0x116e>
  4045de:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4045e2:	2500      	movs	r5, #0
  4045e4:	f8bc 4000 	ldrh.w	r4, [ip]
  4045e8:	f10c 0c04 	add.w	ip, ip, #4
  4045ec:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4045f0:	f7ff b9e4 	b.w	4039bc <_svfprintf_r+0x2ac>
  4045f4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4045f8:	f01c 0f10 	tst.w	ip, #16
  4045fc:	f000 8146 	beq.w	40488c <_svfprintf_r+0x117c>
  404600:	9c10      	ldr	r4, [sp, #64]	; 0x40
  404602:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404604:	6823      	ldr	r3, [r4, #0]
  404606:	3404      	adds	r4, #4
  404608:	9410      	str	r4, [sp, #64]	; 0x40
  40460a:	601d      	str	r5, [r3, #0]
  40460c:	f7ff b8a6 	b.w	40375c <_svfprintf_r+0x4c>
  404610:	0040b6c4 	.word	0x0040b6c4
  404614:	0040b6e0 	.word	0x0040b6e0
  404618:	0040b6dc 	.word	0x0040b6dc
  40461c:	462c      	mov	r4, r5
  40461e:	463d      	mov	r5, r7
  404620:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404622:	4694      	mov	ip, r2
  404624:	3301      	adds	r3, #1
  404626:	44a4      	add	ip, r4
  404628:	2b07      	cmp	r3, #7
  40462a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40462e:	932c      	str	r3, [sp, #176]	; 0xb0
  404630:	6035      	str	r5, [r6, #0]
  404632:	6074      	str	r4, [r6, #4]
  404634:	f73f af1a 	bgt.w	40446c <_svfprintf_r+0xd5c>
  404638:	3608      	adds	r6, #8
  40463a:	e722      	b.n	404482 <_svfprintf_r+0xd72>
  40463c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40463e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404640:	aa2b      	add	r2, sp, #172	; 0xac
  404642:	f003 ff75 	bl	408530 <__ssprint_r>
  404646:	2800      	cmp	r0, #0
  404648:	f47f a97a 	bne.w	403940 <_svfprintf_r+0x230>
  40464c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404650:	ae38      	add	r6, sp, #224	; 0xe0
  404652:	e507      	b.n	404064 <_svfprintf_r+0x954>
  404654:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  404656:	49b7      	ldr	r1, [pc, #732]	; (404934 <_svfprintf_r+0x1224>)
  404658:	3201      	adds	r2, #1
  40465a:	f10c 0c01 	add.w	ip, ip, #1
  40465e:	2001      	movs	r0, #1
  404660:	2a07      	cmp	r2, #7
  404662:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404666:	922c      	str	r2, [sp, #176]	; 0xb0
  404668:	6031      	str	r1, [r6, #0]
  40466a:	6070      	str	r0, [r6, #4]
  40466c:	f300 80f7 	bgt.w	40485e <_svfprintf_r+0x114e>
  404670:	3608      	adds	r6, #8
  404672:	461c      	mov	r4, r3
  404674:	b92c      	cbnz	r4, 404682 <_svfprintf_r+0xf72>
  404676:	9d11      	ldr	r5, [sp, #68]	; 0x44
  404678:	b91d      	cbnz	r5, 404682 <_svfprintf_r+0xf72>
  40467a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40467c:	07e8      	lsls	r0, r5, #31
  40467e:	f57f aab9 	bpl.w	403bf4 <_svfprintf_r+0x4e4>
  404682:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404684:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404686:	9918      	ldr	r1, [sp, #96]	; 0x60
  404688:	3301      	adds	r3, #1
  40468a:	6035      	str	r5, [r6, #0]
  40468c:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40468e:	4461      	add	r1, ip
  404690:	2b07      	cmp	r3, #7
  404692:	912d      	str	r1, [sp, #180]	; 0xb4
  404694:	6075      	str	r5, [r6, #4]
  404696:	932c      	str	r3, [sp, #176]	; 0xb0
  404698:	f300 81de 	bgt.w	404a58 <_svfprintf_r+0x1348>
  40469c:	f106 0208 	add.w	r2, r6, #8
  4046a0:	4264      	negs	r4, r4
  4046a2:	2c00      	cmp	r4, #0
  4046a4:	f340 810b 	ble.w	4048be <_svfprintf_r+0x11ae>
  4046a8:	2c10      	cmp	r4, #16
  4046aa:	4da3      	ldr	r5, [pc, #652]	; (404938 <_svfprintf_r+0x1228>)
  4046ac:	f340 8148 	ble.w	404940 <_svfprintf_r+0x1230>
  4046b0:	46a3      	mov	fp, r4
  4046b2:	2610      	movs	r6, #16
  4046b4:	460c      	mov	r4, r1
  4046b6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4046ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  4046be:	e006      	b.n	4046ce <_svfprintf_r+0xfbe>
  4046c0:	3208      	adds	r2, #8
  4046c2:	f1ab 0b10 	sub.w	fp, fp, #16
  4046c6:	f1bb 0f10 	cmp.w	fp, #16
  4046ca:	f340 8137 	ble.w	40493c <_svfprintf_r+0x122c>
  4046ce:	3301      	adds	r3, #1
  4046d0:	3410      	adds	r4, #16
  4046d2:	2b07      	cmp	r3, #7
  4046d4:	942d      	str	r4, [sp, #180]	; 0xb4
  4046d6:	932c      	str	r3, [sp, #176]	; 0xb0
  4046d8:	e882 0060 	stmia.w	r2, {r5, r6}
  4046dc:	ddf0      	ble.n	4046c0 <_svfprintf_r+0xfb0>
  4046de:	4640      	mov	r0, r8
  4046e0:	4651      	mov	r1, sl
  4046e2:	aa2b      	add	r2, sp, #172	; 0xac
  4046e4:	f003 ff24 	bl	408530 <__ssprint_r>
  4046e8:	2800      	cmp	r0, #0
  4046ea:	f47f a929 	bne.w	403940 <_svfprintf_r+0x230>
  4046ee:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  4046f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4046f2:	aa38      	add	r2, sp, #224	; 0xe0
  4046f4:	e7e5      	b.n	4046c2 <_svfprintf_r+0xfb2>
  4046f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4046f8:	f109 0901 	add.w	r9, r9, #1
  4046fc:	f044 0420 	orr.w	r4, r4, #32
  404700:	9409      	str	r4, [sp, #36]	; 0x24
  404702:	f893 8001 	ldrb.w	r8, [r3, #1]
  404706:	f7ff b85f 	b.w	4037c8 <_svfprintf_r+0xb8>
  40470a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40470c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40470e:	aa2b      	add	r2, sp, #172	; 0xac
  404710:	f003 ff0e 	bl	408530 <__ssprint_r>
  404714:	2800      	cmp	r0, #0
  404716:	f47f a913 	bne.w	403940 <_svfprintf_r+0x230>
  40471a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40471e:	ae38      	add	r6, sp, #224	; 0xe0
  404720:	e4b6      	b.n	404090 <_svfprintf_r+0x980>
  404722:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404724:	f028 0a20 	bic.w	sl, r8, #32
  404728:	3501      	adds	r5, #1
  40472a:	f000 80a5 	beq.w	404878 <_svfprintf_r+0x1168>
  40472e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404732:	d104      	bne.n	40473e <_svfprintf_r+0x102e>
  404734:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404736:	2d00      	cmp	r5, #0
  404738:	bf08      	it	eq
  40473a:	2501      	moveq	r5, #1
  40473c:	950a      	str	r5, [sp, #40]	; 0x28
  40473e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  404742:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404746:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  40474a:	2b00      	cmp	r3, #0
  40474c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  404750:	f2c0 819c 	blt.w	404a8c <_svfprintf_r+0x137c>
  404754:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  404758:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  40475c:	f04f 0b00 	mov.w	fp, #0
  404760:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  404764:	f000 819b 	beq.w	404a9e <_svfprintf_r+0x138e>
  404768:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  40476c:	f000 81a9 	beq.w	404ac2 <_svfprintf_r+0x13b2>
  404770:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  404774:	bf0a      	itet	eq
  404776:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  404778:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40477a:	1c65      	addeq	r5, r4, #1
  40477c:	2002      	movs	r0, #2
  40477e:	a925      	add	r1, sp, #148	; 0x94
  404780:	aa26      	add	r2, sp, #152	; 0x98
  404782:	ab29      	add	r3, sp, #164	; 0xa4
  404784:	e88d 0021 	stmia.w	sp, {r0, r5}
  404788:	9203      	str	r2, [sp, #12]
  40478a:	9304      	str	r3, [sp, #16]
  40478c:	9102      	str	r1, [sp, #8]
  40478e:	980d      	ldr	r0, [sp, #52]	; 0x34
  404790:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  404794:	f001 f9f4 	bl	405b80 <_dtoa_r>
  404798:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40479c:	4607      	mov	r7, r0
  40479e:	d002      	beq.n	4047a6 <_svfprintf_r+0x1096>
  4047a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4047a4:	d105      	bne.n	4047b2 <_svfprintf_r+0x10a2>
  4047a6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4047aa:	f01c 0f01 	tst.w	ip, #1
  4047ae:	f000 819c 	beq.w	404aea <_svfprintf_r+0x13da>
  4047b2:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  4047b6:	eb07 0405 	add.w	r4, r7, r5
  4047ba:	f000 811c 	beq.w	4049f6 <_svfprintf_r+0x12e6>
  4047be:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4047c2:	2200      	movs	r2, #0
  4047c4:	2300      	movs	r3, #0
  4047c6:	f005 ffed 	bl	40a7a4 <__aeabi_dcmpeq>
  4047ca:	2800      	cmp	r0, #0
  4047cc:	f040 8105 	bne.w	4049da <_svfprintf_r+0x12ca>
  4047d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4047d2:	429c      	cmp	r4, r3
  4047d4:	d906      	bls.n	4047e4 <_svfprintf_r+0x10d4>
  4047d6:	2130      	movs	r1, #48	; 0x30
  4047d8:	1c5a      	adds	r2, r3, #1
  4047da:	9229      	str	r2, [sp, #164]	; 0xa4
  4047dc:	7019      	strb	r1, [r3, #0]
  4047de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4047e0:	429c      	cmp	r4, r3
  4047e2:	d8f9      	bhi.n	4047d8 <_svfprintf_r+0x10c8>
  4047e4:	1bdb      	subs	r3, r3, r7
  4047e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4047ea:	9311      	str	r3, [sp, #68]	; 0x44
  4047ec:	f000 80ed 	beq.w	4049ca <_svfprintf_r+0x12ba>
  4047f0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4047f4:	f340 81f2 	ble.w	404bdc <_svfprintf_r+0x14cc>
  4047f8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4047fc:	f000 8168 	beq.w	404ad0 <_svfprintf_r+0x13c0>
  404800:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404802:	9414      	str	r4, [sp, #80]	; 0x50
  404804:	9c11      	ldr	r4, [sp, #68]	; 0x44
  404806:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404808:	42ac      	cmp	r4, r5
  40480a:	f300 8132 	bgt.w	404a72 <_svfprintf_r+0x1362>
  40480e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  404812:	f01c 0f01 	tst.w	ip, #1
  404816:	f040 81ad 	bne.w	404b74 <_svfprintf_r+0x1464>
  40481a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40481e:	462c      	mov	r4, r5
  404820:	f04f 0867 	mov.w	r8, #103	; 0x67
  404824:	f1bb 0f00 	cmp.w	fp, #0
  404828:	f040 80b2 	bne.w	404990 <_svfprintf_r+0x1280>
  40482c:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40482e:	930b      	str	r3, [sp, #44]	; 0x2c
  404830:	9509      	str	r5, [sp, #36]	; 0x24
  404832:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  404836:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40483a:	f7ff b900 	b.w	403a3e <_svfprintf_r+0x32e>
  40483e:	980d      	ldr	r0, [sp, #52]	; 0x34
  404840:	2140      	movs	r1, #64	; 0x40
  404842:	f002 fdbf 	bl	4073c4 <_malloc_r>
  404846:	6020      	str	r0, [r4, #0]
  404848:	6120      	str	r0, [r4, #16]
  40484a:	2800      	cmp	r0, #0
  40484c:	f000 81bf 	beq.w	404bce <_svfprintf_r+0x14be>
  404850:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  404854:	2340      	movs	r3, #64	; 0x40
  404856:	f8cc 3014 	str.w	r3, [ip, #20]
  40485a:	f7fe bf6f 	b.w	40373c <_svfprintf_r+0x2c>
  40485e:	980d      	ldr	r0, [sp, #52]	; 0x34
  404860:	990c      	ldr	r1, [sp, #48]	; 0x30
  404862:	aa2b      	add	r2, sp, #172	; 0xac
  404864:	f003 fe64 	bl	408530 <__ssprint_r>
  404868:	2800      	cmp	r0, #0
  40486a:	f47f a869 	bne.w	403940 <_svfprintf_r+0x230>
  40486e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404870:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404874:	ae38      	add	r6, sp, #224	; 0xe0
  404876:	e6fd      	b.n	404674 <_svfprintf_r+0xf64>
  404878:	2406      	movs	r4, #6
  40487a:	940a      	str	r4, [sp, #40]	; 0x28
  40487c:	e75f      	b.n	40473e <_svfprintf_r+0x102e>
  40487e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404880:	682c      	ldr	r4, [r5, #0]
  404882:	3504      	adds	r5, #4
  404884:	9510      	str	r5, [sp, #64]	; 0x40
  404886:	2500      	movs	r5, #0
  404888:	f7ff b898 	b.w	4039bc <_svfprintf_r+0x2ac>
  40488c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  404890:	f01c 0f40 	tst.w	ip, #64	; 0x40
  404894:	f000 8087 	beq.w	4049a6 <_svfprintf_r+0x1296>
  404898:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40489a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40489c:	6823      	ldr	r3, [r4, #0]
  40489e:	3404      	adds	r4, #4
  4048a0:	9410      	str	r4, [sp, #64]	; 0x40
  4048a2:	801d      	strh	r5, [r3, #0]
  4048a4:	f7fe bf5a 	b.w	40375c <_svfprintf_r+0x4c>
  4048a8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4048aa:	990c      	ldr	r1, [sp, #48]	; 0x30
  4048ac:	aa2b      	add	r2, sp, #172	; 0xac
  4048ae:	f003 fe3f 	bl	408530 <__ssprint_r>
  4048b2:	2800      	cmp	r0, #0
  4048b4:	f47f a844 	bne.w	403940 <_svfprintf_r+0x230>
  4048b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
  4048ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4048bc:	aa38      	add	r2, sp, #224	; 0xe0
  4048be:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  4048c2:	3301      	adds	r3, #1
  4048c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4048c6:	448c      	add	ip, r1
  4048c8:	2b07      	cmp	r3, #7
  4048ca:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4048ce:	932c      	str	r3, [sp, #176]	; 0xb0
  4048d0:	6017      	str	r7, [r2, #0]
  4048d2:	6054      	str	r4, [r2, #4]
  4048d4:	f73f ac9c 	bgt.w	404210 <_svfprintf_r+0xb00>
  4048d8:	f102 0608 	add.w	r6, r2, #8
  4048dc:	f7ff b98a 	b.w	403bf4 <_svfprintf_r+0x4e4>
  4048e0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4048e4:	f7fe feb2 	bl	40364c <strlen>
  4048e8:	9510      	str	r5, [sp, #64]	; 0x40
  4048ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4048ec:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  4048f0:	4604      	mov	r4, r0
  4048f2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4048f6:	9514      	str	r5, [sp, #80]	; 0x50
  4048f8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4048fc:	f7ff b89f 	b.w	403a3e <_svfprintf_r+0x32e>
  404900:	980d      	ldr	r0, [sp, #52]	; 0x34
  404902:	990c      	ldr	r1, [sp, #48]	; 0x30
  404904:	aa2b      	add	r2, sp, #172	; 0xac
  404906:	f003 fe13 	bl	408530 <__ssprint_r>
  40490a:	2800      	cmp	r0, #0
  40490c:	f47f a818 	bne.w	403940 <_svfprintf_r+0x230>
  404910:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404914:	ae38      	add	r6, sp, #224	; 0xe0
  404916:	e4d6      	b.n	4042c6 <_svfprintf_r+0xbb6>
  404918:	980d      	ldr	r0, [sp, #52]	; 0x34
  40491a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40491c:	aa2b      	add	r2, sp, #172	; 0xac
  40491e:	f003 fe07 	bl	408530 <__ssprint_r>
  404922:	2800      	cmp	r0, #0
  404924:	f47f a80c 	bne.w	403940 <_svfprintf_r+0x230>
  404928:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40492a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40492e:	ae38      	add	r6, sp, #224	; 0xe0
  404930:	e5b0      	b.n	404494 <_svfprintf_r+0xd84>
  404932:	bf00      	nop
  404934:	0040b714 	.word	0x0040b714
  404938:	0040b6c4 	.word	0x0040b6c4
  40493c:	4621      	mov	r1, r4
  40493e:	465c      	mov	r4, fp
  404940:	3301      	adds	r3, #1
  404942:	4421      	add	r1, r4
  404944:	2b07      	cmp	r3, #7
  404946:	912d      	str	r1, [sp, #180]	; 0xb4
  404948:	932c      	str	r3, [sp, #176]	; 0xb0
  40494a:	6015      	str	r5, [r2, #0]
  40494c:	6054      	str	r4, [r2, #4]
  40494e:	dcab      	bgt.n	4048a8 <_svfprintf_r+0x1198>
  404950:	3208      	adds	r2, #8
  404952:	e7b4      	b.n	4048be <_svfprintf_r+0x11ae>
  404954:	980d      	ldr	r0, [sp, #52]	; 0x34
  404956:	990c      	ldr	r1, [sp, #48]	; 0x30
  404958:	aa2b      	add	r2, sp, #172	; 0xac
  40495a:	f003 fde9 	bl	408530 <__ssprint_r>
  40495e:	2800      	cmp	r0, #0
  404960:	f47e afee 	bne.w	403940 <_svfprintf_r+0x230>
  404964:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404966:	9911      	ldr	r1, [sp, #68]	; 0x44
  404968:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40496c:	1b0c      	subs	r4, r1, r4
  40496e:	ae38      	add	r6, sp, #224	; 0xe0
  404970:	e5a5      	b.n	4044be <_svfprintf_r+0xdae>
  404972:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404974:	46ba      	mov	sl, r7
  404976:	2c06      	cmp	r4, #6
  404978:	bf28      	it	cs
  40497a:	2406      	movcs	r4, #6
  40497c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  404980:	970a      	str	r7, [sp, #40]	; 0x28
  404982:	9714      	str	r7, [sp, #80]	; 0x50
  404984:	9510      	str	r5, [sp, #64]	; 0x40
  404986:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40498a:	4f97      	ldr	r7, [pc, #604]	; (404be8 <_svfprintf_r+0x14d8>)
  40498c:	f7ff b857 	b.w	403a3e <_svfprintf_r+0x32e>
  404990:	9d12      	ldr	r5, [sp, #72]	; 0x48
  404992:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404996:	9509      	str	r5, [sp, #36]	; 0x24
  404998:	2500      	movs	r5, #0
  40499a:	930b      	str	r3, [sp, #44]	; 0x2c
  40499c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4049a0:	950a      	str	r5, [sp, #40]	; 0x28
  4049a2:	f7ff b84f 	b.w	403a44 <_svfprintf_r+0x334>
  4049a6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4049aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4049ac:	f8dc 3000 	ldr.w	r3, [ip]
  4049b0:	f10c 0c04 	add.w	ip, ip, #4
  4049b4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4049b8:	601c      	str	r4, [r3, #0]
  4049ba:	f7fe becf 	b.w	40375c <_svfprintf_r+0x4c>
  4049be:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4049c2:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4049c6:	f7ff ba99 	b.w	403efc <_svfprintf_r+0x7ec>
  4049ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4049cc:	1cdc      	adds	r4, r3, #3
  4049ce:	db19      	blt.n	404a04 <_svfprintf_r+0x12f4>
  4049d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4049d2:	429c      	cmp	r4, r3
  4049d4:	db16      	blt.n	404a04 <_svfprintf_r+0x12f4>
  4049d6:	9314      	str	r3, [sp, #80]	; 0x50
  4049d8:	e714      	b.n	404804 <_svfprintf_r+0x10f4>
  4049da:	4623      	mov	r3, r4
  4049dc:	e702      	b.n	4047e4 <_svfprintf_r+0x10d4>
  4049de:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4049e2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4049e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4049e8:	9510      	str	r5, [sp, #64]	; 0x40
  4049ea:	900a      	str	r0, [sp, #40]	; 0x28
  4049ec:	9014      	str	r0, [sp, #80]	; 0x50
  4049ee:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4049f2:	f7ff b824 	b.w	403a3e <_svfprintf_r+0x32e>
  4049f6:	783b      	ldrb	r3, [r7, #0]
  4049f8:	2b30      	cmp	r3, #48	; 0x30
  4049fa:	f000 80ad 	beq.w	404b58 <_svfprintf_r+0x1448>
  4049fe:	9d25      	ldr	r5, [sp, #148]	; 0x94
  404a00:	442c      	add	r4, r5
  404a02:	e6dc      	b.n	4047be <_svfprintf_r+0x10ae>
  404a04:	f1a8 0802 	sub.w	r8, r8, #2
  404a08:	1e59      	subs	r1, r3, #1
  404a0a:	2900      	cmp	r1, #0
  404a0c:	9125      	str	r1, [sp, #148]	; 0x94
  404a0e:	bfba      	itte	lt
  404a10:	4249      	neglt	r1, r1
  404a12:	232d      	movlt	r3, #45	; 0x2d
  404a14:	232b      	movge	r3, #43	; 0x2b
  404a16:	2909      	cmp	r1, #9
  404a18:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  404a1c:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
  404a20:	dc65      	bgt.n	404aee <_svfprintf_r+0x13de>
  404a22:	2330      	movs	r3, #48	; 0x30
  404a24:	3130      	adds	r1, #48	; 0x30
  404a26:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
  404a2a:	f88d 109f 	strb.w	r1, [sp, #159]	; 0x9f
  404a2e:	ab28      	add	r3, sp, #160	; 0xa0
  404a30:	9d11      	ldr	r5, [sp, #68]	; 0x44
  404a32:	aa27      	add	r2, sp, #156	; 0x9c
  404a34:	9c11      	ldr	r4, [sp, #68]	; 0x44
  404a36:	1a9a      	subs	r2, r3, r2
  404a38:	2d01      	cmp	r5, #1
  404a3a:	9219      	str	r2, [sp, #100]	; 0x64
  404a3c:	4414      	add	r4, r2
  404a3e:	f340 80b7 	ble.w	404bb0 <_svfprintf_r+0x14a0>
  404a42:	3401      	adds	r4, #1
  404a44:	2500      	movs	r5, #0
  404a46:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404a4a:	9514      	str	r5, [sp, #80]	; 0x50
  404a4c:	e6ea      	b.n	404824 <_svfprintf_r+0x1114>
  404a4e:	2400      	movs	r4, #0
  404a50:	4681      	mov	r9, r0
  404a52:	940a      	str	r4, [sp, #40]	; 0x28
  404a54:	f7fe beba 	b.w	4037cc <_svfprintf_r+0xbc>
  404a58:	980d      	ldr	r0, [sp, #52]	; 0x34
  404a5a:	990c      	ldr	r1, [sp, #48]	; 0x30
  404a5c:	aa2b      	add	r2, sp, #172	; 0xac
  404a5e:	f003 fd67 	bl	408530 <__ssprint_r>
  404a62:	2800      	cmp	r0, #0
  404a64:	f47e af6c 	bne.w	403940 <_svfprintf_r+0x230>
  404a68:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404a6a:	992d      	ldr	r1, [sp, #180]	; 0xb4
  404a6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404a6e:	aa38      	add	r2, sp, #224	; 0xe0
  404a70:	e616      	b.n	4046a0 <_svfprintf_r+0xf90>
  404a72:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404a74:	9d11      	ldr	r5, [sp, #68]	; 0x44
  404a76:	2c00      	cmp	r4, #0
  404a78:	bfd4      	ite	le
  404a7a:	f1c4 0402 	rsble	r4, r4, #2
  404a7e:	2401      	movgt	r4, #1
  404a80:	442c      	add	r4, r5
  404a82:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404a86:	f04f 0867 	mov.w	r8, #103	; 0x67
  404a8a:	e6cb      	b.n	404824 <_svfprintf_r+0x1114>
  404a8c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404a8e:	9816      	ldr	r0, [sp, #88]	; 0x58
  404a90:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404a94:	9020      	str	r0, [sp, #128]	; 0x80
  404a96:	9121      	str	r1, [sp, #132]	; 0x84
  404a98:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  404a9c:	e660      	b.n	404760 <_svfprintf_r+0x1050>
  404a9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404aa0:	2003      	movs	r0, #3
  404aa2:	a925      	add	r1, sp, #148	; 0x94
  404aa4:	aa26      	add	r2, sp, #152	; 0x98
  404aa6:	ab29      	add	r3, sp, #164	; 0xa4
  404aa8:	9501      	str	r5, [sp, #4]
  404aaa:	9000      	str	r0, [sp, #0]
  404aac:	9203      	str	r2, [sp, #12]
  404aae:	9304      	str	r3, [sp, #16]
  404ab0:	9102      	str	r1, [sp, #8]
  404ab2:	980d      	ldr	r0, [sp, #52]	; 0x34
  404ab4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  404ab8:	f001 f862 	bl	405b80 <_dtoa_r>
  404abc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404abe:	4607      	mov	r7, r0
  404ac0:	e677      	b.n	4047b2 <_svfprintf_r+0x10a2>
  404ac2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404ac4:	2003      	movs	r0, #3
  404ac6:	a925      	add	r1, sp, #148	; 0x94
  404ac8:	aa26      	add	r2, sp, #152	; 0x98
  404aca:	ab29      	add	r3, sp, #164	; 0xa4
  404acc:	9401      	str	r4, [sp, #4]
  404ace:	e7ec      	b.n	404aaa <_svfprintf_r+0x139a>
  404ad0:	9d25      	ldr	r5, [sp, #148]	; 0x94
  404ad2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404ad4:	2d00      	cmp	r5, #0
  404ad6:	9514      	str	r5, [sp, #80]	; 0x50
  404ad8:	dd63      	ble.n	404ba2 <_svfprintf_r+0x1492>
  404ada:	bbb4      	cbnz	r4, 404b4a <_svfprintf_r+0x143a>
  404adc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404ade:	07e8      	lsls	r0, r5, #31
  404ae0:	d433      	bmi.n	404b4a <_svfprintf_r+0x143a>
  404ae2:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404ae4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404ae8:	e69c      	b.n	404824 <_svfprintf_r+0x1114>
  404aea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  404aec:	e67a      	b.n	4047e4 <_svfprintf_r+0x10d4>
  404aee:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
  404af2:	4d3e      	ldr	r5, [pc, #248]	; (404bec <_svfprintf_r+0x14dc>)
  404af4:	17cb      	asrs	r3, r1, #31
  404af6:	fb85 5001 	smull	r5, r0, r5, r1
  404afa:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
  404afe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  404b02:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
  404b06:	2809      	cmp	r0, #9
  404b08:	4613      	mov	r3, r2
  404b0a:	f101 0230 	add.w	r2, r1, #48	; 0x30
  404b0e:	701a      	strb	r2, [r3, #0]
  404b10:	4601      	mov	r1, r0
  404b12:	f103 32ff 	add.w	r2, r3, #4294967295
  404b16:	dcec      	bgt.n	404af2 <_svfprintf_r+0x13e2>
  404b18:	f100 0130 	add.w	r1, r0, #48	; 0x30
  404b1c:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  404b20:	b2c9      	uxtb	r1, r1
  404b22:	4294      	cmp	r4, r2
  404b24:	f803 1c01 	strb.w	r1, [r3, #-1]
  404b28:	d95a      	bls.n	404be0 <_svfprintf_r+0x14d0>
  404b2a:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  404b2e:	461a      	mov	r2, r3
  404b30:	e001      	b.n	404b36 <_svfprintf_r+0x1426>
  404b32:	f812 1b01 	ldrb.w	r1, [r2], #1
  404b36:	42a2      	cmp	r2, r4
  404b38:	f800 1f01 	strb.w	r1, [r0, #1]!
  404b3c:	d1f9      	bne.n	404b32 <_svfprintf_r+0x1422>
  404b3e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  404b42:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  404b46:	3bf6      	subs	r3, #246	; 0xf6
  404b48:	e772      	b.n	404a30 <_svfprintf_r+0x1320>
  404b4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404b4c:	1c6c      	adds	r4, r5, #1
  404b4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404b50:	442c      	add	r4, r5
  404b52:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404b56:	e665      	b.n	404824 <_svfprintf_r+0x1114>
  404b58:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  404b5c:	2200      	movs	r2, #0
  404b5e:	2300      	movs	r3, #0
  404b60:	f005 fe20 	bl	40a7a4 <__aeabi_dcmpeq>
  404b64:	2800      	cmp	r0, #0
  404b66:	f47f af4a 	bne.w	4049fe <_svfprintf_r+0x12ee>
  404b6a:	f1c5 0501 	rsb	r5, r5, #1
  404b6e:	9525      	str	r5, [sp, #148]	; 0x94
  404b70:	442c      	add	r4, r5
  404b72:	e624      	b.n	4047be <_svfprintf_r+0x10ae>
  404b74:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404b76:	f04f 0867 	mov.w	r8, #103	; 0x67
  404b7a:	1c6c      	adds	r4, r5, #1
  404b7c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404b80:	e650      	b.n	404824 <_svfprintf_r+0x1114>
  404b82:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404b84:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  404b88:	682d      	ldr	r5, [r5, #0]
  404b8a:	f10c 0304 	add.w	r3, ip, #4
  404b8e:	2d00      	cmp	r5, #0
  404b90:	f899 8001 	ldrb.w	r8, [r9, #1]
  404b94:	950a      	str	r5, [sp, #40]	; 0x28
  404b96:	9310      	str	r3, [sp, #64]	; 0x40
  404b98:	4681      	mov	r9, r0
  404b9a:	f6be ae15 	bge.w	4037c8 <_svfprintf_r+0xb8>
  404b9e:	f7fe be10 	b.w	4037c2 <_svfprintf_r+0xb2>
  404ba2:	b97c      	cbnz	r4, 404bc4 <_svfprintf_r+0x14b4>
  404ba4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404ba6:	07e9      	lsls	r1, r5, #31
  404ba8:	d40c      	bmi.n	404bc4 <_svfprintf_r+0x14b4>
  404baa:	2301      	movs	r3, #1
  404bac:	461c      	mov	r4, r3
  404bae:	e639      	b.n	404824 <_svfprintf_r+0x1114>
  404bb0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  404bb4:	f01c 0301 	ands.w	r3, ip, #1
  404bb8:	f47f af43 	bne.w	404a42 <_svfprintf_r+0x1332>
  404bbc:	9314      	str	r3, [sp, #80]	; 0x50
  404bbe:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404bc2:	e62f      	b.n	404824 <_svfprintf_r+0x1114>
  404bc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404bc6:	1cac      	adds	r4, r5, #2
  404bc8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404bcc:	e62a      	b.n	404824 <_svfprintf_r+0x1114>
  404bce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  404bd0:	230c      	movs	r3, #12
  404bd2:	602b      	str	r3, [r5, #0]
  404bd4:	f04f 30ff 	mov.w	r0, #4294967295
  404bd8:	f7fe beba 	b.w	403950 <_svfprintf_r+0x240>
  404bdc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404bde:	e713      	b.n	404a08 <_svfprintf_r+0x12f8>
  404be0:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  404be4:	e724      	b.n	404a30 <_svfprintf_r+0x1320>
  404be6:	bf00      	nop
  404be8:	0040b70c 	.word	0x0040b70c
  404bec:	66666667 	.word	0x66666667

00404bf0 <__sprint_r.part.0>:
  404bf0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404bf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404bf6:	049c      	lsls	r4, r3, #18
  404bf8:	460e      	mov	r6, r1
  404bfa:	4680      	mov	r8, r0
  404bfc:	4691      	mov	r9, r2
  404bfe:	d52a      	bpl.n	404c56 <__sprint_r.part.0+0x66>
  404c00:	6893      	ldr	r3, [r2, #8]
  404c02:	6812      	ldr	r2, [r2, #0]
  404c04:	f102 0a08 	add.w	sl, r2, #8
  404c08:	b31b      	cbz	r3, 404c52 <__sprint_r.part.0+0x62>
  404c0a:	e91a 00a0 	ldmdb	sl, {r5, r7}
  404c0e:	08bf      	lsrs	r7, r7, #2
  404c10:	d017      	beq.n	404c42 <__sprint_r.part.0+0x52>
  404c12:	3d04      	subs	r5, #4
  404c14:	2400      	movs	r4, #0
  404c16:	e001      	b.n	404c1c <__sprint_r.part.0+0x2c>
  404c18:	42a7      	cmp	r7, r4
  404c1a:	d010      	beq.n	404c3e <__sprint_r.part.0+0x4e>
  404c1c:	4640      	mov	r0, r8
  404c1e:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404c22:	4632      	mov	r2, r6
  404c24:	f002 f81e 	bl	406c64 <_fputwc_r>
  404c28:	1c43      	adds	r3, r0, #1
  404c2a:	f104 0401 	add.w	r4, r4, #1
  404c2e:	d1f3      	bne.n	404c18 <__sprint_r.part.0+0x28>
  404c30:	2300      	movs	r3, #0
  404c32:	f8c9 3008 	str.w	r3, [r9, #8]
  404c36:	f8c9 3004 	str.w	r3, [r9, #4]
  404c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404c3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
  404c42:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  404c46:	f8c9 3008 	str.w	r3, [r9, #8]
  404c4a:	f10a 0a08 	add.w	sl, sl, #8
  404c4e:	2b00      	cmp	r3, #0
  404c50:	d1db      	bne.n	404c0a <__sprint_r.part.0+0x1a>
  404c52:	2000      	movs	r0, #0
  404c54:	e7ec      	b.n	404c30 <__sprint_r.part.0+0x40>
  404c56:	f002 f97f 	bl	406f58 <__sfvwrite_r>
  404c5a:	2300      	movs	r3, #0
  404c5c:	f8c9 3008 	str.w	r3, [r9, #8]
  404c60:	f8c9 3004 	str.w	r3, [r9, #4]
  404c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404c68 <__sprint_r>:
  404c68:	6893      	ldr	r3, [r2, #8]
  404c6a:	b410      	push	{r4}
  404c6c:	b11b      	cbz	r3, 404c76 <__sprint_r+0xe>
  404c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  404c72:	f7ff bfbd 	b.w	404bf0 <__sprint_r.part.0>
  404c76:	4618      	mov	r0, r3
  404c78:	6053      	str	r3, [r2, #4]
  404c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  404c7e:	4770      	bx	lr

00404c80 <_vfiprintf_r>:
  404c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c84:	b0b1      	sub	sp, #196	; 0xc4
  404c86:	461c      	mov	r4, r3
  404c88:	9102      	str	r1, [sp, #8]
  404c8a:	4690      	mov	r8, r2
  404c8c:	9308      	str	r3, [sp, #32]
  404c8e:	9006      	str	r0, [sp, #24]
  404c90:	b118      	cbz	r0, 404c9a <_vfiprintf_r+0x1a>
  404c92:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c94:	2b00      	cmp	r3, #0
  404c96:	f000 80e8 	beq.w	404e6a <_vfiprintf_r+0x1ea>
  404c9a:	9d02      	ldr	r5, [sp, #8]
  404c9c:	89ab      	ldrh	r3, [r5, #12]
  404c9e:	b29a      	uxth	r2, r3
  404ca0:	0490      	lsls	r0, r2, #18
  404ca2:	d407      	bmi.n	404cb4 <_vfiprintf_r+0x34>
  404ca4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  404ca6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404caa:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  404cae:	81ab      	strh	r3, [r5, #12]
  404cb0:	b29a      	uxth	r2, r3
  404cb2:	6669      	str	r1, [r5, #100]	; 0x64
  404cb4:	0711      	lsls	r1, r2, #28
  404cb6:	f140 80b7 	bpl.w	404e28 <_vfiprintf_r+0x1a8>
  404cba:	f8dd b008 	ldr.w	fp, [sp, #8]
  404cbe:	f8db 3010 	ldr.w	r3, [fp, #16]
  404cc2:	2b00      	cmp	r3, #0
  404cc4:	f000 80b0 	beq.w	404e28 <_vfiprintf_r+0x1a8>
  404cc8:	f002 021a 	and.w	r2, r2, #26
  404ccc:	2a0a      	cmp	r2, #10
  404cce:	f000 80b7 	beq.w	404e40 <_vfiprintf_r+0x1c0>
  404cd2:	2300      	movs	r3, #0
  404cd4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  404cd8:	930a      	str	r3, [sp, #40]	; 0x28
  404cda:	9315      	str	r3, [sp, #84]	; 0x54
  404cdc:	9314      	str	r3, [sp, #80]	; 0x50
  404cde:	9309      	str	r3, [sp, #36]	; 0x24
  404ce0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  404ce4:	464e      	mov	r6, r9
  404ce6:	f898 3000 	ldrb.w	r3, [r8]
  404cea:	2b00      	cmp	r3, #0
  404cec:	f000 84c8 	beq.w	405680 <_vfiprintf_r+0xa00>
  404cf0:	2b25      	cmp	r3, #37	; 0x25
  404cf2:	f000 84c5 	beq.w	405680 <_vfiprintf_r+0xa00>
  404cf6:	f108 0201 	add.w	r2, r8, #1
  404cfa:	e001      	b.n	404d00 <_vfiprintf_r+0x80>
  404cfc:	2b25      	cmp	r3, #37	; 0x25
  404cfe:	d004      	beq.n	404d0a <_vfiprintf_r+0x8a>
  404d00:	7813      	ldrb	r3, [r2, #0]
  404d02:	4614      	mov	r4, r2
  404d04:	3201      	adds	r2, #1
  404d06:	2b00      	cmp	r3, #0
  404d08:	d1f8      	bne.n	404cfc <_vfiprintf_r+0x7c>
  404d0a:	ebc8 0504 	rsb	r5, r8, r4
  404d0e:	b195      	cbz	r5, 404d36 <_vfiprintf_r+0xb6>
  404d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404d12:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404d14:	3301      	adds	r3, #1
  404d16:	442a      	add	r2, r5
  404d18:	2b07      	cmp	r3, #7
  404d1a:	f8c6 8000 	str.w	r8, [r6]
  404d1e:	6075      	str	r5, [r6, #4]
  404d20:	9215      	str	r2, [sp, #84]	; 0x54
  404d22:	9314      	str	r3, [sp, #80]	; 0x50
  404d24:	dd7b      	ble.n	404e1e <_vfiprintf_r+0x19e>
  404d26:	2a00      	cmp	r2, #0
  404d28:	f040 84d5 	bne.w	4056d6 <_vfiprintf_r+0xa56>
  404d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
  404d2e:	9214      	str	r2, [sp, #80]	; 0x50
  404d30:	4428      	add	r0, r5
  404d32:	464e      	mov	r6, r9
  404d34:	9009      	str	r0, [sp, #36]	; 0x24
  404d36:	7823      	ldrb	r3, [r4, #0]
  404d38:	2b00      	cmp	r3, #0
  404d3a:	f000 83ed 	beq.w	405518 <_vfiprintf_r+0x898>
  404d3e:	2100      	movs	r1, #0
  404d40:	f04f 0200 	mov.w	r2, #0
  404d44:	f04f 3cff 	mov.w	ip, #4294967295
  404d48:	7863      	ldrb	r3, [r4, #1]
  404d4a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  404d4e:	9104      	str	r1, [sp, #16]
  404d50:	468a      	mov	sl, r1
  404d52:	f104 0801 	add.w	r8, r4, #1
  404d56:	4608      	mov	r0, r1
  404d58:	4665      	mov	r5, ip
  404d5a:	f108 0801 	add.w	r8, r8, #1
  404d5e:	f1a3 0220 	sub.w	r2, r3, #32
  404d62:	2a58      	cmp	r2, #88	; 0x58
  404d64:	f200 82d9 	bhi.w	40531a <_vfiprintf_r+0x69a>
  404d68:	e8df f012 	tbh	[pc, r2, lsl #1]
  404d6c:	02d702cb 	.word	0x02d702cb
  404d70:	02d202d7 	.word	0x02d202d7
  404d74:	02d702d7 	.word	0x02d702d7
  404d78:	02d702d7 	.word	0x02d702d7
  404d7c:	02d702d7 	.word	0x02d702d7
  404d80:	028f0282 	.word	0x028f0282
  404d84:	008402d7 	.word	0x008402d7
  404d88:	02d70293 	.word	0x02d70293
  404d8c:	0196012b 	.word	0x0196012b
  404d90:	01960196 	.word	0x01960196
  404d94:	01960196 	.word	0x01960196
  404d98:	01960196 	.word	0x01960196
  404d9c:	01960196 	.word	0x01960196
  404da0:	02d702d7 	.word	0x02d702d7
  404da4:	02d702d7 	.word	0x02d702d7
  404da8:	02d702d7 	.word	0x02d702d7
  404dac:	02d702d7 	.word	0x02d702d7
  404db0:	02d702d7 	.word	0x02d702d7
  404db4:	02d70130 	.word	0x02d70130
  404db8:	02d702d7 	.word	0x02d702d7
  404dbc:	02d702d7 	.word	0x02d702d7
  404dc0:	02d702d7 	.word	0x02d702d7
  404dc4:	02d702d7 	.word	0x02d702d7
  404dc8:	017b02d7 	.word	0x017b02d7
  404dcc:	02d702d7 	.word	0x02d702d7
  404dd0:	02d702d7 	.word	0x02d702d7
  404dd4:	01a402d7 	.word	0x01a402d7
  404dd8:	02d702d7 	.word	0x02d702d7
  404ddc:	02d701bf 	.word	0x02d701bf
  404de0:	02d702d7 	.word	0x02d702d7
  404de4:	02d702d7 	.word	0x02d702d7
  404de8:	02d702d7 	.word	0x02d702d7
  404dec:	02d702d7 	.word	0x02d702d7
  404df0:	01e402d7 	.word	0x01e402d7
  404df4:	02d701fa 	.word	0x02d701fa
  404df8:	02d702d7 	.word	0x02d702d7
  404dfc:	01fa0216 	.word	0x01fa0216
  404e00:	02d702d7 	.word	0x02d702d7
  404e04:	02d7021b 	.word	0x02d7021b
  404e08:	00890228 	.word	0x00890228
  404e0c:	027d0266 	.word	0x027d0266
  404e10:	023a02d7 	.word	0x023a02d7
  404e14:	011902d7 	.word	0x011902d7
  404e18:	02d702d7 	.word	0x02d702d7
  404e1c:	02af      	.short	0x02af
  404e1e:	3608      	adds	r6, #8
  404e20:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e22:	4428      	add	r0, r5
  404e24:	9009      	str	r0, [sp, #36]	; 0x24
  404e26:	e786      	b.n	404d36 <_vfiprintf_r+0xb6>
  404e28:	9806      	ldr	r0, [sp, #24]
  404e2a:	9902      	ldr	r1, [sp, #8]
  404e2c:	f000 fd9a 	bl	405964 <__swsetup_r>
  404e30:	b9b0      	cbnz	r0, 404e60 <_vfiprintf_r+0x1e0>
  404e32:	9d02      	ldr	r5, [sp, #8]
  404e34:	89aa      	ldrh	r2, [r5, #12]
  404e36:	f002 021a 	and.w	r2, r2, #26
  404e3a:	2a0a      	cmp	r2, #10
  404e3c:	f47f af49 	bne.w	404cd2 <_vfiprintf_r+0x52>
  404e40:	f8dd b008 	ldr.w	fp, [sp, #8]
  404e44:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404e48:	2b00      	cmp	r3, #0
  404e4a:	f6ff af42 	blt.w	404cd2 <_vfiprintf_r+0x52>
  404e4e:	9806      	ldr	r0, [sp, #24]
  404e50:	4659      	mov	r1, fp
  404e52:	4642      	mov	r2, r8
  404e54:	4623      	mov	r3, r4
  404e56:	f000 fd3d 	bl	4058d4 <__sbprintf>
  404e5a:	b031      	add	sp, #196	; 0xc4
  404e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e60:	f04f 30ff 	mov.w	r0, #4294967295
  404e64:	b031      	add	sp, #196	; 0xc4
  404e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e6a:	f001 fe65 	bl	406b38 <__sinit>
  404e6e:	e714      	b.n	404c9a <_vfiprintf_r+0x1a>
  404e70:	4240      	negs	r0, r0
  404e72:	9308      	str	r3, [sp, #32]
  404e74:	f04a 0a04 	orr.w	sl, sl, #4
  404e78:	f898 3000 	ldrb.w	r3, [r8]
  404e7c:	e76d      	b.n	404d5a <_vfiprintf_r+0xda>
  404e7e:	f01a 0320 	ands.w	r3, sl, #32
  404e82:	9004      	str	r0, [sp, #16]
  404e84:	46ac      	mov	ip, r5
  404e86:	f000 80f4 	beq.w	405072 <_vfiprintf_r+0x3f2>
  404e8a:	f8dd b020 	ldr.w	fp, [sp, #32]
  404e8e:	f10b 0307 	add.w	r3, fp, #7
  404e92:	f023 0307 	bic.w	r3, r3, #7
  404e96:	f103 0408 	add.w	r4, r3, #8
  404e9a:	9408      	str	r4, [sp, #32]
  404e9c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404ea0:	2300      	movs	r3, #0
  404ea2:	f04f 0000 	mov.w	r0, #0
  404ea6:	2100      	movs	r1, #0
  404ea8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  404eac:	f8cd c014 	str.w	ip, [sp, #20]
  404eb0:	9107      	str	r1, [sp, #28]
  404eb2:	f1bc 0f00 	cmp.w	ip, #0
  404eb6:	bfa8      	it	ge
  404eb8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  404ebc:	ea54 0205 	orrs.w	r2, r4, r5
  404ec0:	f040 80ad 	bne.w	40501e <_vfiprintf_r+0x39e>
  404ec4:	f1bc 0f00 	cmp.w	ip, #0
  404ec8:	f040 80a9 	bne.w	40501e <_vfiprintf_r+0x39e>
  404ecc:	2b00      	cmp	r3, #0
  404ece:	f040 83c0 	bne.w	405652 <_vfiprintf_r+0x9d2>
  404ed2:	f01a 0f01 	tst.w	sl, #1
  404ed6:	f000 83bc 	beq.w	405652 <_vfiprintf_r+0x9d2>
  404eda:	2330      	movs	r3, #48	; 0x30
  404edc:	af30      	add	r7, sp, #192	; 0xc0
  404ede:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404ee2:	ebc7 0409 	rsb	r4, r7, r9
  404ee6:	9405      	str	r4, [sp, #20]
  404ee8:	f8dd b014 	ldr.w	fp, [sp, #20]
  404eec:	9c07      	ldr	r4, [sp, #28]
  404eee:	45e3      	cmp	fp, ip
  404ef0:	bfb8      	it	lt
  404ef2:	46e3      	movlt	fp, ip
  404ef4:	f8cd b00c 	str.w	fp, [sp, #12]
  404ef8:	b11c      	cbz	r4, 404f02 <_vfiprintf_r+0x282>
  404efa:	f10b 0b01 	add.w	fp, fp, #1
  404efe:	f8cd b00c 	str.w	fp, [sp, #12]
  404f02:	f01a 0502 	ands.w	r5, sl, #2
  404f06:	9507      	str	r5, [sp, #28]
  404f08:	d005      	beq.n	404f16 <_vfiprintf_r+0x296>
  404f0a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  404f0e:	f10b 0b02 	add.w	fp, fp, #2
  404f12:	f8cd b00c 	str.w	fp, [sp, #12]
  404f16:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  404f1a:	930b      	str	r3, [sp, #44]	; 0x2c
  404f1c:	f040 821b 	bne.w	405356 <_vfiprintf_r+0x6d6>
  404f20:	9d04      	ldr	r5, [sp, #16]
  404f22:	f8dd b00c 	ldr.w	fp, [sp, #12]
  404f26:	ebcb 0405 	rsb	r4, fp, r5
  404f2a:	2c00      	cmp	r4, #0
  404f2c:	f340 8213 	ble.w	405356 <_vfiprintf_r+0x6d6>
  404f30:	2c10      	cmp	r4, #16
  404f32:	f340 8489 	ble.w	405848 <_vfiprintf_r+0xbc8>
  404f36:	4dbe      	ldr	r5, [pc, #760]	; (405230 <_vfiprintf_r+0x5b0>)
  404f38:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404f3a:	462b      	mov	r3, r5
  404f3c:	9814      	ldr	r0, [sp, #80]	; 0x50
  404f3e:	4625      	mov	r5, r4
  404f40:	f04f 0b10 	mov.w	fp, #16
  404f44:	4664      	mov	r4, ip
  404f46:	46b4      	mov	ip, r6
  404f48:	461e      	mov	r6, r3
  404f4a:	e006      	b.n	404f5a <_vfiprintf_r+0x2da>
  404f4c:	1c83      	adds	r3, r0, #2
  404f4e:	f10c 0c08 	add.w	ip, ip, #8
  404f52:	4608      	mov	r0, r1
  404f54:	3d10      	subs	r5, #16
  404f56:	2d10      	cmp	r5, #16
  404f58:	dd11      	ble.n	404f7e <_vfiprintf_r+0x2fe>
  404f5a:	1c41      	adds	r1, r0, #1
  404f5c:	3210      	adds	r2, #16
  404f5e:	2907      	cmp	r1, #7
  404f60:	9215      	str	r2, [sp, #84]	; 0x54
  404f62:	e88c 0840 	stmia.w	ip, {r6, fp}
  404f66:	9114      	str	r1, [sp, #80]	; 0x50
  404f68:	ddf0      	ble.n	404f4c <_vfiprintf_r+0x2cc>
  404f6a:	2a00      	cmp	r2, #0
  404f6c:	f040 81e6 	bne.w	40533c <_vfiprintf_r+0x6bc>
  404f70:	3d10      	subs	r5, #16
  404f72:	2d10      	cmp	r5, #16
  404f74:	f04f 0301 	mov.w	r3, #1
  404f78:	4610      	mov	r0, r2
  404f7a:	46cc      	mov	ip, r9
  404f7c:	dced      	bgt.n	404f5a <_vfiprintf_r+0x2da>
  404f7e:	4631      	mov	r1, r6
  404f80:	4666      	mov	r6, ip
  404f82:	46a4      	mov	ip, r4
  404f84:	462c      	mov	r4, r5
  404f86:	460d      	mov	r5, r1
  404f88:	4422      	add	r2, r4
  404f8a:	2b07      	cmp	r3, #7
  404f8c:	9215      	str	r2, [sp, #84]	; 0x54
  404f8e:	6035      	str	r5, [r6, #0]
  404f90:	6074      	str	r4, [r6, #4]
  404f92:	9314      	str	r3, [sp, #80]	; 0x50
  404f94:	f300 836d 	bgt.w	405672 <_vfiprintf_r+0x9f2>
  404f98:	3608      	adds	r6, #8
  404f9a:	1c59      	adds	r1, r3, #1
  404f9c:	e1de      	b.n	40535c <_vfiprintf_r+0x6dc>
  404f9e:	f01a 0f20 	tst.w	sl, #32
  404fa2:	9004      	str	r0, [sp, #16]
  404fa4:	46ac      	mov	ip, r5
  404fa6:	f000 808d 	beq.w	4050c4 <_vfiprintf_r+0x444>
  404faa:	9d08      	ldr	r5, [sp, #32]
  404fac:	1deb      	adds	r3, r5, #7
  404fae:	f023 0307 	bic.w	r3, r3, #7
  404fb2:	f103 0b08 	add.w	fp, r3, #8
  404fb6:	e9d3 4500 	ldrd	r4, r5, [r3]
  404fba:	f8cd b020 	str.w	fp, [sp, #32]
  404fbe:	2301      	movs	r3, #1
  404fc0:	e76f      	b.n	404ea2 <_vfiprintf_r+0x222>
  404fc2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  404fc6:	f898 3000 	ldrb.w	r3, [r8]
  404fca:	e6c6      	b.n	404d5a <_vfiprintf_r+0xda>
  404fcc:	f04a 0a10 	orr.w	sl, sl, #16
  404fd0:	f01a 0f20 	tst.w	sl, #32
  404fd4:	9004      	str	r0, [sp, #16]
  404fd6:	46ac      	mov	ip, r5
  404fd8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  404fdc:	f000 80c8 	beq.w	405170 <_vfiprintf_r+0x4f0>
  404fe0:	9c08      	ldr	r4, [sp, #32]
  404fe2:	1de1      	adds	r1, r4, #7
  404fe4:	f021 0107 	bic.w	r1, r1, #7
  404fe8:	e9d1 2300 	ldrd	r2, r3, [r1]
  404fec:	3108      	adds	r1, #8
  404fee:	9108      	str	r1, [sp, #32]
  404ff0:	4614      	mov	r4, r2
  404ff2:	461d      	mov	r5, r3
  404ff4:	2a00      	cmp	r2, #0
  404ff6:	f173 0b00 	sbcs.w	fp, r3, #0
  404ffa:	f2c0 83ce 	blt.w	40579a <_vfiprintf_r+0xb1a>
  404ffe:	f1bc 0f00 	cmp.w	ip, #0
  405002:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  405006:	bfa8      	it	ge
  405008:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40500c:	ea54 0205 	orrs.w	r2, r4, r5
  405010:	9007      	str	r0, [sp, #28]
  405012:	f8cd c014 	str.w	ip, [sp, #20]
  405016:	f04f 0301 	mov.w	r3, #1
  40501a:	f43f af53 	beq.w	404ec4 <_vfiprintf_r+0x244>
  40501e:	2b01      	cmp	r3, #1
  405020:	f000 8319 	beq.w	405656 <_vfiprintf_r+0x9d6>
  405024:	2b02      	cmp	r3, #2
  405026:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  40502a:	f040 824c 	bne.w	4054c6 <_vfiprintf_r+0x846>
  40502e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405032:	4619      	mov	r1, r3
  405034:	f004 000f 	and.w	r0, r4, #15
  405038:	0922      	lsrs	r2, r4, #4
  40503a:	f81b 0000 	ldrb.w	r0, [fp, r0]
  40503e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  405042:	092b      	lsrs	r3, r5, #4
  405044:	7008      	strb	r0, [r1, #0]
  405046:	ea52 0003 	orrs.w	r0, r2, r3
  40504a:	460f      	mov	r7, r1
  40504c:	4614      	mov	r4, r2
  40504e:	461d      	mov	r5, r3
  405050:	f101 31ff 	add.w	r1, r1, #4294967295
  405054:	d1ee      	bne.n	405034 <_vfiprintf_r+0x3b4>
  405056:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40505a:	ebc7 0309 	rsb	r3, r7, r9
  40505e:	9305      	str	r3, [sp, #20]
  405060:	e742      	b.n	404ee8 <_vfiprintf_r+0x268>
  405062:	f04a 0a10 	orr.w	sl, sl, #16
  405066:	f01a 0320 	ands.w	r3, sl, #32
  40506a:	9004      	str	r0, [sp, #16]
  40506c:	46ac      	mov	ip, r5
  40506e:	f47f af0c 	bne.w	404e8a <_vfiprintf_r+0x20a>
  405072:	f01a 0210 	ands.w	r2, sl, #16
  405076:	f040 8311 	bne.w	40569c <_vfiprintf_r+0xa1c>
  40507a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  40507e:	f000 830d 	beq.w	40569c <_vfiprintf_r+0xa1c>
  405082:	f8dd b020 	ldr.w	fp, [sp, #32]
  405086:	4613      	mov	r3, r2
  405088:	f8bb 4000 	ldrh.w	r4, [fp]
  40508c:	f10b 0b04 	add.w	fp, fp, #4
  405090:	2500      	movs	r5, #0
  405092:	f8cd b020 	str.w	fp, [sp, #32]
  405096:	e704      	b.n	404ea2 <_vfiprintf_r+0x222>
  405098:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40509c:	2000      	movs	r0, #0
  40509e:	f818 3b01 	ldrb.w	r3, [r8], #1
  4050a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4050a6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  4050aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4050ae:	2a09      	cmp	r2, #9
  4050b0:	d9f5      	bls.n	40509e <_vfiprintf_r+0x41e>
  4050b2:	e654      	b.n	404d5e <_vfiprintf_r+0xde>
  4050b4:	f04a 0a10 	orr.w	sl, sl, #16
  4050b8:	f01a 0f20 	tst.w	sl, #32
  4050bc:	9004      	str	r0, [sp, #16]
  4050be:	46ac      	mov	ip, r5
  4050c0:	f47f af73 	bne.w	404faa <_vfiprintf_r+0x32a>
  4050c4:	f01a 0f10 	tst.w	sl, #16
  4050c8:	f040 82ef 	bne.w	4056aa <_vfiprintf_r+0xa2a>
  4050cc:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4050d0:	f000 82eb 	beq.w	4056aa <_vfiprintf_r+0xa2a>
  4050d4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4050d8:	2500      	movs	r5, #0
  4050da:	f8bb 4000 	ldrh.w	r4, [fp]
  4050de:	f10b 0b04 	add.w	fp, fp, #4
  4050e2:	2301      	movs	r3, #1
  4050e4:	f8cd b020 	str.w	fp, [sp, #32]
  4050e8:	e6db      	b.n	404ea2 <_vfiprintf_r+0x222>
  4050ea:	46ac      	mov	ip, r5
  4050ec:	4d51      	ldr	r5, [pc, #324]	; (405234 <_vfiprintf_r+0x5b4>)
  4050ee:	f01a 0f20 	tst.w	sl, #32
  4050f2:	9004      	str	r0, [sp, #16]
  4050f4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4050f8:	950a      	str	r5, [sp, #40]	; 0x28
  4050fa:	f000 80f0 	beq.w	4052de <_vfiprintf_r+0x65e>
  4050fe:	9d08      	ldr	r5, [sp, #32]
  405100:	1dea      	adds	r2, r5, #7
  405102:	f022 0207 	bic.w	r2, r2, #7
  405106:	f102 0b08 	add.w	fp, r2, #8
  40510a:	f8cd b020 	str.w	fp, [sp, #32]
  40510e:	e9d2 4500 	ldrd	r4, r5, [r2]
  405112:	f01a 0f01 	tst.w	sl, #1
  405116:	f000 82aa 	beq.w	40566e <_vfiprintf_r+0x9ee>
  40511a:	ea54 0b05 	orrs.w	fp, r4, r5
  40511e:	f000 82a6 	beq.w	40566e <_vfiprintf_r+0x9ee>
  405122:	2230      	movs	r2, #48	; 0x30
  405124:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  405128:	f04a 0a02 	orr.w	sl, sl, #2
  40512c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405130:	2302      	movs	r3, #2
  405132:	e6b6      	b.n	404ea2 <_vfiprintf_r+0x222>
  405134:	9b08      	ldr	r3, [sp, #32]
  405136:	f8dd b020 	ldr.w	fp, [sp, #32]
  40513a:	681b      	ldr	r3, [r3, #0]
  40513c:	2401      	movs	r4, #1
  40513e:	f04f 0500 	mov.w	r5, #0
  405142:	f10b 0b04 	add.w	fp, fp, #4
  405146:	9004      	str	r0, [sp, #16]
  405148:	9403      	str	r4, [sp, #12]
  40514a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40514e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  405152:	f8cd b020 	str.w	fp, [sp, #32]
  405156:	9405      	str	r4, [sp, #20]
  405158:	af16      	add	r7, sp, #88	; 0x58
  40515a:	f04f 0c00 	mov.w	ip, #0
  40515e:	e6d0      	b.n	404f02 <_vfiprintf_r+0x282>
  405160:	f01a 0f20 	tst.w	sl, #32
  405164:	9004      	str	r0, [sp, #16]
  405166:	46ac      	mov	ip, r5
  405168:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40516c:	f47f af38 	bne.w	404fe0 <_vfiprintf_r+0x360>
  405170:	f01a 0f10 	tst.w	sl, #16
  405174:	f040 82a7 	bne.w	4056c6 <_vfiprintf_r+0xa46>
  405178:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40517c:	f000 82a3 	beq.w	4056c6 <_vfiprintf_r+0xa46>
  405180:	f8dd b020 	ldr.w	fp, [sp, #32]
  405184:	f9bb 4000 	ldrsh.w	r4, [fp]
  405188:	f10b 0b04 	add.w	fp, fp, #4
  40518c:	17e5      	asrs	r5, r4, #31
  40518e:	4622      	mov	r2, r4
  405190:	462b      	mov	r3, r5
  405192:	f8cd b020 	str.w	fp, [sp, #32]
  405196:	e72d      	b.n	404ff4 <_vfiprintf_r+0x374>
  405198:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  40519c:	f898 3000 	ldrb.w	r3, [r8]
  4051a0:	e5db      	b.n	404d5a <_vfiprintf_r+0xda>
  4051a2:	f898 3000 	ldrb.w	r3, [r8]
  4051a6:	4642      	mov	r2, r8
  4051a8:	2b6c      	cmp	r3, #108	; 0x6c
  4051aa:	bf03      	ittte	eq
  4051ac:	f108 0801 	addeq.w	r8, r8, #1
  4051b0:	f04a 0a20 	orreq.w	sl, sl, #32
  4051b4:	7853      	ldrbeq	r3, [r2, #1]
  4051b6:	f04a 0a10 	orrne.w	sl, sl, #16
  4051ba:	e5ce      	b.n	404d5a <_vfiprintf_r+0xda>
  4051bc:	f01a 0f20 	tst.w	sl, #32
  4051c0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4051c4:	f000 82f7 	beq.w	4057b6 <_vfiprintf_r+0xb36>
  4051c8:	9c08      	ldr	r4, [sp, #32]
  4051ca:	6821      	ldr	r1, [r4, #0]
  4051cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4051ce:	17e5      	asrs	r5, r4, #31
  4051d0:	462b      	mov	r3, r5
  4051d2:	9d08      	ldr	r5, [sp, #32]
  4051d4:	4622      	mov	r2, r4
  4051d6:	3504      	adds	r5, #4
  4051d8:	9508      	str	r5, [sp, #32]
  4051da:	e9c1 2300 	strd	r2, r3, [r1]
  4051de:	e582      	b.n	404ce6 <_vfiprintf_r+0x66>
  4051e0:	9c08      	ldr	r4, [sp, #32]
  4051e2:	46ac      	mov	ip, r5
  4051e4:	6827      	ldr	r7, [r4, #0]
  4051e6:	f04f 0500 	mov.w	r5, #0
  4051ea:	9004      	str	r0, [sp, #16]
  4051ec:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  4051f0:	3404      	adds	r4, #4
  4051f2:	2f00      	cmp	r7, #0
  4051f4:	f000 8332 	beq.w	40585c <_vfiprintf_r+0xbdc>
  4051f8:	f1bc 0f00 	cmp.w	ip, #0
  4051fc:	4638      	mov	r0, r7
  4051fe:	f2c0 8307 	blt.w	405810 <_vfiprintf_r+0xb90>
  405202:	4662      	mov	r2, ip
  405204:	2100      	movs	r1, #0
  405206:	f8cd c004 	str.w	ip, [sp, #4]
  40520a:	f002 fb77 	bl	4078fc <memchr>
  40520e:	f8dd c004 	ldr.w	ip, [sp, #4]
  405212:	2800      	cmp	r0, #0
  405214:	f000 833a 	beq.w	40588c <_vfiprintf_r+0xc0c>
  405218:	1bc0      	subs	r0, r0, r7
  40521a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  40521e:	4560      	cmp	r0, ip
  405220:	bfa8      	it	ge
  405222:	4660      	movge	r0, ip
  405224:	9005      	str	r0, [sp, #20]
  405226:	9408      	str	r4, [sp, #32]
  405228:	9507      	str	r5, [sp, #28]
  40522a:	f04f 0c00 	mov.w	ip, #0
  40522e:	e65b      	b.n	404ee8 <_vfiprintf_r+0x268>
  405230:	0040b738 	.word	0x0040b738
  405234:	0040b6e4 	.word	0x0040b6e4
  405238:	9b08      	ldr	r3, [sp, #32]
  40523a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40523e:	9004      	str	r0, [sp, #16]
  405240:	48b2      	ldr	r0, [pc, #712]	; (40550c <_vfiprintf_r+0x88c>)
  405242:	681c      	ldr	r4, [r3, #0]
  405244:	2230      	movs	r2, #48	; 0x30
  405246:	2378      	movs	r3, #120	; 0x78
  405248:	f10b 0b04 	add.w	fp, fp, #4
  40524c:	46ac      	mov	ip, r5
  40524e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  405252:	f04a 0a02 	orr.w	sl, sl, #2
  405256:	f8cd b020 	str.w	fp, [sp, #32]
  40525a:	2500      	movs	r5, #0
  40525c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405260:	900a      	str	r0, [sp, #40]	; 0x28
  405262:	2302      	movs	r3, #2
  405264:	e61d      	b.n	404ea2 <_vfiprintf_r+0x222>
  405266:	f04a 0a20 	orr.w	sl, sl, #32
  40526a:	f898 3000 	ldrb.w	r3, [r8]
  40526e:	e574      	b.n	404d5a <_vfiprintf_r+0xda>
  405270:	f8dd b020 	ldr.w	fp, [sp, #32]
  405274:	f8db 0000 	ldr.w	r0, [fp]
  405278:	f10b 0304 	add.w	r3, fp, #4
  40527c:	2800      	cmp	r0, #0
  40527e:	f6ff adf7 	blt.w	404e70 <_vfiprintf_r+0x1f0>
  405282:	9308      	str	r3, [sp, #32]
  405284:	f898 3000 	ldrb.w	r3, [r8]
  405288:	e567      	b.n	404d5a <_vfiprintf_r+0xda>
  40528a:	f898 3000 	ldrb.w	r3, [r8]
  40528e:	212b      	movs	r1, #43	; 0x2b
  405290:	e563      	b.n	404d5a <_vfiprintf_r+0xda>
  405292:	f898 3000 	ldrb.w	r3, [r8]
  405296:	f108 0401 	add.w	r4, r8, #1
  40529a:	2b2a      	cmp	r3, #42	; 0x2a
  40529c:	f000 8305 	beq.w	4058aa <_vfiprintf_r+0xc2a>
  4052a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4052a4:	2a09      	cmp	r2, #9
  4052a6:	bf98      	it	ls
  4052a8:	2500      	movls	r5, #0
  4052aa:	f200 82fa 	bhi.w	4058a2 <_vfiprintf_r+0xc22>
  4052ae:	f814 3b01 	ldrb.w	r3, [r4], #1
  4052b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4052b6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4052ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4052be:	2a09      	cmp	r2, #9
  4052c0:	d9f5      	bls.n	4052ae <_vfiprintf_r+0x62e>
  4052c2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  4052c6:	46a0      	mov	r8, r4
  4052c8:	e549      	b.n	404d5e <_vfiprintf_r+0xde>
  4052ca:	4c90      	ldr	r4, [pc, #576]	; (40550c <_vfiprintf_r+0x88c>)
  4052cc:	f01a 0f20 	tst.w	sl, #32
  4052d0:	9004      	str	r0, [sp, #16]
  4052d2:	46ac      	mov	ip, r5
  4052d4:	940a      	str	r4, [sp, #40]	; 0x28
  4052d6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4052da:	f47f af10 	bne.w	4050fe <_vfiprintf_r+0x47e>
  4052de:	f01a 0f10 	tst.w	sl, #16
  4052e2:	f040 81ea 	bne.w	4056ba <_vfiprintf_r+0xa3a>
  4052e6:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4052ea:	f000 81e6 	beq.w	4056ba <_vfiprintf_r+0xa3a>
  4052ee:	f8dd b020 	ldr.w	fp, [sp, #32]
  4052f2:	2500      	movs	r5, #0
  4052f4:	f8bb 4000 	ldrh.w	r4, [fp]
  4052f8:	f10b 0b04 	add.w	fp, fp, #4
  4052fc:	f8cd b020 	str.w	fp, [sp, #32]
  405300:	e707      	b.n	405112 <_vfiprintf_r+0x492>
  405302:	f898 3000 	ldrb.w	r3, [r8]
  405306:	2900      	cmp	r1, #0
  405308:	f47f ad27 	bne.w	404d5a <_vfiprintf_r+0xda>
  40530c:	2120      	movs	r1, #32
  40530e:	e524      	b.n	404d5a <_vfiprintf_r+0xda>
  405310:	f04a 0a01 	orr.w	sl, sl, #1
  405314:	f898 3000 	ldrb.w	r3, [r8]
  405318:	e51f      	b.n	404d5a <_vfiprintf_r+0xda>
  40531a:	9004      	str	r0, [sp, #16]
  40531c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  405320:	2b00      	cmp	r3, #0
  405322:	f000 80f9 	beq.w	405518 <_vfiprintf_r+0x898>
  405326:	2501      	movs	r5, #1
  405328:	f04f 0b00 	mov.w	fp, #0
  40532c:	9503      	str	r5, [sp, #12]
  40532e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  405332:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  405336:	9505      	str	r5, [sp, #20]
  405338:	af16      	add	r7, sp, #88	; 0x58
  40533a:	e70e      	b.n	40515a <_vfiprintf_r+0x4da>
  40533c:	9806      	ldr	r0, [sp, #24]
  40533e:	9902      	ldr	r1, [sp, #8]
  405340:	aa13      	add	r2, sp, #76	; 0x4c
  405342:	f7ff fc55 	bl	404bf0 <__sprint_r.part.0>
  405346:	2800      	cmp	r0, #0
  405348:	f040 80ed 	bne.w	405526 <_vfiprintf_r+0x8a6>
  40534c:	9814      	ldr	r0, [sp, #80]	; 0x50
  40534e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405350:	1c43      	adds	r3, r0, #1
  405352:	46cc      	mov	ip, r9
  405354:	e5fe      	b.n	404f54 <_vfiprintf_r+0x2d4>
  405356:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405358:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40535a:	1c59      	adds	r1, r3, #1
  40535c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  405360:	b168      	cbz	r0, 40537e <_vfiprintf_r+0x6fe>
  405362:	3201      	adds	r2, #1
  405364:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  405368:	2301      	movs	r3, #1
  40536a:	2907      	cmp	r1, #7
  40536c:	9215      	str	r2, [sp, #84]	; 0x54
  40536e:	9114      	str	r1, [sp, #80]	; 0x50
  405370:	e886 0009 	stmia.w	r6, {r0, r3}
  405374:	f300 8160 	bgt.w	405638 <_vfiprintf_r+0x9b8>
  405378:	460b      	mov	r3, r1
  40537a:	3608      	adds	r6, #8
  40537c:	3101      	adds	r1, #1
  40537e:	9c07      	ldr	r4, [sp, #28]
  405380:	b164      	cbz	r4, 40539c <_vfiprintf_r+0x71c>
  405382:	3202      	adds	r2, #2
  405384:	a812      	add	r0, sp, #72	; 0x48
  405386:	2302      	movs	r3, #2
  405388:	2907      	cmp	r1, #7
  40538a:	9215      	str	r2, [sp, #84]	; 0x54
  40538c:	9114      	str	r1, [sp, #80]	; 0x50
  40538e:	e886 0009 	stmia.w	r6, {r0, r3}
  405392:	f300 8157 	bgt.w	405644 <_vfiprintf_r+0x9c4>
  405396:	460b      	mov	r3, r1
  405398:	3608      	adds	r6, #8
  40539a:	3101      	adds	r1, #1
  40539c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40539e:	2d80      	cmp	r5, #128	; 0x80
  4053a0:	f000 8101 	beq.w	4055a6 <_vfiprintf_r+0x926>
  4053a4:	9d05      	ldr	r5, [sp, #20]
  4053a6:	ebc5 040c 	rsb	r4, r5, ip
  4053aa:	2c00      	cmp	r4, #0
  4053ac:	dd2f      	ble.n	40540e <_vfiprintf_r+0x78e>
  4053ae:	2c10      	cmp	r4, #16
  4053b0:	4d57      	ldr	r5, [pc, #348]	; (405510 <_vfiprintf_r+0x890>)
  4053b2:	dd22      	ble.n	4053fa <_vfiprintf_r+0x77a>
  4053b4:	4630      	mov	r0, r6
  4053b6:	f04f 0b10 	mov.w	fp, #16
  4053ba:	462e      	mov	r6, r5
  4053bc:	4625      	mov	r5, r4
  4053be:	9c06      	ldr	r4, [sp, #24]
  4053c0:	e006      	b.n	4053d0 <_vfiprintf_r+0x750>
  4053c2:	f103 0c02 	add.w	ip, r3, #2
  4053c6:	3008      	adds	r0, #8
  4053c8:	460b      	mov	r3, r1
  4053ca:	3d10      	subs	r5, #16
  4053cc:	2d10      	cmp	r5, #16
  4053ce:	dd10      	ble.n	4053f2 <_vfiprintf_r+0x772>
  4053d0:	1c59      	adds	r1, r3, #1
  4053d2:	3210      	adds	r2, #16
  4053d4:	2907      	cmp	r1, #7
  4053d6:	9215      	str	r2, [sp, #84]	; 0x54
  4053d8:	e880 0840 	stmia.w	r0, {r6, fp}
  4053dc:	9114      	str	r1, [sp, #80]	; 0x50
  4053de:	ddf0      	ble.n	4053c2 <_vfiprintf_r+0x742>
  4053e0:	2a00      	cmp	r2, #0
  4053e2:	d163      	bne.n	4054ac <_vfiprintf_r+0x82c>
  4053e4:	3d10      	subs	r5, #16
  4053e6:	2d10      	cmp	r5, #16
  4053e8:	f04f 0c01 	mov.w	ip, #1
  4053ec:	4613      	mov	r3, r2
  4053ee:	4648      	mov	r0, r9
  4053f0:	dcee      	bgt.n	4053d0 <_vfiprintf_r+0x750>
  4053f2:	462c      	mov	r4, r5
  4053f4:	4661      	mov	r1, ip
  4053f6:	4635      	mov	r5, r6
  4053f8:	4606      	mov	r6, r0
  4053fa:	4422      	add	r2, r4
  4053fc:	2907      	cmp	r1, #7
  4053fe:	9215      	str	r2, [sp, #84]	; 0x54
  405400:	6035      	str	r5, [r6, #0]
  405402:	6074      	str	r4, [r6, #4]
  405404:	9114      	str	r1, [sp, #80]	; 0x50
  405406:	f300 80c1 	bgt.w	40558c <_vfiprintf_r+0x90c>
  40540a:	3608      	adds	r6, #8
  40540c:	3101      	adds	r1, #1
  40540e:	9d05      	ldr	r5, [sp, #20]
  405410:	2907      	cmp	r1, #7
  405412:	442a      	add	r2, r5
  405414:	9215      	str	r2, [sp, #84]	; 0x54
  405416:	6037      	str	r7, [r6, #0]
  405418:	6075      	str	r5, [r6, #4]
  40541a:	9114      	str	r1, [sp, #80]	; 0x50
  40541c:	f340 80c1 	ble.w	4055a2 <_vfiprintf_r+0x922>
  405420:	2a00      	cmp	r2, #0
  405422:	f040 8130 	bne.w	405686 <_vfiprintf_r+0xa06>
  405426:	9214      	str	r2, [sp, #80]	; 0x50
  405428:	464e      	mov	r6, r9
  40542a:	f01a 0f04 	tst.w	sl, #4
  40542e:	f000 808b 	beq.w	405548 <_vfiprintf_r+0x8c8>
  405432:	9d04      	ldr	r5, [sp, #16]
  405434:	f8dd b00c 	ldr.w	fp, [sp, #12]
  405438:	ebcb 0405 	rsb	r4, fp, r5
  40543c:	2c00      	cmp	r4, #0
  40543e:	f340 8083 	ble.w	405548 <_vfiprintf_r+0x8c8>
  405442:	2c10      	cmp	r4, #16
  405444:	f340 821e 	ble.w	405884 <_vfiprintf_r+0xc04>
  405448:	9914      	ldr	r1, [sp, #80]	; 0x50
  40544a:	4d32      	ldr	r5, [pc, #200]	; (405514 <_vfiprintf_r+0x894>)
  40544c:	2710      	movs	r7, #16
  40544e:	f8dd a018 	ldr.w	sl, [sp, #24]
  405452:	f8dd b008 	ldr.w	fp, [sp, #8]
  405456:	e005      	b.n	405464 <_vfiprintf_r+0x7e4>
  405458:	1c88      	adds	r0, r1, #2
  40545a:	3608      	adds	r6, #8
  40545c:	4619      	mov	r1, r3
  40545e:	3c10      	subs	r4, #16
  405460:	2c10      	cmp	r4, #16
  405462:	dd10      	ble.n	405486 <_vfiprintf_r+0x806>
  405464:	1c4b      	adds	r3, r1, #1
  405466:	3210      	adds	r2, #16
  405468:	2b07      	cmp	r3, #7
  40546a:	9215      	str	r2, [sp, #84]	; 0x54
  40546c:	e886 00a0 	stmia.w	r6, {r5, r7}
  405470:	9314      	str	r3, [sp, #80]	; 0x50
  405472:	ddf1      	ble.n	405458 <_vfiprintf_r+0x7d8>
  405474:	2a00      	cmp	r2, #0
  405476:	d17d      	bne.n	405574 <_vfiprintf_r+0x8f4>
  405478:	3c10      	subs	r4, #16
  40547a:	2c10      	cmp	r4, #16
  40547c:	f04f 0001 	mov.w	r0, #1
  405480:	4611      	mov	r1, r2
  405482:	464e      	mov	r6, r9
  405484:	dcee      	bgt.n	405464 <_vfiprintf_r+0x7e4>
  405486:	4422      	add	r2, r4
  405488:	2807      	cmp	r0, #7
  40548a:	9215      	str	r2, [sp, #84]	; 0x54
  40548c:	6035      	str	r5, [r6, #0]
  40548e:	6074      	str	r4, [r6, #4]
  405490:	9014      	str	r0, [sp, #80]	; 0x50
  405492:	dd59      	ble.n	405548 <_vfiprintf_r+0x8c8>
  405494:	2a00      	cmp	r2, #0
  405496:	d14f      	bne.n	405538 <_vfiprintf_r+0x8b8>
  405498:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40549a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40549e:	9d04      	ldr	r5, [sp, #16]
  4054a0:	45ab      	cmp	fp, r5
  4054a2:	bfac      	ite	ge
  4054a4:	445c      	addge	r4, fp
  4054a6:	1964      	addlt	r4, r4, r5
  4054a8:	9409      	str	r4, [sp, #36]	; 0x24
  4054aa:	e05e      	b.n	40556a <_vfiprintf_r+0x8ea>
  4054ac:	4620      	mov	r0, r4
  4054ae:	9902      	ldr	r1, [sp, #8]
  4054b0:	aa13      	add	r2, sp, #76	; 0x4c
  4054b2:	f7ff fb9d 	bl	404bf0 <__sprint_r.part.0>
  4054b6:	2800      	cmp	r0, #0
  4054b8:	d135      	bne.n	405526 <_vfiprintf_r+0x8a6>
  4054ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4054bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4054be:	f103 0c01 	add.w	ip, r3, #1
  4054c2:	4648      	mov	r0, r9
  4054c4:	e781      	b.n	4053ca <_vfiprintf_r+0x74a>
  4054c6:	08e0      	lsrs	r0, r4, #3
  4054c8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  4054cc:	f004 0207 	and.w	r2, r4, #7
  4054d0:	08e9      	lsrs	r1, r5, #3
  4054d2:	3230      	adds	r2, #48	; 0x30
  4054d4:	ea50 0b01 	orrs.w	fp, r0, r1
  4054d8:	461f      	mov	r7, r3
  4054da:	701a      	strb	r2, [r3, #0]
  4054dc:	4604      	mov	r4, r0
  4054de:	460d      	mov	r5, r1
  4054e0:	f103 33ff 	add.w	r3, r3, #4294967295
  4054e4:	d1ef      	bne.n	4054c6 <_vfiprintf_r+0x846>
  4054e6:	f01a 0f01 	tst.w	sl, #1
  4054ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4054ee:	4639      	mov	r1, r7
  4054f0:	f000 80b9 	beq.w	405666 <_vfiprintf_r+0x9e6>
  4054f4:	2a30      	cmp	r2, #48	; 0x30
  4054f6:	f43f acf4 	beq.w	404ee2 <_vfiprintf_r+0x262>
  4054fa:	461f      	mov	r7, r3
  4054fc:	ebc7 0509 	rsb	r5, r7, r9
  405500:	2330      	movs	r3, #48	; 0x30
  405502:	9505      	str	r5, [sp, #20]
  405504:	f801 3c01 	strb.w	r3, [r1, #-1]
  405508:	e4ee      	b.n	404ee8 <_vfiprintf_r+0x268>
  40550a:	bf00      	nop
  40550c:	0040b6f8 	.word	0x0040b6f8
  405510:	0040b728 	.word	0x0040b728
  405514:	0040b738 	.word	0x0040b738
  405518:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40551a:	b123      	cbz	r3, 405526 <_vfiprintf_r+0x8a6>
  40551c:	9806      	ldr	r0, [sp, #24]
  40551e:	9902      	ldr	r1, [sp, #8]
  405520:	aa13      	add	r2, sp, #76	; 0x4c
  405522:	f7ff fb65 	bl	404bf0 <__sprint_r.part.0>
  405526:	9c02      	ldr	r4, [sp, #8]
  405528:	89a3      	ldrh	r3, [r4, #12]
  40552a:	065b      	lsls	r3, r3, #25
  40552c:	f53f ac98 	bmi.w	404e60 <_vfiprintf_r+0x1e0>
  405530:	9809      	ldr	r0, [sp, #36]	; 0x24
  405532:	b031      	add	sp, #196	; 0xc4
  405534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405538:	9806      	ldr	r0, [sp, #24]
  40553a:	9902      	ldr	r1, [sp, #8]
  40553c:	aa13      	add	r2, sp, #76	; 0x4c
  40553e:	f7ff fb57 	bl	404bf0 <__sprint_r.part.0>
  405542:	2800      	cmp	r0, #0
  405544:	d1ef      	bne.n	405526 <_vfiprintf_r+0x8a6>
  405546:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405548:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40554a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40554e:	9d04      	ldr	r5, [sp, #16]
  405550:	45ab      	cmp	fp, r5
  405552:	bfac      	ite	ge
  405554:	445c      	addge	r4, fp
  405556:	1964      	addlt	r4, r4, r5
  405558:	9409      	str	r4, [sp, #36]	; 0x24
  40555a:	b132      	cbz	r2, 40556a <_vfiprintf_r+0x8ea>
  40555c:	9806      	ldr	r0, [sp, #24]
  40555e:	9902      	ldr	r1, [sp, #8]
  405560:	aa13      	add	r2, sp, #76	; 0x4c
  405562:	f7ff fb45 	bl	404bf0 <__sprint_r.part.0>
  405566:	2800      	cmp	r0, #0
  405568:	d1dd      	bne.n	405526 <_vfiprintf_r+0x8a6>
  40556a:	2000      	movs	r0, #0
  40556c:	9014      	str	r0, [sp, #80]	; 0x50
  40556e:	464e      	mov	r6, r9
  405570:	f7ff bbb9 	b.w	404ce6 <_vfiprintf_r+0x66>
  405574:	4650      	mov	r0, sl
  405576:	4659      	mov	r1, fp
  405578:	aa13      	add	r2, sp, #76	; 0x4c
  40557a:	f7ff fb39 	bl	404bf0 <__sprint_r.part.0>
  40557e:	2800      	cmp	r0, #0
  405580:	d1d1      	bne.n	405526 <_vfiprintf_r+0x8a6>
  405582:	9914      	ldr	r1, [sp, #80]	; 0x50
  405584:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405586:	1c48      	adds	r0, r1, #1
  405588:	464e      	mov	r6, r9
  40558a:	e768      	b.n	40545e <_vfiprintf_r+0x7de>
  40558c:	2a00      	cmp	r2, #0
  40558e:	f040 80f7 	bne.w	405780 <_vfiprintf_r+0xb00>
  405592:	9c05      	ldr	r4, [sp, #20]
  405594:	2301      	movs	r3, #1
  405596:	9720      	str	r7, [sp, #128]	; 0x80
  405598:	9421      	str	r4, [sp, #132]	; 0x84
  40559a:	9415      	str	r4, [sp, #84]	; 0x54
  40559c:	4622      	mov	r2, r4
  40559e:	9314      	str	r3, [sp, #80]	; 0x50
  4055a0:	464e      	mov	r6, r9
  4055a2:	3608      	adds	r6, #8
  4055a4:	e741      	b.n	40542a <_vfiprintf_r+0x7aa>
  4055a6:	9d04      	ldr	r5, [sp, #16]
  4055a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4055ac:	ebcb 0405 	rsb	r4, fp, r5
  4055b0:	2c00      	cmp	r4, #0
  4055b2:	f77f aef7 	ble.w	4053a4 <_vfiprintf_r+0x724>
  4055b6:	2c10      	cmp	r4, #16
  4055b8:	4da6      	ldr	r5, [pc, #664]	; (405854 <_vfiprintf_r+0xbd4>)
  4055ba:	f340 8170 	ble.w	40589e <_vfiprintf_r+0xc1e>
  4055be:	4629      	mov	r1, r5
  4055c0:	f04f 0b10 	mov.w	fp, #16
  4055c4:	4625      	mov	r5, r4
  4055c6:	4664      	mov	r4, ip
  4055c8:	46b4      	mov	ip, r6
  4055ca:	460e      	mov	r6, r1
  4055cc:	e006      	b.n	4055dc <_vfiprintf_r+0x95c>
  4055ce:	1c98      	adds	r0, r3, #2
  4055d0:	f10c 0c08 	add.w	ip, ip, #8
  4055d4:	460b      	mov	r3, r1
  4055d6:	3d10      	subs	r5, #16
  4055d8:	2d10      	cmp	r5, #16
  4055da:	dd0f      	ble.n	4055fc <_vfiprintf_r+0x97c>
  4055dc:	1c59      	adds	r1, r3, #1
  4055de:	3210      	adds	r2, #16
  4055e0:	2907      	cmp	r1, #7
  4055e2:	9215      	str	r2, [sp, #84]	; 0x54
  4055e4:	e88c 0840 	stmia.w	ip, {r6, fp}
  4055e8:	9114      	str	r1, [sp, #80]	; 0x50
  4055ea:	ddf0      	ble.n	4055ce <_vfiprintf_r+0x94e>
  4055ec:	b9ba      	cbnz	r2, 40561e <_vfiprintf_r+0x99e>
  4055ee:	3d10      	subs	r5, #16
  4055f0:	2d10      	cmp	r5, #16
  4055f2:	f04f 0001 	mov.w	r0, #1
  4055f6:	4613      	mov	r3, r2
  4055f8:	46cc      	mov	ip, r9
  4055fa:	dcef      	bgt.n	4055dc <_vfiprintf_r+0x95c>
  4055fc:	4633      	mov	r3, r6
  4055fe:	4666      	mov	r6, ip
  405600:	46a4      	mov	ip, r4
  405602:	462c      	mov	r4, r5
  405604:	461d      	mov	r5, r3
  405606:	4422      	add	r2, r4
  405608:	2807      	cmp	r0, #7
  40560a:	9215      	str	r2, [sp, #84]	; 0x54
  40560c:	6035      	str	r5, [r6, #0]
  40560e:	6074      	str	r4, [r6, #4]
  405610:	9014      	str	r0, [sp, #80]	; 0x50
  405612:	f300 80af 	bgt.w	405774 <_vfiprintf_r+0xaf4>
  405616:	3608      	adds	r6, #8
  405618:	1c41      	adds	r1, r0, #1
  40561a:	4603      	mov	r3, r0
  40561c:	e6c2      	b.n	4053a4 <_vfiprintf_r+0x724>
  40561e:	9806      	ldr	r0, [sp, #24]
  405620:	9902      	ldr	r1, [sp, #8]
  405622:	aa13      	add	r2, sp, #76	; 0x4c
  405624:	f7ff fae4 	bl	404bf0 <__sprint_r.part.0>
  405628:	2800      	cmp	r0, #0
  40562a:	f47f af7c 	bne.w	405526 <_vfiprintf_r+0x8a6>
  40562e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405630:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405632:	1c58      	adds	r0, r3, #1
  405634:	46cc      	mov	ip, r9
  405636:	e7ce      	b.n	4055d6 <_vfiprintf_r+0x956>
  405638:	2a00      	cmp	r2, #0
  40563a:	d179      	bne.n	405730 <_vfiprintf_r+0xab0>
  40563c:	4619      	mov	r1, r3
  40563e:	464e      	mov	r6, r9
  405640:	4613      	mov	r3, r2
  405642:	e69c      	b.n	40537e <_vfiprintf_r+0x6fe>
  405644:	2a00      	cmp	r2, #0
  405646:	f040 8084 	bne.w	405752 <_vfiprintf_r+0xad2>
  40564a:	2101      	movs	r1, #1
  40564c:	4613      	mov	r3, r2
  40564e:	464e      	mov	r6, r9
  405650:	e6a4      	b.n	40539c <_vfiprintf_r+0x71c>
  405652:	464f      	mov	r7, r9
  405654:	e448      	b.n	404ee8 <_vfiprintf_r+0x268>
  405656:	2d00      	cmp	r5, #0
  405658:	bf08      	it	eq
  40565a:	2c0a      	cmpeq	r4, #10
  40565c:	d246      	bcs.n	4056ec <_vfiprintf_r+0xa6c>
  40565e:	3430      	adds	r4, #48	; 0x30
  405660:	af30      	add	r7, sp, #192	; 0xc0
  405662:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405666:	ebc7 0309 	rsb	r3, r7, r9
  40566a:	9305      	str	r3, [sp, #20]
  40566c:	e43c      	b.n	404ee8 <_vfiprintf_r+0x268>
  40566e:	2302      	movs	r3, #2
  405670:	e417      	b.n	404ea2 <_vfiprintf_r+0x222>
  405672:	2a00      	cmp	r2, #0
  405674:	f040 80af 	bne.w	4057d6 <_vfiprintf_r+0xb56>
  405678:	4613      	mov	r3, r2
  40567a:	2101      	movs	r1, #1
  40567c:	464e      	mov	r6, r9
  40567e:	e66d      	b.n	40535c <_vfiprintf_r+0x6dc>
  405680:	4644      	mov	r4, r8
  405682:	f7ff bb58 	b.w	404d36 <_vfiprintf_r+0xb6>
  405686:	9806      	ldr	r0, [sp, #24]
  405688:	9902      	ldr	r1, [sp, #8]
  40568a:	aa13      	add	r2, sp, #76	; 0x4c
  40568c:	f7ff fab0 	bl	404bf0 <__sprint_r.part.0>
  405690:	2800      	cmp	r0, #0
  405692:	f47f af48 	bne.w	405526 <_vfiprintf_r+0x8a6>
  405696:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405698:	464e      	mov	r6, r9
  40569a:	e6c6      	b.n	40542a <_vfiprintf_r+0x7aa>
  40569c:	9d08      	ldr	r5, [sp, #32]
  40569e:	682c      	ldr	r4, [r5, #0]
  4056a0:	3504      	adds	r5, #4
  4056a2:	9508      	str	r5, [sp, #32]
  4056a4:	2500      	movs	r5, #0
  4056a6:	f7ff bbfc 	b.w	404ea2 <_vfiprintf_r+0x222>
  4056aa:	9d08      	ldr	r5, [sp, #32]
  4056ac:	2301      	movs	r3, #1
  4056ae:	682c      	ldr	r4, [r5, #0]
  4056b0:	3504      	adds	r5, #4
  4056b2:	9508      	str	r5, [sp, #32]
  4056b4:	2500      	movs	r5, #0
  4056b6:	f7ff bbf4 	b.w	404ea2 <_vfiprintf_r+0x222>
  4056ba:	9d08      	ldr	r5, [sp, #32]
  4056bc:	682c      	ldr	r4, [r5, #0]
  4056be:	3504      	adds	r5, #4
  4056c0:	9508      	str	r5, [sp, #32]
  4056c2:	2500      	movs	r5, #0
  4056c4:	e525      	b.n	405112 <_vfiprintf_r+0x492>
  4056c6:	9d08      	ldr	r5, [sp, #32]
  4056c8:	682c      	ldr	r4, [r5, #0]
  4056ca:	3504      	adds	r5, #4
  4056cc:	9508      	str	r5, [sp, #32]
  4056ce:	17e5      	asrs	r5, r4, #31
  4056d0:	4622      	mov	r2, r4
  4056d2:	462b      	mov	r3, r5
  4056d4:	e48e      	b.n	404ff4 <_vfiprintf_r+0x374>
  4056d6:	9806      	ldr	r0, [sp, #24]
  4056d8:	9902      	ldr	r1, [sp, #8]
  4056da:	aa13      	add	r2, sp, #76	; 0x4c
  4056dc:	f7ff fa88 	bl	404bf0 <__sprint_r.part.0>
  4056e0:	2800      	cmp	r0, #0
  4056e2:	f47f af20 	bne.w	405526 <_vfiprintf_r+0x8a6>
  4056e6:	464e      	mov	r6, r9
  4056e8:	f7ff bb9a 	b.w	404e20 <_vfiprintf_r+0x1a0>
  4056ec:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  4056f0:	9603      	str	r6, [sp, #12]
  4056f2:	465e      	mov	r6, fp
  4056f4:	46e3      	mov	fp, ip
  4056f6:	4620      	mov	r0, r4
  4056f8:	4629      	mov	r1, r5
  4056fa:	220a      	movs	r2, #10
  4056fc:	2300      	movs	r3, #0
  4056fe:	f005 f8ab 	bl	40a858 <__aeabi_uldivmod>
  405702:	3230      	adds	r2, #48	; 0x30
  405704:	7032      	strb	r2, [r6, #0]
  405706:	4620      	mov	r0, r4
  405708:	4629      	mov	r1, r5
  40570a:	220a      	movs	r2, #10
  40570c:	2300      	movs	r3, #0
  40570e:	f005 f8a3 	bl	40a858 <__aeabi_uldivmod>
  405712:	4604      	mov	r4, r0
  405714:	460d      	mov	r5, r1
  405716:	ea54 0005 	orrs.w	r0, r4, r5
  40571a:	4637      	mov	r7, r6
  40571c:	f106 36ff 	add.w	r6, r6, #4294967295
  405720:	d1e9      	bne.n	4056f6 <_vfiprintf_r+0xa76>
  405722:	ebc7 0309 	rsb	r3, r7, r9
  405726:	46dc      	mov	ip, fp
  405728:	9e03      	ldr	r6, [sp, #12]
  40572a:	9305      	str	r3, [sp, #20]
  40572c:	f7ff bbdc 	b.w	404ee8 <_vfiprintf_r+0x268>
  405730:	9806      	ldr	r0, [sp, #24]
  405732:	9902      	ldr	r1, [sp, #8]
  405734:	aa13      	add	r2, sp, #76	; 0x4c
  405736:	f8cd c004 	str.w	ip, [sp, #4]
  40573a:	f7ff fa59 	bl	404bf0 <__sprint_r.part.0>
  40573e:	f8dd c004 	ldr.w	ip, [sp, #4]
  405742:	2800      	cmp	r0, #0
  405744:	f47f aeef 	bne.w	405526 <_vfiprintf_r+0x8a6>
  405748:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40574a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40574c:	1c59      	adds	r1, r3, #1
  40574e:	464e      	mov	r6, r9
  405750:	e615      	b.n	40537e <_vfiprintf_r+0x6fe>
  405752:	9806      	ldr	r0, [sp, #24]
  405754:	9902      	ldr	r1, [sp, #8]
  405756:	aa13      	add	r2, sp, #76	; 0x4c
  405758:	f8cd c004 	str.w	ip, [sp, #4]
  40575c:	f7ff fa48 	bl	404bf0 <__sprint_r.part.0>
  405760:	f8dd c004 	ldr.w	ip, [sp, #4]
  405764:	2800      	cmp	r0, #0
  405766:	f47f aede 	bne.w	405526 <_vfiprintf_r+0x8a6>
  40576a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40576c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40576e:	1c59      	adds	r1, r3, #1
  405770:	464e      	mov	r6, r9
  405772:	e613      	b.n	40539c <_vfiprintf_r+0x71c>
  405774:	2a00      	cmp	r2, #0
  405776:	d156      	bne.n	405826 <_vfiprintf_r+0xba6>
  405778:	2101      	movs	r1, #1
  40577a:	4613      	mov	r3, r2
  40577c:	464e      	mov	r6, r9
  40577e:	e611      	b.n	4053a4 <_vfiprintf_r+0x724>
  405780:	9806      	ldr	r0, [sp, #24]
  405782:	9902      	ldr	r1, [sp, #8]
  405784:	aa13      	add	r2, sp, #76	; 0x4c
  405786:	f7ff fa33 	bl	404bf0 <__sprint_r.part.0>
  40578a:	2800      	cmp	r0, #0
  40578c:	f47f aecb 	bne.w	405526 <_vfiprintf_r+0x8a6>
  405790:	9914      	ldr	r1, [sp, #80]	; 0x50
  405792:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405794:	3101      	adds	r1, #1
  405796:	464e      	mov	r6, r9
  405798:	e639      	b.n	40540e <_vfiprintf_r+0x78e>
  40579a:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40579e:	4264      	negs	r4, r4
  4057a0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4057a4:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  4057a8:	f8cd b01c 	str.w	fp, [sp, #28]
  4057ac:	f8cd c014 	str.w	ip, [sp, #20]
  4057b0:	2301      	movs	r3, #1
  4057b2:	f7ff bb7e 	b.w	404eb2 <_vfiprintf_r+0x232>
  4057b6:	f01a 0f10 	tst.w	sl, #16
  4057ba:	d11d      	bne.n	4057f8 <_vfiprintf_r+0xb78>
  4057bc:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4057c0:	d058      	beq.n	405874 <_vfiprintf_r+0xbf4>
  4057c2:	9d08      	ldr	r5, [sp, #32]
  4057c4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4057c8:	682b      	ldr	r3, [r5, #0]
  4057ca:	3504      	adds	r5, #4
  4057cc:	9508      	str	r5, [sp, #32]
  4057ce:	f8a3 b000 	strh.w	fp, [r3]
  4057d2:	f7ff ba88 	b.w	404ce6 <_vfiprintf_r+0x66>
  4057d6:	9806      	ldr	r0, [sp, #24]
  4057d8:	9902      	ldr	r1, [sp, #8]
  4057da:	aa13      	add	r2, sp, #76	; 0x4c
  4057dc:	f8cd c004 	str.w	ip, [sp, #4]
  4057e0:	f7ff fa06 	bl	404bf0 <__sprint_r.part.0>
  4057e4:	f8dd c004 	ldr.w	ip, [sp, #4]
  4057e8:	2800      	cmp	r0, #0
  4057ea:	f47f ae9c 	bne.w	405526 <_vfiprintf_r+0x8a6>
  4057ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4057f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4057f2:	1c59      	adds	r1, r3, #1
  4057f4:	464e      	mov	r6, r9
  4057f6:	e5b1      	b.n	40535c <_vfiprintf_r+0x6dc>
  4057f8:	f8dd b020 	ldr.w	fp, [sp, #32]
  4057fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4057fe:	f8db 3000 	ldr.w	r3, [fp]
  405802:	f10b 0b04 	add.w	fp, fp, #4
  405806:	f8cd b020 	str.w	fp, [sp, #32]
  40580a:	601c      	str	r4, [r3, #0]
  40580c:	f7ff ba6b 	b.w	404ce6 <_vfiprintf_r+0x66>
  405810:	9408      	str	r4, [sp, #32]
  405812:	f7fd ff1b 	bl	40364c <strlen>
  405816:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  40581a:	9005      	str	r0, [sp, #20]
  40581c:	9407      	str	r4, [sp, #28]
  40581e:	f04f 0c00 	mov.w	ip, #0
  405822:	f7ff bb61 	b.w	404ee8 <_vfiprintf_r+0x268>
  405826:	9806      	ldr	r0, [sp, #24]
  405828:	9902      	ldr	r1, [sp, #8]
  40582a:	aa13      	add	r2, sp, #76	; 0x4c
  40582c:	f8cd c004 	str.w	ip, [sp, #4]
  405830:	f7ff f9de 	bl	404bf0 <__sprint_r.part.0>
  405834:	f8dd c004 	ldr.w	ip, [sp, #4]
  405838:	2800      	cmp	r0, #0
  40583a:	f47f ae74 	bne.w	405526 <_vfiprintf_r+0x8a6>
  40583e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405840:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405842:	1c59      	adds	r1, r3, #1
  405844:	464e      	mov	r6, r9
  405846:	e5ad      	b.n	4053a4 <_vfiprintf_r+0x724>
  405848:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40584a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40584c:	3301      	adds	r3, #1
  40584e:	4d02      	ldr	r5, [pc, #8]	; (405858 <_vfiprintf_r+0xbd8>)
  405850:	f7ff bb9a 	b.w	404f88 <_vfiprintf_r+0x308>
  405854:	0040b728 	.word	0x0040b728
  405858:	0040b738 	.word	0x0040b738
  40585c:	f1bc 0f06 	cmp.w	ip, #6
  405860:	bf34      	ite	cc
  405862:	4663      	movcc	r3, ip
  405864:	2306      	movcs	r3, #6
  405866:	9408      	str	r4, [sp, #32]
  405868:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  40586c:	9305      	str	r3, [sp, #20]
  40586e:	9403      	str	r4, [sp, #12]
  405870:	4f16      	ldr	r7, [pc, #88]	; (4058cc <_vfiprintf_r+0xc4c>)
  405872:	e472      	b.n	40515a <_vfiprintf_r+0x4da>
  405874:	9c08      	ldr	r4, [sp, #32]
  405876:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405878:	6823      	ldr	r3, [r4, #0]
  40587a:	3404      	adds	r4, #4
  40587c:	9408      	str	r4, [sp, #32]
  40587e:	601d      	str	r5, [r3, #0]
  405880:	f7ff ba31 	b.w	404ce6 <_vfiprintf_r+0x66>
  405884:	9814      	ldr	r0, [sp, #80]	; 0x50
  405886:	4d12      	ldr	r5, [pc, #72]	; (4058d0 <_vfiprintf_r+0xc50>)
  405888:	3001      	adds	r0, #1
  40588a:	e5fc      	b.n	405486 <_vfiprintf_r+0x806>
  40588c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  405890:	f8cd c014 	str.w	ip, [sp, #20]
  405894:	9507      	str	r5, [sp, #28]
  405896:	9408      	str	r4, [sp, #32]
  405898:	4684      	mov	ip, r0
  40589a:	f7ff bb25 	b.w	404ee8 <_vfiprintf_r+0x268>
  40589e:	4608      	mov	r0, r1
  4058a0:	e6b1      	b.n	405606 <_vfiprintf_r+0x986>
  4058a2:	46a0      	mov	r8, r4
  4058a4:	2500      	movs	r5, #0
  4058a6:	f7ff ba5a 	b.w	404d5e <_vfiprintf_r+0xde>
  4058aa:	f8dd b020 	ldr.w	fp, [sp, #32]
  4058ae:	f898 3001 	ldrb.w	r3, [r8, #1]
  4058b2:	f8db 5000 	ldr.w	r5, [fp]
  4058b6:	f10b 0204 	add.w	r2, fp, #4
  4058ba:	2d00      	cmp	r5, #0
  4058bc:	9208      	str	r2, [sp, #32]
  4058be:	46a0      	mov	r8, r4
  4058c0:	f6bf aa4b 	bge.w	404d5a <_vfiprintf_r+0xda>
  4058c4:	f04f 35ff 	mov.w	r5, #4294967295
  4058c8:	f7ff ba47 	b.w	404d5a <_vfiprintf_r+0xda>
  4058cc:	0040b70c 	.word	0x0040b70c
  4058d0:	0040b738 	.word	0x0040b738

004058d4 <__sbprintf>:
  4058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4058d8:	6e4f      	ldr	r7, [r1, #100]	; 0x64
  4058da:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4058de:	4688      	mov	r8, r1
  4058e0:	9719      	str	r7, [sp, #100]	; 0x64
  4058e2:	f8d8 701c 	ldr.w	r7, [r8, #28]
  4058e6:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
  4058ea:	f8b1 900e 	ldrh.w	r9, [r1, #14]
  4058ee:	9707      	str	r7, [sp, #28]
  4058f0:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
  4058f4:	ac1a      	add	r4, sp, #104	; 0x68
  4058f6:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4058fa:	f02a 0a02 	bic.w	sl, sl, #2
  4058fe:	2600      	movs	r6, #0
  405900:	4669      	mov	r1, sp
  405902:	9400      	str	r4, [sp, #0]
  405904:	9404      	str	r4, [sp, #16]
  405906:	9502      	str	r5, [sp, #8]
  405908:	9505      	str	r5, [sp, #20]
  40590a:	f8ad a00c 	strh.w	sl, [sp, #12]
  40590e:	f8ad 900e 	strh.w	r9, [sp, #14]
  405912:	9709      	str	r7, [sp, #36]	; 0x24
  405914:	9606      	str	r6, [sp, #24]
  405916:	4605      	mov	r5, r0
  405918:	f7ff f9b2 	bl	404c80 <_vfiprintf_r>
  40591c:	1e04      	subs	r4, r0, #0
  40591e:	db07      	blt.n	405930 <__sbprintf+0x5c>
  405920:	4628      	mov	r0, r5
  405922:	4669      	mov	r1, sp
  405924:	f001 f8ec 	bl	406b00 <_fflush_r>
  405928:	42b0      	cmp	r0, r6
  40592a:	bf18      	it	ne
  40592c:	f04f 34ff 	movne.w	r4, #4294967295
  405930:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405934:	065b      	lsls	r3, r3, #25
  405936:	d505      	bpl.n	405944 <__sbprintf+0x70>
  405938:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  40593c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405940:	f8a8 300c 	strh.w	r3, [r8, #12]
  405944:	4620      	mov	r0, r4
  405946:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40594a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40594e:	bf00      	nop

00405950 <vprintf>:
  405950:	4b03      	ldr	r3, [pc, #12]	; (405960 <vprintf+0x10>)
  405952:	4602      	mov	r2, r0
  405954:	6818      	ldr	r0, [r3, #0]
  405956:	460b      	mov	r3, r1
  405958:	6881      	ldr	r1, [r0, #8]
  40595a:	f002 be69 	b.w	408630 <_vfprintf_r>
  40595e:	bf00      	nop
  405960:	20000520 	.word	0x20000520

00405964 <__swsetup_r>:
  405964:	4b2f      	ldr	r3, [pc, #188]	; (405a24 <__swsetup_r+0xc0>)
  405966:	b570      	push	{r4, r5, r6, lr}
  405968:	4606      	mov	r6, r0
  40596a:	6818      	ldr	r0, [r3, #0]
  40596c:	460c      	mov	r4, r1
  40596e:	b110      	cbz	r0, 405976 <__swsetup_r+0x12>
  405970:	6b82      	ldr	r2, [r0, #56]	; 0x38
  405972:	2a00      	cmp	r2, #0
  405974:	d036      	beq.n	4059e4 <__swsetup_r+0x80>
  405976:	89a5      	ldrh	r5, [r4, #12]
  405978:	b2ab      	uxth	r3, r5
  40597a:	0719      	lsls	r1, r3, #28
  40597c:	d50c      	bpl.n	405998 <__swsetup_r+0x34>
  40597e:	6922      	ldr	r2, [r4, #16]
  405980:	b1aa      	cbz	r2, 4059ae <__swsetup_r+0x4a>
  405982:	f013 0101 	ands.w	r1, r3, #1
  405986:	d01e      	beq.n	4059c6 <__swsetup_r+0x62>
  405988:	6963      	ldr	r3, [r4, #20]
  40598a:	2100      	movs	r1, #0
  40598c:	425b      	negs	r3, r3
  40598e:	61a3      	str	r3, [r4, #24]
  405990:	60a1      	str	r1, [r4, #8]
  405992:	b1f2      	cbz	r2, 4059d2 <__swsetup_r+0x6e>
  405994:	2000      	movs	r0, #0
  405996:	bd70      	pop	{r4, r5, r6, pc}
  405998:	06da      	lsls	r2, r3, #27
  40599a:	d53a      	bpl.n	405a12 <__swsetup_r+0xae>
  40599c:	075b      	lsls	r3, r3, #29
  40599e:	d424      	bmi.n	4059ea <__swsetup_r+0x86>
  4059a0:	6922      	ldr	r2, [r4, #16]
  4059a2:	f045 0308 	orr.w	r3, r5, #8
  4059a6:	81a3      	strh	r3, [r4, #12]
  4059a8:	b29b      	uxth	r3, r3
  4059aa:	2a00      	cmp	r2, #0
  4059ac:	d1e9      	bne.n	405982 <__swsetup_r+0x1e>
  4059ae:	f403 7120 	and.w	r1, r3, #640	; 0x280
  4059b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  4059b6:	d0e4      	beq.n	405982 <__swsetup_r+0x1e>
  4059b8:	4630      	mov	r0, r6
  4059ba:	4621      	mov	r1, r4
  4059bc:	f001 fc8a 	bl	4072d4 <__smakebuf_r>
  4059c0:	89a3      	ldrh	r3, [r4, #12]
  4059c2:	6922      	ldr	r2, [r4, #16]
  4059c4:	e7dd      	b.n	405982 <__swsetup_r+0x1e>
  4059c6:	0798      	lsls	r0, r3, #30
  4059c8:	bf58      	it	pl
  4059ca:	6961      	ldrpl	r1, [r4, #20]
  4059cc:	60a1      	str	r1, [r4, #8]
  4059ce:	2a00      	cmp	r2, #0
  4059d0:	d1e0      	bne.n	405994 <__swsetup_r+0x30>
  4059d2:	89a3      	ldrh	r3, [r4, #12]
  4059d4:	061a      	lsls	r2, r3, #24
  4059d6:	d5dd      	bpl.n	405994 <__swsetup_r+0x30>
  4059d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059dc:	81a3      	strh	r3, [r4, #12]
  4059de:	f04f 30ff 	mov.w	r0, #4294967295
  4059e2:	bd70      	pop	{r4, r5, r6, pc}
  4059e4:	f001 f8a8 	bl	406b38 <__sinit>
  4059e8:	e7c5      	b.n	405976 <__swsetup_r+0x12>
  4059ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4059ec:	b149      	cbz	r1, 405a02 <__swsetup_r+0x9e>
  4059ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4059f2:	4299      	cmp	r1, r3
  4059f4:	d003      	beq.n	4059fe <__swsetup_r+0x9a>
  4059f6:	4630      	mov	r0, r6
  4059f8:	f001 f9e2 	bl	406dc0 <_free_r>
  4059fc:	89a5      	ldrh	r5, [r4, #12]
  4059fe:	2300      	movs	r3, #0
  405a00:	6323      	str	r3, [r4, #48]	; 0x30
  405a02:	6922      	ldr	r2, [r4, #16]
  405a04:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  405a08:	2100      	movs	r1, #0
  405a0a:	b2ad      	uxth	r5, r5
  405a0c:	6022      	str	r2, [r4, #0]
  405a0e:	6061      	str	r1, [r4, #4]
  405a10:	e7c7      	b.n	4059a2 <__swsetup_r+0x3e>
  405a12:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  405a16:	2309      	movs	r3, #9
  405a18:	6033      	str	r3, [r6, #0]
  405a1a:	f04f 30ff 	mov.w	r0, #4294967295
  405a1e:	81a5      	strh	r5, [r4, #12]
  405a20:	bd70      	pop	{r4, r5, r6, pc}
  405a22:	bf00      	nop
  405a24:	20000520 	.word	0x20000520

00405a28 <register_fini>:
  405a28:	4b02      	ldr	r3, [pc, #8]	; (405a34 <register_fini+0xc>)
  405a2a:	b113      	cbz	r3, 405a32 <register_fini+0xa>
  405a2c:	4802      	ldr	r0, [pc, #8]	; (405a38 <register_fini+0x10>)
  405a2e:	f000 b805 	b.w	405a3c <atexit>
  405a32:	4770      	bx	lr
  405a34:	00000000 	.word	0x00000000
  405a38:	00406c35 	.word	0x00406c35

00405a3c <atexit>:
  405a3c:	4601      	mov	r1, r0
  405a3e:	2000      	movs	r0, #0
  405a40:	4602      	mov	r2, r0
  405a42:	4603      	mov	r3, r0
  405a44:	f004 b962 	b.w	409d0c <__register_exitproc>

00405a48 <quorem>:
  405a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a4c:	6903      	ldr	r3, [r0, #16]
  405a4e:	690d      	ldr	r5, [r1, #16]
  405a50:	b083      	sub	sp, #12
  405a52:	429d      	cmp	r5, r3
  405a54:	4683      	mov	fp, r0
  405a56:	f300 808c 	bgt.w	405b72 <quorem+0x12a>
  405a5a:	3d01      	subs	r5, #1
  405a5c:	f101 0414 	add.w	r4, r1, #20
  405a60:	f100 0a14 	add.w	sl, r0, #20
  405a64:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  405a68:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  405a6c:	3201      	adds	r2, #1
  405a6e:	fbb3 f8f2 	udiv	r8, r3, r2
  405a72:	00aa      	lsls	r2, r5, #2
  405a74:	4691      	mov	r9, r2
  405a76:	9200      	str	r2, [sp, #0]
  405a78:	4452      	add	r2, sl
  405a7a:	44a1      	add	r9, r4
  405a7c:	9201      	str	r2, [sp, #4]
  405a7e:	f1b8 0f00 	cmp.w	r8, #0
  405a82:	d03e      	beq.n	405b02 <quorem+0xba>
  405a84:	2600      	movs	r6, #0
  405a86:	4630      	mov	r0, r6
  405a88:	4622      	mov	r2, r4
  405a8a:	4653      	mov	r3, sl
  405a8c:	468c      	mov	ip, r1
  405a8e:	f852 7b04 	ldr.w	r7, [r2], #4
  405a92:	6819      	ldr	r1, [r3, #0]
  405a94:	fa1f fe87 	uxth.w	lr, r7
  405a98:	0c3f      	lsrs	r7, r7, #16
  405a9a:	fb0e 6e08 	mla	lr, lr, r8, r6
  405a9e:	fb07 f608 	mul.w	r6, r7, r8
  405aa2:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  405aa6:	fa1f fe8e 	uxth.w	lr, lr
  405aaa:	ebce 0e00 	rsb	lr, lr, r0
  405aae:	b28f      	uxth	r7, r1
  405ab0:	b2b0      	uxth	r0, r6
  405ab2:	4477      	add	r7, lr
  405ab4:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  405ab8:	eb00 4027 	add.w	r0, r0, r7, asr #16
  405abc:	b2bf      	uxth	r7, r7
  405abe:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  405ac2:	4591      	cmp	r9, r2
  405ac4:	f843 7b04 	str.w	r7, [r3], #4
  405ac8:	ea4f 4020 	mov.w	r0, r0, asr #16
  405acc:	ea4f 4616 	mov.w	r6, r6, lsr #16
  405ad0:	d2dd      	bcs.n	405a8e <quorem+0x46>
  405ad2:	9a00      	ldr	r2, [sp, #0]
  405ad4:	4661      	mov	r1, ip
  405ad6:	f85a 3002 	ldr.w	r3, [sl, r2]
  405ada:	b993      	cbnz	r3, 405b02 <quorem+0xba>
  405adc:	9a01      	ldr	r2, [sp, #4]
  405ade:	1f13      	subs	r3, r2, #4
  405ae0:	459a      	cmp	sl, r3
  405ae2:	d20c      	bcs.n	405afe <quorem+0xb6>
  405ae4:	f852 3c04 	ldr.w	r3, [r2, #-4]
  405ae8:	b94b      	cbnz	r3, 405afe <quorem+0xb6>
  405aea:	f1a2 0308 	sub.w	r3, r2, #8
  405aee:	e002      	b.n	405af6 <quorem+0xae>
  405af0:	681a      	ldr	r2, [r3, #0]
  405af2:	3b04      	subs	r3, #4
  405af4:	b91a      	cbnz	r2, 405afe <quorem+0xb6>
  405af6:	459a      	cmp	sl, r3
  405af8:	f105 35ff 	add.w	r5, r5, #4294967295
  405afc:	d3f8      	bcc.n	405af0 <quorem+0xa8>
  405afe:	f8cb 5010 	str.w	r5, [fp, #16]
  405b02:	4658      	mov	r0, fp
  405b04:	f002 f9ca 	bl	407e9c <__mcmp>
  405b08:	2800      	cmp	r0, #0
  405b0a:	db2e      	blt.n	405b6a <quorem+0x122>
  405b0c:	f108 0801 	add.w	r8, r8, #1
  405b10:	4653      	mov	r3, sl
  405b12:	2200      	movs	r2, #0
  405b14:	f854 6b04 	ldr.w	r6, [r4], #4
  405b18:	6818      	ldr	r0, [r3, #0]
  405b1a:	b2b1      	uxth	r1, r6
  405b1c:	1a51      	subs	r1, r2, r1
  405b1e:	b287      	uxth	r7, r0
  405b20:	0c36      	lsrs	r6, r6, #16
  405b22:	4439      	add	r1, r7
  405b24:	ebc6 4010 	rsb	r0, r6, r0, lsr #16
  405b28:	eb00 4221 	add.w	r2, r0, r1, asr #16
  405b2c:	b289      	uxth	r1, r1
  405b2e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  405b32:	45a1      	cmp	r9, r4
  405b34:	f843 1b04 	str.w	r1, [r3], #4
  405b38:	ea4f 4222 	mov.w	r2, r2, asr #16
  405b3c:	d2ea      	bcs.n	405b14 <quorem+0xcc>
  405b3e:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  405b42:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  405b46:	b982      	cbnz	r2, 405b6a <quorem+0x122>
  405b48:	1f1a      	subs	r2, r3, #4
  405b4a:	4592      	cmp	sl, r2
  405b4c:	d20b      	bcs.n	405b66 <quorem+0x11e>
  405b4e:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405b52:	b942      	cbnz	r2, 405b66 <quorem+0x11e>
  405b54:	3b08      	subs	r3, #8
  405b56:	e002      	b.n	405b5e <quorem+0x116>
  405b58:	681a      	ldr	r2, [r3, #0]
  405b5a:	3b04      	subs	r3, #4
  405b5c:	b91a      	cbnz	r2, 405b66 <quorem+0x11e>
  405b5e:	459a      	cmp	sl, r3
  405b60:	f105 35ff 	add.w	r5, r5, #4294967295
  405b64:	d3f8      	bcc.n	405b58 <quorem+0x110>
  405b66:	f8cb 5010 	str.w	r5, [fp, #16]
  405b6a:	4640      	mov	r0, r8
  405b6c:	b003      	add	sp, #12
  405b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b72:	2000      	movs	r0, #0
  405b74:	b003      	add	sp, #12
  405b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b7a:	bf00      	nop
  405b7c:	0000      	movs	r0, r0
	...

00405b80 <_dtoa_r>:
  405b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b84:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405b86:	b09b      	sub	sp, #108	; 0x6c
  405b88:	4604      	mov	r4, r0
  405b8a:	4692      	mov	sl, r2
  405b8c:	469b      	mov	fp, r3
  405b8e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  405b90:	b141      	cbz	r1, 405ba4 <_dtoa_r+0x24>
  405b92:	6c43      	ldr	r3, [r0, #68]	; 0x44
  405b94:	2201      	movs	r2, #1
  405b96:	409a      	lsls	r2, r3
  405b98:	604b      	str	r3, [r1, #4]
  405b9a:	608a      	str	r2, [r1, #8]
  405b9c:	f001 ff88 	bl	407ab0 <_Bfree>
  405ba0:	2300      	movs	r3, #0
  405ba2:	6423      	str	r3, [r4, #64]	; 0x40
  405ba4:	f1bb 0f00 	cmp.w	fp, #0
  405ba8:	46d9      	mov	r9, fp
  405baa:	db33      	blt.n	405c14 <_dtoa_r+0x94>
  405bac:	2300      	movs	r3, #0
  405bae:	602b      	str	r3, [r5, #0]
  405bb0:	4ba5      	ldr	r3, [pc, #660]	; (405e48 <_dtoa_r+0x2c8>)
  405bb2:	461a      	mov	r2, r3
  405bb4:	ea09 0303 	and.w	r3, r9, r3
  405bb8:	4293      	cmp	r3, r2
  405bba:	d014      	beq.n	405be6 <_dtoa_r+0x66>
  405bbc:	4650      	mov	r0, sl
  405bbe:	4659      	mov	r1, fp
  405bc0:	2200      	movs	r2, #0
  405bc2:	2300      	movs	r3, #0
  405bc4:	f004 fdee 	bl	40a7a4 <__aeabi_dcmpeq>
  405bc8:	4680      	mov	r8, r0
  405bca:	b348      	cbz	r0, 405c20 <_dtoa_r+0xa0>
  405bcc:	9e26      	ldr	r6, [sp, #152]	; 0x98
  405bce:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  405bd0:	2301      	movs	r3, #1
  405bd2:	6033      	str	r3, [r6, #0]
  405bd4:	2d00      	cmp	r5, #0
  405bd6:	f000 80ca 	beq.w	405d6e <_dtoa_r+0x1ee>
  405bda:	489c      	ldr	r0, [pc, #624]	; (405e4c <_dtoa_r+0x2cc>)
  405bdc:	6028      	str	r0, [r5, #0]
  405bde:	3801      	subs	r0, #1
  405be0:	b01b      	add	sp, #108	; 0x6c
  405be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405be6:	9d26      	ldr	r5, [sp, #152]	; 0x98
  405be8:	f242 730f 	movw	r3, #9999	; 0x270f
  405bec:	602b      	str	r3, [r5, #0]
  405bee:	f1ba 0f00 	cmp.w	sl, #0
  405bf2:	f000 80a5 	beq.w	405d40 <_dtoa_r+0x1c0>
  405bf6:	4896      	ldr	r0, [pc, #600]	; (405e50 <_dtoa_r+0x2d0>)
  405bf8:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  405bfa:	2e00      	cmp	r6, #0
  405bfc:	d0f0      	beq.n	405be0 <_dtoa_r+0x60>
  405bfe:	78c3      	ldrb	r3, [r0, #3]
  405c00:	2b00      	cmp	r3, #0
  405c02:	f000 80b6 	beq.w	405d72 <_dtoa_r+0x1f2>
  405c06:	f100 0308 	add.w	r3, r0, #8
  405c0a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  405c0c:	602b      	str	r3, [r5, #0]
  405c0e:	b01b      	add	sp, #108	; 0x6c
  405c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c14:	2301      	movs	r3, #1
  405c16:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  405c1a:	602b      	str	r3, [r5, #0]
  405c1c:	46cb      	mov	fp, r9
  405c1e:	e7c7      	b.n	405bb0 <_dtoa_r+0x30>
  405c20:	aa19      	add	r2, sp, #100	; 0x64
  405c22:	ab18      	add	r3, sp, #96	; 0x60
  405c24:	e88d 000c 	stmia.w	sp, {r2, r3}
  405c28:	4620      	mov	r0, r4
  405c2a:	4652      	mov	r2, sl
  405c2c:	465b      	mov	r3, fp
  405c2e:	f002 f9c5 	bl	407fbc <__d2b>
  405c32:	ea5f 5519 	movs.w	r5, r9, lsr #20
  405c36:	900a      	str	r0, [sp, #40]	; 0x28
  405c38:	f040 808b 	bne.w	405d52 <_dtoa_r+0x1d2>
  405c3c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405c3e:	9d19      	ldr	r5, [sp, #100]	; 0x64
  405c40:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  405c44:	443d      	add	r5, r7
  405c46:	429d      	cmp	r5, r3
  405c48:	f2c0 8295 	blt.w	406176 <_dtoa_r+0x5f6>
  405c4c:	331f      	adds	r3, #31
  405c4e:	f205 4212 	addw	r2, r5, #1042	; 0x412
  405c52:	1b5b      	subs	r3, r3, r5
  405c54:	fa09 f303 	lsl.w	r3, r9, r3
  405c58:	fa2a f202 	lsr.w	r2, sl, r2
  405c5c:	ea43 0002 	orr.w	r0, r3, r2
  405c60:	f004 fac2 	bl	40a1e8 <__aeabi_ui2d>
  405c64:	2601      	movs	r6, #1
  405c66:	3d01      	subs	r5, #1
  405c68:	46b8      	mov	r8, r7
  405c6a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405c6e:	9616      	str	r6, [sp, #88]	; 0x58
  405c70:	2200      	movs	r2, #0
  405c72:	4b78      	ldr	r3, [pc, #480]	; (405e54 <_dtoa_r+0x2d4>)
  405c74:	f004 f97a 	bl	409f6c <__aeabi_dsub>
  405c78:	a36d      	add	r3, pc, #436	; (adr r3, 405e30 <_dtoa_r+0x2b0>)
  405c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c7e:	f004 fb29 	bl	40a2d4 <__aeabi_dmul>
  405c82:	a36d      	add	r3, pc, #436	; (adr r3, 405e38 <_dtoa_r+0x2b8>)
  405c84:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c88:	f004 f972 	bl	409f70 <__adddf3>
  405c8c:	4606      	mov	r6, r0
  405c8e:	4628      	mov	r0, r5
  405c90:	460f      	mov	r7, r1
  405c92:	f004 fab9 	bl	40a208 <__aeabi_i2d>
  405c96:	a36a      	add	r3, pc, #424	; (adr r3, 405e40 <_dtoa_r+0x2c0>)
  405c98:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c9c:	f004 fb1a 	bl	40a2d4 <__aeabi_dmul>
  405ca0:	4602      	mov	r2, r0
  405ca2:	460b      	mov	r3, r1
  405ca4:	4630      	mov	r0, r6
  405ca6:	4639      	mov	r1, r7
  405ca8:	f004 f962 	bl	409f70 <__adddf3>
  405cac:	4606      	mov	r6, r0
  405cae:	460f      	mov	r7, r1
  405cb0:	f004 fdaa 	bl	40a808 <__aeabi_d2iz>
  405cb4:	4639      	mov	r1, r7
  405cb6:	9007      	str	r0, [sp, #28]
  405cb8:	2200      	movs	r2, #0
  405cba:	4630      	mov	r0, r6
  405cbc:	2300      	movs	r3, #0
  405cbe:	f004 fd7b 	bl	40a7b8 <__aeabi_dcmplt>
  405cc2:	2800      	cmp	r0, #0
  405cc4:	f040 8229 	bne.w	40611a <_dtoa_r+0x59a>
  405cc8:	9e07      	ldr	r6, [sp, #28]
  405cca:	2e16      	cmp	r6, #22
  405ccc:	f200 8222 	bhi.w	406114 <_dtoa_r+0x594>
  405cd0:	4961      	ldr	r1, [pc, #388]	; (405e58 <_dtoa_r+0x2d8>)
  405cd2:	4652      	mov	r2, sl
  405cd4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  405cd8:	465b      	mov	r3, fp
  405cda:	e9d1 0100 	ldrd	r0, r1, [r1]
  405cde:	f004 fd89 	bl	40a7f4 <__aeabi_dcmpgt>
  405ce2:	2800      	cmp	r0, #0
  405ce4:	f000 824c 	beq.w	406180 <_dtoa_r+0x600>
  405ce8:	3e01      	subs	r6, #1
  405cea:	9607      	str	r6, [sp, #28]
  405cec:	2600      	movs	r6, #0
  405cee:	960e      	str	r6, [sp, #56]	; 0x38
  405cf0:	ebc5 0508 	rsb	r5, r5, r8
  405cf4:	3d01      	subs	r5, #1
  405cf6:	9506      	str	r5, [sp, #24]
  405cf8:	f100 8226 	bmi.w	406148 <_dtoa_r+0x5c8>
  405cfc:	2500      	movs	r5, #0
  405cfe:	9508      	str	r5, [sp, #32]
  405d00:	9e07      	ldr	r6, [sp, #28]
  405d02:	2e00      	cmp	r6, #0
  405d04:	f2c0 8217 	blt.w	406136 <_dtoa_r+0x5b6>
  405d08:	9d06      	ldr	r5, [sp, #24]
  405d0a:	960d      	str	r6, [sp, #52]	; 0x34
  405d0c:	4435      	add	r5, r6
  405d0e:	2600      	movs	r6, #0
  405d10:	9506      	str	r5, [sp, #24]
  405d12:	960c      	str	r6, [sp, #48]	; 0x30
  405d14:	9d24      	ldr	r5, [sp, #144]	; 0x90
  405d16:	2d09      	cmp	r5, #9
  405d18:	d82d      	bhi.n	405d76 <_dtoa_r+0x1f6>
  405d1a:	2d05      	cmp	r5, #5
  405d1c:	bfc4      	itt	gt
  405d1e:	3d04      	subgt	r5, #4
  405d20:	9524      	strgt	r5, [sp, #144]	; 0x90
  405d22:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405d24:	bfc8      	it	gt
  405d26:	2500      	movgt	r5, #0
  405d28:	f1a6 0302 	sub.w	r3, r6, #2
  405d2c:	bfd8      	it	le
  405d2e:	2501      	movle	r5, #1
  405d30:	2b03      	cmp	r3, #3
  405d32:	d822      	bhi.n	405d7a <_dtoa_r+0x1fa>
  405d34:	e8df f013 	tbh	[pc, r3, lsl #1]
  405d38:	029e03b7 	.word	0x029e03b7
  405d3c:	049a03c0 	.word	0x049a03c0
  405d40:	4a46      	ldr	r2, [pc, #280]	; (405e5c <_dtoa_r+0x2dc>)
  405d42:	4b43      	ldr	r3, [pc, #268]	; (405e50 <_dtoa_r+0x2d0>)
  405d44:	f3c9 0013 	ubfx	r0, r9, #0, #20
  405d48:	2800      	cmp	r0, #0
  405d4a:	bf0c      	ite	eq
  405d4c:	4610      	moveq	r0, r2
  405d4e:	4618      	movne	r0, r3
  405d50:	e752      	b.n	405bf8 <_dtoa_r+0x78>
  405d52:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405d56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  405d5a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  405d5e:	4650      	mov	r0, sl
  405d60:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  405d64:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405d68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  405d6c:	e780      	b.n	405c70 <_dtoa_r+0xf0>
  405d6e:	483c      	ldr	r0, [pc, #240]	; (405e60 <_dtoa_r+0x2e0>)
  405d70:	e736      	b.n	405be0 <_dtoa_r+0x60>
  405d72:	1cc3      	adds	r3, r0, #3
  405d74:	e749      	b.n	405c0a <_dtoa_r+0x8a>
  405d76:	2500      	movs	r5, #0
  405d78:	9524      	str	r5, [sp, #144]	; 0x90
  405d7a:	2500      	movs	r5, #0
  405d7c:	6465      	str	r5, [r4, #68]	; 0x44
  405d7e:	4629      	mov	r1, r5
  405d80:	4620      	mov	r0, r4
  405d82:	f001 fe6f 	bl	407a64 <_Balloc>
  405d86:	f04f 39ff 	mov.w	r9, #4294967295
  405d8a:	2601      	movs	r6, #1
  405d8c:	9009      	str	r0, [sp, #36]	; 0x24
  405d8e:	9525      	str	r5, [sp, #148]	; 0x94
  405d90:	6420      	str	r0, [r4, #64]	; 0x40
  405d92:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405d96:	960b      	str	r6, [sp, #44]	; 0x2c
  405d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405d9a:	2b00      	cmp	r3, #0
  405d9c:	f2c0 80d2 	blt.w	405f44 <_dtoa_r+0x3c4>
  405da0:	9e07      	ldr	r6, [sp, #28]
  405da2:	2e0e      	cmp	r6, #14
  405da4:	f300 80ce 	bgt.w	405f44 <_dtoa_r+0x3c4>
  405da8:	4b2b      	ldr	r3, [pc, #172]	; (405e58 <_dtoa_r+0x2d8>)
  405daa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  405dae:	e9d3 0100 	ldrd	r0, r1, [r3]
  405db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405db6:	9925      	ldr	r1, [sp, #148]	; 0x94
  405db8:	2900      	cmp	r1, #0
  405dba:	f2c0 8380 	blt.w	4064be <_dtoa_r+0x93e>
  405dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405dc2:	4659      	mov	r1, fp
  405dc4:	4650      	mov	r0, sl
  405dc6:	f004 fbaf 	bl	40a528 <__aeabi_ddiv>
  405dca:	f004 fd1d 	bl	40a808 <__aeabi_d2iz>
  405dce:	4605      	mov	r5, r0
  405dd0:	f004 fa1a 	bl	40a208 <__aeabi_i2d>
  405dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405dd8:	f004 fa7c 	bl	40a2d4 <__aeabi_dmul>
  405ddc:	4602      	mov	r2, r0
  405dde:	460b      	mov	r3, r1
  405de0:	4650      	mov	r0, sl
  405de2:	4659      	mov	r1, fp
  405de4:	f004 f8c2 	bl	409f6c <__aeabi_dsub>
  405de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405dea:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405dee:	f1b9 0f01 	cmp.w	r9, #1
  405df2:	4606      	mov	r6, r0
  405df4:	460f      	mov	r7, r1
  405df6:	7013      	strb	r3, [r2, #0]
  405df8:	f102 0b01 	add.w	fp, r2, #1
  405dfc:	d064      	beq.n	405ec8 <_dtoa_r+0x348>
  405dfe:	2200      	movs	r2, #0
  405e00:	4b18      	ldr	r3, [pc, #96]	; (405e64 <_dtoa_r+0x2e4>)
  405e02:	f004 fa67 	bl	40a2d4 <__aeabi_dmul>
  405e06:	2200      	movs	r2, #0
  405e08:	2300      	movs	r3, #0
  405e0a:	4606      	mov	r6, r0
  405e0c:	460f      	mov	r7, r1
  405e0e:	f004 fcc9 	bl	40a7a4 <__aeabi_dcmpeq>
  405e12:	2800      	cmp	r0, #0
  405e14:	f040 8081 	bne.w	405f1a <_dtoa_r+0x39a>
  405e18:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  405e1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405e1e:	44c8      	add	r8, r9
  405e20:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  405e24:	f105 0902 	add.w	r9, r5, #2
  405e28:	9403      	str	r4, [sp, #12]
  405e2a:	e028      	b.n	405e7e <_dtoa_r+0x2fe>
  405e2c:	f3af 8000 	nop.w
  405e30:	636f4361 	.word	0x636f4361
  405e34:	3fd287a7 	.word	0x3fd287a7
  405e38:	8b60c8b3 	.word	0x8b60c8b3
  405e3c:	3fc68a28 	.word	0x3fc68a28
  405e40:	509f79fb 	.word	0x509f79fb
  405e44:	3fd34413 	.word	0x3fd34413
  405e48:	7ff00000 	.word	0x7ff00000
  405e4c:	0040b715 	.word	0x0040b715
  405e50:	0040b754 	.word	0x0040b754
  405e54:	3ff80000 	.word	0x3ff80000
  405e58:	0040b768 	.word	0x0040b768
  405e5c:	0040b748 	.word	0x0040b748
  405e60:	0040b714 	.word	0x0040b714
  405e64:	40240000 	.word	0x40240000
  405e68:	f004 fa34 	bl	40a2d4 <__aeabi_dmul>
  405e6c:	2200      	movs	r2, #0
  405e6e:	2300      	movs	r3, #0
  405e70:	4606      	mov	r6, r0
  405e72:	460f      	mov	r7, r1
  405e74:	f004 fc96 	bl	40a7a4 <__aeabi_dcmpeq>
  405e78:	2800      	cmp	r0, #0
  405e7a:	f040 83c1 	bne.w	406600 <_dtoa_r+0xa80>
  405e7e:	4652      	mov	r2, sl
  405e80:	465b      	mov	r3, fp
  405e82:	4630      	mov	r0, r6
  405e84:	4639      	mov	r1, r7
  405e86:	f004 fb4f 	bl	40a528 <__aeabi_ddiv>
  405e8a:	f004 fcbd 	bl	40a808 <__aeabi_d2iz>
  405e8e:	4605      	mov	r5, r0
  405e90:	f004 f9ba 	bl	40a208 <__aeabi_i2d>
  405e94:	4652      	mov	r2, sl
  405e96:	465b      	mov	r3, fp
  405e98:	f004 fa1c 	bl	40a2d4 <__aeabi_dmul>
  405e9c:	4602      	mov	r2, r0
  405e9e:	460b      	mov	r3, r1
  405ea0:	4630      	mov	r0, r6
  405ea2:	4639      	mov	r1, r7
  405ea4:	f004 f862 	bl	409f6c <__aeabi_dsub>
  405ea8:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  405eac:	45c1      	cmp	r9, r8
  405eae:	f809 ec01 	strb.w	lr, [r9, #-1]
  405eb2:	464c      	mov	r4, r9
  405eb4:	4606      	mov	r6, r0
  405eb6:	460f      	mov	r7, r1
  405eb8:	f04f 0200 	mov.w	r2, #0
  405ebc:	4ba7      	ldr	r3, [pc, #668]	; (40615c <_dtoa_r+0x5dc>)
  405ebe:	f109 0901 	add.w	r9, r9, #1
  405ec2:	d1d1      	bne.n	405e68 <_dtoa_r+0x2e8>
  405ec4:	46a3      	mov	fp, r4
  405ec6:	9c03      	ldr	r4, [sp, #12]
  405ec8:	4632      	mov	r2, r6
  405eca:	463b      	mov	r3, r7
  405ecc:	4630      	mov	r0, r6
  405ece:	4639      	mov	r1, r7
  405ed0:	f004 f84e 	bl	409f70 <__adddf3>
  405ed4:	4606      	mov	r6, r0
  405ed6:	460f      	mov	r7, r1
  405ed8:	4632      	mov	r2, r6
  405eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405ede:	463b      	mov	r3, r7
  405ee0:	f004 fc6a 	bl	40a7b8 <__aeabi_dcmplt>
  405ee4:	b940      	cbnz	r0, 405ef8 <_dtoa_r+0x378>
  405ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405eea:	4632      	mov	r2, r6
  405eec:	463b      	mov	r3, r7
  405eee:	f004 fc59 	bl	40a7a4 <__aeabi_dcmpeq>
  405ef2:	b190      	cbz	r0, 405f1a <_dtoa_r+0x39a>
  405ef4:	07eb      	lsls	r3, r5, #31
  405ef6:	d510      	bpl.n	405f1a <_dtoa_r+0x39a>
  405ef8:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  405efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405efe:	e005      	b.n	405f0c <_dtoa_r+0x38c>
  405f00:	429a      	cmp	r2, r3
  405f02:	f000 8429 	beq.w	406758 <_dtoa_r+0xbd8>
  405f06:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  405f0a:	469b      	mov	fp, r3
  405f0c:	2d39      	cmp	r5, #57	; 0x39
  405f0e:	f10b 33ff 	add.w	r3, fp, #4294967295
  405f12:	d0f5      	beq.n	405f00 <_dtoa_r+0x380>
  405f14:	1c6a      	adds	r2, r5, #1
  405f16:	b2d2      	uxtb	r2, r2
  405f18:	701a      	strb	r2, [r3, #0]
  405f1a:	4620      	mov	r0, r4
  405f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
  405f1e:	f001 fdc7 	bl	407ab0 <_Bfree>
  405f22:	9e07      	ldr	r6, [sp, #28]
  405f24:	9d26      	ldr	r5, [sp, #152]	; 0x98
  405f26:	1c73      	adds	r3, r6, #1
  405f28:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  405f2a:	2200      	movs	r2, #0
  405f2c:	f88b 2000 	strb.w	r2, [fp]
  405f30:	602b      	str	r3, [r5, #0]
  405f32:	2e00      	cmp	r6, #0
  405f34:	f000 8325 	beq.w	406582 <_dtoa_r+0xa02>
  405f38:	9809      	ldr	r0, [sp, #36]	; 0x24
  405f3a:	f8c6 b000 	str.w	fp, [r6]
  405f3e:	b01b      	add	sp, #108	; 0x6c
  405f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405f46:	2d00      	cmp	r5, #0
  405f48:	f000 8103 	beq.w	406152 <_dtoa_r+0x5d2>
  405f4c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405f4e:	2e01      	cmp	r6, #1
  405f50:	f340 82dc 	ble.w	40650c <_dtoa_r+0x98c>
  405f54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  405f56:	f109 37ff 	add.w	r7, r9, #4294967295
  405f5a:	42be      	cmp	r6, r7
  405f5c:	f2c0 8389 	blt.w	406672 <_dtoa_r+0xaf2>
  405f60:	1bf7      	subs	r7, r6, r7
  405f62:	f1b9 0f00 	cmp.w	r9, #0
  405f66:	f2c0 8487 	blt.w	406878 <_dtoa_r+0xcf8>
  405f6a:	9d08      	ldr	r5, [sp, #32]
  405f6c:	464b      	mov	r3, r9
  405f6e:	9e08      	ldr	r6, [sp, #32]
  405f70:	4620      	mov	r0, r4
  405f72:	441e      	add	r6, r3
  405f74:	9608      	str	r6, [sp, #32]
  405f76:	9e06      	ldr	r6, [sp, #24]
  405f78:	2101      	movs	r1, #1
  405f7a:	441e      	add	r6, r3
  405f7c:	9606      	str	r6, [sp, #24]
  405f7e:	f001 fe39 	bl	407bf4 <__i2b>
  405f82:	4606      	mov	r6, r0
  405f84:	b165      	cbz	r5, 405fa0 <_dtoa_r+0x420>
  405f86:	9806      	ldr	r0, [sp, #24]
  405f88:	2800      	cmp	r0, #0
  405f8a:	dd09      	ble.n	405fa0 <_dtoa_r+0x420>
  405f8c:	4603      	mov	r3, r0
  405f8e:	9908      	ldr	r1, [sp, #32]
  405f90:	42ab      	cmp	r3, r5
  405f92:	bfa8      	it	ge
  405f94:	462b      	movge	r3, r5
  405f96:	1ac9      	subs	r1, r1, r3
  405f98:	1ac0      	subs	r0, r0, r3
  405f9a:	9108      	str	r1, [sp, #32]
  405f9c:	1aed      	subs	r5, r5, r3
  405f9e:	9006      	str	r0, [sp, #24]
  405fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405fa2:	2a00      	cmp	r2, #0
  405fa4:	dd1d      	ble.n	405fe2 <_dtoa_r+0x462>
  405fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405fa8:	2b00      	cmp	r3, #0
  405faa:	f000 8358 	beq.w	40665e <_dtoa_r+0xade>
  405fae:	2f00      	cmp	r7, #0
  405fb0:	dd11      	ble.n	405fd6 <_dtoa_r+0x456>
  405fb2:	4631      	mov	r1, r6
  405fb4:	463a      	mov	r2, r7
  405fb6:	4620      	mov	r0, r4
  405fb8:	f001 fec4 	bl	407d44 <__pow5mult>
  405fbc:	4606      	mov	r6, r0
  405fbe:	4631      	mov	r1, r6
  405fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405fc2:	4620      	mov	r0, r4
  405fc4:	f001 fe20 	bl	407c08 <__multiply>
  405fc8:	990a      	ldr	r1, [sp, #40]	; 0x28
  405fca:	4680      	mov	r8, r0
  405fcc:	4620      	mov	r0, r4
  405fce:	f001 fd6f 	bl	407ab0 <_Bfree>
  405fd2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  405fd6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  405fda:	ebbe 0207 	subs.w	r2, lr, r7
  405fde:	f040 828f 	bne.w	406500 <_dtoa_r+0x980>
  405fe2:	4620      	mov	r0, r4
  405fe4:	2101      	movs	r1, #1
  405fe6:	f001 fe05 	bl	407bf4 <__i2b>
  405fea:	4680      	mov	r8, r0
  405fec:	980d      	ldr	r0, [sp, #52]	; 0x34
  405fee:	2800      	cmp	r0, #0
  405ff0:	dd05      	ble.n	405ffe <_dtoa_r+0x47e>
  405ff2:	4641      	mov	r1, r8
  405ff4:	4620      	mov	r0, r4
  405ff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405ff8:	f001 fea4 	bl	407d44 <__pow5mult>
  405ffc:	4680      	mov	r8, r0
  405ffe:	9924      	ldr	r1, [sp, #144]	; 0x90
  406000:	2901      	cmp	r1, #1
  406002:	f340 82c1 	ble.w	406588 <_dtoa_r+0xa08>
  406006:	2700      	movs	r7, #0
  406008:	980d      	ldr	r0, [sp, #52]	; 0x34
  40600a:	2800      	cmp	r0, #0
  40600c:	f040 82af 	bne.w	40656e <_dtoa_r+0x9ee>
  406010:	2001      	movs	r0, #1
  406012:	9b06      	ldr	r3, [sp, #24]
  406014:	4403      	add	r3, r0
  406016:	f013 031f 	ands.w	r3, r3, #31
  40601a:	f000 80a1 	beq.w	406160 <_dtoa_r+0x5e0>
  40601e:	f1c3 0220 	rsb	r2, r3, #32
  406022:	2a04      	cmp	r2, #4
  406024:	f340 84b7 	ble.w	406996 <_dtoa_r+0xe16>
  406028:	9908      	ldr	r1, [sp, #32]
  40602a:	9a06      	ldr	r2, [sp, #24]
  40602c:	f1c3 031c 	rsb	r3, r3, #28
  406030:	4419      	add	r1, r3
  406032:	441a      	add	r2, r3
  406034:	9108      	str	r1, [sp, #32]
  406036:	441d      	add	r5, r3
  406038:	9206      	str	r2, [sp, #24]
  40603a:	9908      	ldr	r1, [sp, #32]
  40603c:	2900      	cmp	r1, #0
  40603e:	dd05      	ble.n	40604c <_dtoa_r+0x4cc>
  406040:	990a      	ldr	r1, [sp, #40]	; 0x28
  406042:	9a08      	ldr	r2, [sp, #32]
  406044:	4620      	mov	r0, r4
  406046:	f001 fecb 	bl	407de0 <__lshift>
  40604a:	900a      	str	r0, [sp, #40]	; 0x28
  40604c:	9a06      	ldr	r2, [sp, #24]
  40604e:	2a00      	cmp	r2, #0
  406050:	dd04      	ble.n	40605c <_dtoa_r+0x4dc>
  406052:	4641      	mov	r1, r8
  406054:	4620      	mov	r0, r4
  406056:	f001 fec3 	bl	407de0 <__lshift>
  40605a:	4680      	mov	r8, r0
  40605c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40605e:	2b00      	cmp	r3, #0
  406060:	f040 826a 	bne.w	406538 <_dtoa_r+0x9b8>
  406064:	f1b9 0f00 	cmp.w	r9, #0
  406068:	f340 82a6 	ble.w	4065b8 <_dtoa_r+0xa38>
  40606c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40606e:	2800      	cmp	r0, #0
  406070:	f040 8088 	bne.w	406184 <_dtoa_r+0x604>
  406074:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406076:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406078:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40607c:	e006      	b.n	40608c <_dtoa_r+0x50c>
  40607e:	4639      	mov	r1, r7
  406080:	4620      	mov	r0, r4
  406082:	220a      	movs	r2, #10
  406084:	2300      	movs	r3, #0
  406086:	f001 fd1d 	bl	407ac4 <__multadd>
  40608a:	4607      	mov	r7, r0
  40608c:	4638      	mov	r0, r7
  40608e:	4641      	mov	r1, r8
  406090:	f7ff fcda 	bl	405a48 <quorem>
  406094:	3030      	adds	r0, #48	; 0x30
  406096:	f80b 0005 	strb.w	r0, [fp, r5]
  40609a:	3501      	adds	r5, #1
  40609c:	45a9      	cmp	r9, r5
  40609e:	dcee      	bgt.n	40607e <_dtoa_r+0x4fe>
  4060a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4060a4:	4682      	mov	sl, r0
  4060a6:	970a      	str	r7, [sp, #40]	; 0x28
  4060a8:	f1b9 0f01 	cmp.w	r9, #1
  4060ac:	bfac      	ite	ge
  4060ae:	44cb      	addge	fp, r9
  4060b0:	f10b 0b01 	addlt.w	fp, fp, #1
  4060b4:	2500      	movs	r5, #0
  4060b6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4060b8:	2201      	movs	r2, #1
  4060ba:	4620      	mov	r0, r4
  4060bc:	f001 fe90 	bl	407de0 <__lshift>
  4060c0:	4641      	mov	r1, r8
  4060c2:	900a      	str	r0, [sp, #40]	; 0x28
  4060c4:	f001 feea 	bl	407e9c <__mcmp>
  4060c8:	2800      	cmp	r0, #0
  4060ca:	f340 8309 	ble.w	4066e0 <_dtoa_r+0xb60>
  4060ce:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  4060d2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4060d4:	e005      	b.n	4060e2 <_dtoa_r+0x562>
  4060d6:	4299      	cmp	r1, r3
  4060d8:	f000 828b 	beq.w	4065f2 <_dtoa_r+0xa72>
  4060dc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4060e0:	469b      	mov	fp, r3
  4060e2:	2a39      	cmp	r2, #57	; 0x39
  4060e4:	f10b 33ff 	add.w	r3, fp, #4294967295
  4060e8:	d0f5      	beq.n	4060d6 <_dtoa_r+0x556>
  4060ea:	3201      	adds	r2, #1
  4060ec:	701a      	strb	r2, [r3, #0]
  4060ee:	4641      	mov	r1, r8
  4060f0:	4620      	mov	r0, r4
  4060f2:	f001 fcdd 	bl	407ab0 <_Bfree>
  4060f6:	2e00      	cmp	r6, #0
  4060f8:	f43f af0f 	beq.w	405f1a <_dtoa_r+0x39a>
  4060fc:	b12d      	cbz	r5, 40610a <_dtoa_r+0x58a>
  4060fe:	42b5      	cmp	r5, r6
  406100:	d003      	beq.n	40610a <_dtoa_r+0x58a>
  406102:	4629      	mov	r1, r5
  406104:	4620      	mov	r0, r4
  406106:	f001 fcd3 	bl	407ab0 <_Bfree>
  40610a:	4631      	mov	r1, r6
  40610c:	4620      	mov	r0, r4
  40610e:	f001 fccf 	bl	407ab0 <_Bfree>
  406112:	e702      	b.n	405f1a <_dtoa_r+0x39a>
  406114:	2601      	movs	r6, #1
  406116:	960e      	str	r6, [sp, #56]	; 0x38
  406118:	e5ea      	b.n	405cf0 <_dtoa_r+0x170>
  40611a:	9807      	ldr	r0, [sp, #28]
  40611c:	f004 f874 	bl	40a208 <__aeabi_i2d>
  406120:	4632      	mov	r2, r6
  406122:	463b      	mov	r3, r7
  406124:	f004 fb3e 	bl	40a7a4 <__aeabi_dcmpeq>
  406128:	2800      	cmp	r0, #0
  40612a:	f47f adcd 	bne.w	405cc8 <_dtoa_r+0x148>
  40612e:	9e07      	ldr	r6, [sp, #28]
  406130:	3e01      	subs	r6, #1
  406132:	9607      	str	r6, [sp, #28]
  406134:	e5c8      	b.n	405cc8 <_dtoa_r+0x148>
  406136:	9e07      	ldr	r6, [sp, #28]
  406138:	9d08      	ldr	r5, [sp, #32]
  40613a:	1bad      	subs	r5, r5, r6
  40613c:	9508      	str	r5, [sp, #32]
  40613e:	4275      	negs	r5, r6
  406140:	2600      	movs	r6, #0
  406142:	950c      	str	r5, [sp, #48]	; 0x30
  406144:	960d      	str	r6, [sp, #52]	; 0x34
  406146:	e5e5      	b.n	405d14 <_dtoa_r+0x194>
  406148:	426d      	negs	r5, r5
  40614a:	2600      	movs	r6, #0
  40614c:	9508      	str	r5, [sp, #32]
  40614e:	9606      	str	r6, [sp, #24]
  406150:	e5d6      	b.n	405d00 <_dtoa_r+0x180>
  406152:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406154:	9d08      	ldr	r5, [sp, #32]
  406156:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406158:	e714      	b.n	405f84 <_dtoa_r+0x404>
  40615a:	bf00      	nop
  40615c:	40240000 	.word	0x40240000
  406160:	231c      	movs	r3, #28
  406162:	f8dd e020 	ldr.w	lr, [sp, #32]
  406166:	9806      	ldr	r0, [sp, #24]
  406168:	449e      	add	lr, r3
  40616a:	4418      	add	r0, r3
  40616c:	f8cd e020 	str.w	lr, [sp, #32]
  406170:	441d      	add	r5, r3
  406172:	9006      	str	r0, [sp, #24]
  406174:	e761      	b.n	40603a <_dtoa_r+0x4ba>
  406176:	48a7      	ldr	r0, [pc, #668]	; (406414 <_dtoa_r+0x894>)
  406178:	1b40      	subs	r0, r0, r5
  40617a:	fa0a f000 	lsl.w	r0, sl, r0
  40617e:	e56f      	b.n	405c60 <_dtoa_r+0xe0>
  406180:	900e      	str	r0, [sp, #56]	; 0x38
  406182:	e5b5      	b.n	405cf0 <_dtoa_r+0x170>
  406184:	2d00      	cmp	r5, #0
  406186:	dd05      	ble.n	406194 <_dtoa_r+0x614>
  406188:	4631      	mov	r1, r6
  40618a:	462a      	mov	r2, r5
  40618c:	4620      	mov	r0, r4
  40618e:	f001 fe27 	bl	407de0 <__lshift>
  406192:	4606      	mov	r6, r0
  406194:	2f00      	cmp	r7, #0
  406196:	f040 82e9 	bne.w	40676c <_dtoa_r+0xbec>
  40619a:	4637      	mov	r7, r6
  40619c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40619e:	9809      	ldr	r0, [sp, #36]	; 0x24
  4061a0:	444d      	add	r5, r9
  4061a2:	9508      	str	r5, [sp, #32]
  4061a4:	f00a 0501 	and.w	r5, sl, #1
  4061a8:	950b      	str	r5, [sp, #44]	; 0x2c
  4061aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4061ae:	1c45      	adds	r5, r0, #1
  4061b0:	e00a      	b.n	4061c8 <_dtoa_r+0x648>
  4061b2:	f001 fc87 	bl	407ac4 <__multadd>
  4061b6:	4639      	mov	r1, r7
  4061b8:	4606      	mov	r6, r0
  4061ba:	220a      	movs	r2, #10
  4061bc:	4620      	mov	r0, r4
  4061be:	2300      	movs	r3, #0
  4061c0:	f001 fc80 	bl	407ac4 <__multadd>
  4061c4:	4607      	mov	r7, r0
  4061c6:	3501      	adds	r5, #1
  4061c8:	4641      	mov	r1, r8
  4061ca:	4648      	mov	r0, r9
  4061cc:	f7ff fc3c 	bl	405a48 <quorem>
  4061d0:	4631      	mov	r1, r6
  4061d2:	4683      	mov	fp, r0
  4061d4:	4648      	mov	r0, r9
  4061d6:	f001 fe61 	bl	407e9c <__mcmp>
  4061da:	4641      	mov	r1, r8
  4061dc:	9003      	str	r0, [sp, #12]
  4061de:	463a      	mov	r2, r7
  4061e0:	4620      	mov	r0, r4
  4061e2:	f001 fe7f 	bl	407ee4 <__mdiff>
  4061e6:	68c2      	ldr	r2, [r0, #12]
  4061e8:	1e69      	subs	r1, r5, #1
  4061ea:	4603      	mov	r3, r0
  4061ec:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  4061f0:	9106      	str	r1, [sp, #24]
  4061f2:	2a00      	cmp	r2, #0
  4061f4:	f040 8193 	bne.w	40651e <_dtoa_r+0x99e>
  4061f8:	4619      	mov	r1, r3
  4061fa:	4648      	mov	r0, r9
  4061fc:	9302      	str	r3, [sp, #8]
  4061fe:	f001 fe4d 	bl	407e9c <__mcmp>
  406202:	9b02      	ldr	r3, [sp, #8]
  406204:	4602      	mov	r2, r0
  406206:	4619      	mov	r1, r3
  406208:	4620      	mov	r0, r4
  40620a:	9202      	str	r2, [sp, #8]
  40620c:	f001 fc50 	bl	407ab0 <_Bfree>
  406210:	9a02      	ldr	r2, [sp, #8]
  406212:	b92a      	cbnz	r2, 406220 <_dtoa_r+0x6a0>
  406214:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406216:	b91b      	cbnz	r3, 406220 <_dtoa_r+0x6a0>
  406218:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40621a:	2800      	cmp	r0, #0
  40621c:	f000 8393 	beq.w	406946 <_dtoa_r+0xdc6>
  406220:	9b03      	ldr	r3, [sp, #12]
  406222:	2b00      	cmp	r3, #0
  406224:	f2c0 8234 	blt.w	406690 <_dtoa_r+0xb10>
  406228:	d105      	bne.n	406236 <_dtoa_r+0x6b6>
  40622a:	9824      	ldr	r0, [sp, #144]	; 0x90
  40622c:	b918      	cbnz	r0, 406236 <_dtoa_r+0x6b6>
  40622e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406230:	2900      	cmp	r1, #0
  406232:	f000 822d 	beq.w	406690 <_dtoa_r+0xb10>
  406236:	2a00      	cmp	r2, #0
  406238:	f300 82ac 	bgt.w	406794 <_dtoa_r+0xc14>
  40623c:	f8dd e020 	ldr.w	lr, [sp, #32]
  406240:	f805 ac01 	strb.w	sl, [r5, #-1]
  406244:	4575      	cmp	r5, lr
  406246:	46ab      	mov	fp, r5
  406248:	f000 82b4 	beq.w	4067b4 <_dtoa_r+0xc34>
  40624c:	4649      	mov	r1, r9
  40624e:	220a      	movs	r2, #10
  406250:	2300      	movs	r3, #0
  406252:	4620      	mov	r0, r4
  406254:	f001 fc36 	bl	407ac4 <__multadd>
  406258:	42be      	cmp	r6, r7
  40625a:	4681      	mov	r9, r0
  40625c:	4631      	mov	r1, r6
  40625e:	4620      	mov	r0, r4
  406260:	f04f 020a 	mov.w	r2, #10
  406264:	f04f 0300 	mov.w	r3, #0
  406268:	d1a3      	bne.n	4061b2 <_dtoa_r+0x632>
  40626a:	f001 fc2b 	bl	407ac4 <__multadd>
  40626e:	4606      	mov	r6, r0
  406270:	4607      	mov	r7, r0
  406272:	e7a8      	b.n	4061c6 <_dtoa_r+0x646>
  406274:	2600      	movs	r6, #0
  406276:	960b      	str	r6, [sp, #44]	; 0x2c
  406278:	9e07      	ldr	r6, [sp, #28]
  40627a:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  40627e:	44b6      	add	lr, r6
  406280:	f10e 0901 	add.w	r9, lr, #1
  406284:	f1b9 0f00 	cmp.w	r9, #0
  406288:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  40628c:	464e      	mov	r6, r9
  40628e:	f340 8150 	ble.w	406532 <_dtoa_r+0x9b2>
  406292:	2100      	movs	r1, #0
  406294:	2e17      	cmp	r6, #23
  406296:	6461      	str	r1, [r4, #68]	; 0x44
  406298:	d90a      	bls.n	4062b0 <_dtoa_r+0x730>
  40629a:	2201      	movs	r2, #1
  40629c:	2304      	movs	r3, #4
  40629e:	005b      	lsls	r3, r3, #1
  4062a0:	f103 0014 	add.w	r0, r3, #20
  4062a4:	42b0      	cmp	r0, r6
  4062a6:	4611      	mov	r1, r2
  4062a8:	f102 0201 	add.w	r2, r2, #1
  4062ac:	d9f7      	bls.n	40629e <_dtoa_r+0x71e>
  4062ae:	6461      	str	r1, [r4, #68]	; 0x44
  4062b0:	4620      	mov	r0, r4
  4062b2:	f001 fbd7 	bl	407a64 <_Balloc>
  4062b6:	2e0e      	cmp	r6, #14
  4062b8:	9009      	str	r0, [sp, #36]	; 0x24
  4062ba:	6420      	str	r0, [r4, #64]	; 0x40
  4062bc:	f63f ad6c 	bhi.w	405d98 <_dtoa_r+0x218>
  4062c0:	2d00      	cmp	r5, #0
  4062c2:	f43f ad69 	beq.w	405d98 <_dtoa_r+0x218>
  4062c6:	9d07      	ldr	r5, [sp, #28]
  4062c8:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  4062cc:	2d00      	cmp	r5, #0
  4062ce:	f340 821c 	ble.w	40670a <_dtoa_r+0xb8a>
  4062d2:	4b51      	ldr	r3, [pc, #324]	; (406418 <_dtoa_r+0x898>)
  4062d4:	f005 020f 	and.w	r2, r5, #15
  4062d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4062dc:	112d      	asrs	r5, r5, #4
  4062de:	e9d3 6700 	ldrd	r6, r7, [r3]
  4062e2:	06eb      	lsls	r3, r5, #27
  4062e4:	f140 81cd 	bpl.w	406682 <_dtoa_r+0xb02>
  4062e8:	4b4c      	ldr	r3, [pc, #304]	; (40641c <_dtoa_r+0x89c>)
  4062ea:	4650      	mov	r0, sl
  4062ec:	4659      	mov	r1, fp
  4062ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4062f2:	f004 f919 	bl	40a528 <__aeabi_ddiv>
  4062f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4062fa:	f005 050f 	and.w	r5, r5, #15
  4062fe:	f04f 0803 	mov.w	r8, #3
  406302:	b18d      	cbz	r5, 406328 <_dtoa_r+0x7a8>
  406304:	f8df a114 	ldr.w	sl, [pc, #276]	; 40641c <_dtoa_r+0x89c>
  406308:	4630      	mov	r0, r6
  40630a:	4639      	mov	r1, r7
  40630c:	07ee      	lsls	r6, r5, #31
  40630e:	d505      	bpl.n	40631c <_dtoa_r+0x79c>
  406310:	e9da 2300 	ldrd	r2, r3, [sl]
  406314:	f108 0801 	add.w	r8, r8, #1
  406318:	f003 ffdc 	bl	40a2d4 <__aeabi_dmul>
  40631c:	106d      	asrs	r5, r5, #1
  40631e:	f10a 0a08 	add.w	sl, sl, #8
  406322:	d1f3      	bne.n	40630c <_dtoa_r+0x78c>
  406324:	4606      	mov	r6, r0
  406326:	460f      	mov	r7, r1
  406328:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40632c:	4632      	mov	r2, r6
  40632e:	463b      	mov	r3, r7
  406330:	f004 f8fa 	bl	40a528 <__aeabi_ddiv>
  406334:	4682      	mov	sl, r0
  406336:	468b      	mov	fp, r1
  406338:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40633a:	b145      	cbz	r5, 40634e <_dtoa_r+0x7ce>
  40633c:	4650      	mov	r0, sl
  40633e:	4659      	mov	r1, fp
  406340:	2200      	movs	r2, #0
  406342:	4b37      	ldr	r3, [pc, #220]	; (406420 <_dtoa_r+0x8a0>)
  406344:	f004 fa38 	bl	40a7b8 <__aeabi_dcmplt>
  406348:	2800      	cmp	r0, #0
  40634a:	f040 82aa 	bne.w	4068a2 <_dtoa_r+0xd22>
  40634e:	4640      	mov	r0, r8
  406350:	f003 ff5a 	bl	40a208 <__aeabi_i2d>
  406354:	4652      	mov	r2, sl
  406356:	465b      	mov	r3, fp
  406358:	f003 ffbc 	bl	40a2d4 <__aeabi_dmul>
  40635c:	2200      	movs	r2, #0
  40635e:	4b31      	ldr	r3, [pc, #196]	; (406424 <_dtoa_r+0x8a4>)
  406360:	f003 fe06 	bl	409f70 <__adddf3>
  406364:	4606      	mov	r6, r0
  406366:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40636a:	f1b9 0f00 	cmp.w	r9, #0
  40636e:	f000 815a 	beq.w	406626 <_dtoa_r+0xaa6>
  406372:	9d07      	ldr	r5, [sp, #28]
  406374:	46c8      	mov	r8, r9
  406376:	9517      	str	r5, [sp, #92]	; 0x5c
  406378:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40637a:	2d00      	cmp	r5, #0
  40637c:	f000 8223 	beq.w	4067c6 <_dtoa_r+0xc46>
  406380:	4b25      	ldr	r3, [pc, #148]	; (406418 <_dtoa_r+0x898>)
  406382:	2000      	movs	r0, #0
  406384:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  406388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40638c:	4926      	ldr	r1, [pc, #152]	; (406428 <_dtoa_r+0x8a8>)
  40638e:	f004 f8cb 	bl	40a528 <__aeabi_ddiv>
  406392:	4632      	mov	r2, r6
  406394:	463b      	mov	r3, r7
  406396:	f003 fde9 	bl	409f6c <__aeabi_dsub>
  40639a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40639e:	4659      	mov	r1, fp
  4063a0:	4650      	mov	r0, sl
  4063a2:	f004 fa31 	bl	40a808 <__aeabi_d2iz>
  4063a6:	4605      	mov	r5, r0
  4063a8:	f003 ff2e 	bl	40a208 <__aeabi_i2d>
  4063ac:	4602      	mov	r2, r0
  4063ae:	460b      	mov	r3, r1
  4063b0:	4650      	mov	r0, sl
  4063b2:	4659      	mov	r1, fp
  4063b4:	f003 fdda 	bl	409f6c <__aeabi_dsub>
  4063b8:	3530      	adds	r5, #48	; 0x30
  4063ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4063bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4063c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4063c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4063c8:	b2ed      	uxtb	r5, r5
  4063ca:	7035      	strb	r5, [r6, #0]
  4063cc:	f106 0b01 	add.w	fp, r6, #1
  4063d0:	f004 fa10 	bl	40a7f4 <__aeabi_dcmpgt>
  4063d4:	2800      	cmp	r0, #0
  4063d6:	f040 82ab 	bne.w	406930 <_dtoa_r+0xdb0>
  4063da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4063de:	2000      	movs	r0, #0
  4063e0:	490f      	ldr	r1, [pc, #60]	; (406420 <_dtoa_r+0x8a0>)
  4063e2:	f003 fdc3 	bl	409f6c <__aeabi_dsub>
  4063e6:	4602      	mov	r2, r0
  4063e8:	460b      	mov	r3, r1
  4063ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4063ee:	f004 fa01 	bl	40a7f4 <__aeabi_dcmpgt>
  4063f2:	2800      	cmp	r0, #0
  4063f4:	f040 82a2 	bne.w	40693c <_dtoa_r+0xdbc>
  4063f8:	f1b8 0f01 	cmp.w	r8, #1
  4063fc:	f340 8181 	ble.w	406702 <_dtoa_r+0xb82>
  406400:	44b0      	add	r8, r6
  406402:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  406406:	46a2      	mov	sl, r4
  406408:	46c1      	mov	r9, r8
  40640a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40640e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  406412:	e019      	b.n	406448 <_dtoa_r+0x8c8>
  406414:	fffffbee 	.word	0xfffffbee
  406418:	0040b768 	.word	0x0040b768
  40641c:	0040b830 	.word	0x0040b830
  406420:	3ff00000 	.word	0x3ff00000
  406424:	401c0000 	.word	0x401c0000
  406428:	3fe00000 	.word	0x3fe00000
  40642c:	2000      	movs	r0, #0
  40642e:	49a8      	ldr	r1, [pc, #672]	; (4066d0 <_dtoa_r+0xb50>)
  406430:	f003 fd9c 	bl	409f6c <__aeabi_dsub>
  406434:	4622      	mov	r2, r4
  406436:	462b      	mov	r3, r5
  406438:	f004 f9be 	bl	40a7b8 <__aeabi_dcmplt>
  40643c:	2800      	cmp	r0, #0
  40643e:	f040 827b 	bne.w	406938 <_dtoa_r+0xdb8>
  406442:	45cb      	cmp	fp, r9
  406444:	f000 815a 	beq.w	4066fc <_dtoa_r+0xb7c>
  406448:	4620      	mov	r0, r4
  40644a:	4629      	mov	r1, r5
  40644c:	2200      	movs	r2, #0
  40644e:	4ba1      	ldr	r3, [pc, #644]	; (4066d4 <_dtoa_r+0xb54>)
  406450:	f003 ff40 	bl	40a2d4 <__aeabi_dmul>
  406454:	2200      	movs	r2, #0
  406456:	4b9f      	ldr	r3, [pc, #636]	; (4066d4 <_dtoa_r+0xb54>)
  406458:	4604      	mov	r4, r0
  40645a:	460d      	mov	r5, r1
  40645c:	4630      	mov	r0, r6
  40645e:	4639      	mov	r1, r7
  406460:	f003 ff38 	bl	40a2d4 <__aeabi_dmul>
  406464:	460f      	mov	r7, r1
  406466:	4606      	mov	r6, r0
  406468:	f004 f9ce 	bl	40a808 <__aeabi_d2iz>
  40646c:	4680      	mov	r8, r0
  40646e:	f003 fecb 	bl	40a208 <__aeabi_i2d>
  406472:	4602      	mov	r2, r0
  406474:	460b      	mov	r3, r1
  406476:	4630      	mov	r0, r6
  406478:	4639      	mov	r1, r7
  40647a:	f003 fd77 	bl	409f6c <__aeabi_dsub>
  40647e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406482:	fa5f f888 	uxtb.w	r8, r8
  406486:	4622      	mov	r2, r4
  406488:	462b      	mov	r3, r5
  40648a:	f80b 8b01 	strb.w	r8, [fp], #1
  40648e:	4606      	mov	r6, r0
  406490:	460f      	mov	r7, r1
  406492:	f004 f991 	bl	40a7b8 <__aeabi_dcmplt>
  406496:	4632      	mov	r2, r6
  406498:	463b      	mov	r3, r7
  40649a:	2800      	cmp	r0, #0
  40649c:	d0c6      	beq.n	40642c <_dtoa_r+0x8ac>
  40649e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4064a0:	4654      	mov	r4, sl
  4064a2:	9607      	str	r6, [sp, #28]
  4064a4:	e539      	b.n	405f1a <_dtoa_r+0x39a>
  4064a6:	2600      	movs	r6, #0
  4064a8:	960b      	str	r6, [sp, #44]	; 0x2c
  4064aa:	9825      	ldr	r0, [sp, #148]	; 0x94
  4064ac:	2800      	cmp	r0, #0
  4064ae:	dd3c      	ble.n	40652a <_dtoa_r+0x9aa>
  4064b0:	4606      	mov	r6, r0
  4064b2:	900f      	str	r0, [sp, #60]	; 0x3c
  4064b4:	4681      	mov	r9, r0
  4064b6:	e6ec      	b.n	406292 <_dtoa_r+0x712>
  4064b8:	2601      	movs	r6, #1
  4064ba:	960b      	str	r6, [sp, #44]	; 0x2c
  4064bc:	e7f5      	b.n	4064aa <_dtoa_r+0x92a>
  4064be:	f1b9 0f00 	cmp.w	r9, #0
  4064c2:	f73f ac7c 	bgt.w	405dbe <_dtoa_r+0x23e>
  4064c6:	f040 80c6 	bne.w	406656 <_dtoa_r+0xad6>
  4064ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4064ce:	2200      	movs	r2, #0
  4064d0:	4b81      	ldr	r3, [pc, #516]	; (4066d8 <_dtoa_r+0xb58>)
  4064d2:	f003 feff 	bl	40a2d4 <__aeabi_dmul>
  4064d6:	4652      	mov	r2, sl
  4064d8:	465b      	mov	r3, fp
  4064da:	f004 f981 	bl	40a7e0 <__aeabi_dcmpge>
  4064de:	46c8      	mov	r8, r9
  4064e0:	464e      	mov	r6, r9
  4064e2:	2800      	cmp	r0, #0
  4064e4:	d07c      	beq.n	4065e0 <_dtoa_r+0xa60>
  4064e6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  4064e8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4064ec:	43ed      	mvns	r5, r5
  4064ee:	9507      	str	r5, [sp, #28]
  4064f0:	4641      	mov	r1, r8
  4064f2:	4620      	mov	r0, r4
  4064f4:	f001 fadc 	bl	407ab0 <_Bfree>
  4064f8:	2e00      	cmp	r6, #0
  4064fa:	f47f ae06 	bne.w	40610a <_dtoa_r+0x58a>
  4064fe:	e50c      	b.n	405f1a <_dtoa_r+0x39a>
  406500:	990a      	ldr	r1, [sp, #40]	; 0x28
  406502:	4620      	mov	r0, r4
  406504:	f001 fc1e 	bl	407d44 <__pow5mult>
  406508:	900a      	str	r0, [sp, #40]	; 0x28
  40650a:	e56a      	b.n	405fe2 <_dtoa_r+0x462>
  40650c:	9d16      	ldr	r5, [sp, #88]	; 0x58
  40650e:	2d00      	cmp	r5, #0
  406510:	f000 81b8 	beq.w	406884 <_dtoa_r+0xd04>
  406514:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406518:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40651a:	9d08      	ldr	r5, [sp, #32]
  40651c:	e527      	b.n	405f6e <_dtoa_r+0x3ee>
  40651e:	4601      	mov	r1, r0
  406520:	4620      	mov	r0, r4
  406522:	f001 fac5 	bl	407ab0 <_Bfree>
  406526:	2201      	movs	r2, #1
  406528:	e67a      	b.n	406220 <_dtoa_r+0x6a0>
  40652a:	2601      	movs	r6, #1
  40652c:	9625      	str	r6, [sp, #148]	; 0x94
  40652e:	960f      	str	r6, [sp, #60]	; 0x3c
  406530:	46b1      	mov	r9, r6
  406532:	2100      	movs	r1, #0
  406534:	6461      	str	r1, [r4, #68]	; 0x44
  406536:	e6bb      	b.n	4062b0 <_dtoa_r+0x730>
  406538:	980a      	ldr	r0, [sp, #40]	; 0x28
  40653a:	4641      	mov	r1, r8
  40653c:	f001 fcae 	bl	407e9c <__mcmp>
  406540:	2800      	cmp	r0, #0
  406542:	f6bf ad8f 	bge.w	406064 <_dtoa_r+0x4e4>
  406546:	f8dd e01c 	ldr.w	lr, [sp, #28]
  40654a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40654c:	f10e 3eff 	add.w	lr, lr, #4294967295
  406550:	4620      	mov	r0, r4
  406552:	220a      	movs	r2, #10
  406554:	2300      	movs	r3, #0
  406556:	f8cd e01c 	str.w	lr, [sp, #28]
  40655a:	f001 fab3 	bl	407ac4 <__multadd>
  40655e:	900a      	str	r0, [sp, #40]	; 0x28
  406560:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406562:	2800      	cmp	r0, #0
  406564:	f040 8209 	bne.w	40697a <_dtoa_r+0xdfa>
  406568:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40656c:	e57a      	b.n	406064 <_dtoa_r+0x4e4>
  40656e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406572:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406576:	6918      	ldr	r0, [r3, #16]
  406578:	f001 faee 	bl	407b58 <__hi0bits>
  40657c:	f1c0 0020 	rsb	r0, r0, #32
  406580:	e547      	b.n	406012 <_dtoa_r+0x492>
  406582:	9809      	ldr	r0, [sp, #36]	; 0x24
  406584:	f7ff bb2c 	b.w	405be0 <_dtoa_r+0x60>
  406588:	f1ba 0f00 	cmp.w	sl, #0
  40658c:	f47f ad3b 	bne.w	406006 <_dtoa_r+0x486>
  406590:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406594:	2b00      	cmp	r3, #0
  406596:	f040 817c 	bne.w	406892 <_dtoa_r+0xd12>
  40659a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40659e:	0d3f      	lsrs	r7, r7, #20
  4065a0:	053f      	lsls	r7, r7, #20
  4065a2:	2f00      	cmp	r7, #0
  4065a4:	f43f ad30 	beq.w	406008 <_dtoa_r+0x488>
  4065a8:	9a08      	ldr	r2, [sp, #32]
  4065aa:	9b06      	ldr	r3, [sp, #24]
  4065ac:	3201      	adds	r2, #1
  4065ae:	3301      	adds	r3, #1
  4065b0:	9208      	str	r2, [sp, #32]
  4065b2:	9306      	str	r3, [sp, #24]
  4065b4:	2701      	movs	r7, #1
  4065b6:	e527      	b.n	406008 <_dtoa_r+0x488>
  4065b8:	9924      	ldr	r1, [sp, #144]	; 0x90
  4065ba:	2902      	cmp	r1, #2
  4065bc:	f77f ad56 	ble.w	40606c <_dtoa_r+0x4ec>
  4065c0:	f1b9 0f00 	cmp.w	r9, #0
  4065c4:	d18f      	bne.n	4064e6 <_dtoa_r+0x966>
  4065c6:	4641      	mov	r1, r8
  4065c8:	464b      	mov	r3, r9
  4065ca:	2205      	movs	r2, #5
  4065cc:	4620      	mov	r0, r4
  4065ce:	f001 fa79 	bl	407ac4 <__multadd>
  4065d2:	4680      	mov	r8, r0
  4065d4:	4641      	mov	r1, r8
  4065d6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4065d8:	f001 fc60 	bl	407e9c <__mcmp>
  4065dc:	2800      	cmp	r0, #0
  4065de:	dd82      	ble.n	4064e6 <_dtoa_r+0x966>
  4065e0:	9d07      	ldr	r5, [sp, #28]
  4065e2:	2331      	movs	r3, #49	; 0x31
  4065e4:	3501      	adds	r5, #1
  4065e6:	9507      	str	r5, [sp, #28]
  4065e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4065ea:	702b      	strb	r3, [r5, #0]
  4065ec:	f105 0b01 	add.w	fp, r5, #1
  4065f0:	e77e      	b.n	4064f0 <_dtoa_r+0x970>
  4065f2:	9807      	ldr	r0, [sp, #28]
  4065f4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4065f6:	2331      	movs	r3, #49	; 0x31
  4065f8:	3001      	adds	r0, #1
  4065fa:	9007      	str	r0, [sp, #28]
  4065fc:	700b      	strb	r3, [r1, #0]
  4065fe:	e576      	b.n	4060ee <_dtoa_r+0x56e>
  406600:	46a3      	mov	fp, r4
  406602:	9c03      	ldr	r4, [sp, #12]
  406604:	e489      	b.n	405f1a <_dtoa_r+0x39a>
  406606:	4640      	mov	r0, r8
  406608:	f003 fdfe 	bl	40a208 <__aeabi_i2d>
  40660c:	4602      	mov	r2, r0
  40660e:	460b      	mov	r3, r1
  406610:	4650      	mov	r0, sl
  406612:	4659      	mov	r1, fp
  406614:	f003 fe5e 	bl	40a2d4 <__aeabi_dmul>
  406618:	2200      	movs	r2, #0
  40661a:	4b30      	ldr	r3, [pc, #192]	; (4066dc <_dtoa_r+0xb5c>)
  40661c:	f003 fca8 	bl	409f70 <__adddf3>
  406620:	4606      	mov	r6, r0
  406622:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  406626:	4650      	mov	r0, sl
  406628:	4659      	mov	r1, fp
  40662a:	2200      	movs	r2, #0
  40662c:	4b2a      	ldr	r3, [pc, #168]	; (4066d8 <_dtoa_r+0xb58>)
  40662e:	f003 fc9d 	bl	409f6c <__aeabi_dsub>
  406632:	4632      	mov	r2, r6
  406634:	463b      	mov	r3, r7
  406636:	4682      	mov	sl, r0
  406638:	468b      	mov	fp, r1
  40663a:	f004 f8db 	bl	40a7f4 <__aeabi_dcmpgt>
  40663e:	2800      	cmp	r0, #0
  406640:	f040 80bd 	bne.w	4067be <_dtoa_r+0xc3e>
  406644:	4632      	mov	r2, r6
  406646:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40664a:	4650      	mov	r0, sl
  40664c:	4659      	mov	r1, fp
  40664e:	f004 f8b3 	bl	40a7b8 <__aeabi_dcmplt>
  406652:	2800      	cmp	r0, #0
  406654:	d055      	beq.n	406702 <_dtoa_r+0xb82>
  406656:	f04f 0800 	mov.w	r8, #0
  40665a:	4646      	mov	r6, r8
  40665c:	e743      	b.n	4064e6 <_dtoa_r+0x966>
  40665e:	990a      	ldr	r1, [sp, #40]	; 0x28
  406660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406662:	4620      	mov	r0, r4
  406664:	f001 fb6e 	bl	407d44 <__pow5mult>
  406668:	900a      	str	r0, [sp, #40]	; 0x28
  40666a:	e4ba      	b.n	405fe2 <_dtoa_r+0x462>
  40666c:	2601      	movs	r6, #1
  40666e:	960b      	str	r6, [sp, #44]	; 0x2c
  406670:	e602      	b.n	406278 <_dtoa_r+0x6f8>
  406672:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  406674:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  406676:	1b7b      	subs	r3, r7, r5
  406678:	441e      	add	r6, r3
  40667a:	970c      	str	r7, [sp, #48]	; 0x30
  40667c:	960d      	str	r6, [sp, #52]	; 0x34
  40667e:	2700      	movs	r7, #0
  406680:	e46f      	b.n	405f62 <_dtoa_r+0x3e2>
  406682:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406686:	f04f 0802 	mov.w	r8, #2
  40668a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40668e:	e638      	b.n	406302 <_dtoa_r+0x782>
  406690:	2a00      	cmp	r2, #0
  406692:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  406696:	46d9      	mov	r9, fp
  406698:	dd11      	ble.n	4066be <_dtoa_r+0xb3e>
  40669a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40669c:	2201      	movs	r2, #1
  40669e:	4620      	mov	r0, r4
  4066a0:	f001 fb9e 	bl	407de0 <__lshift>
  4066a4:	4641      	mov	r1, r8
  4066a6:	900a      	str	r0, [sp, #40]	; 0x28
  4066a8:	f001 fbf8 	bl	407e9c <__mcmp>
  4066ac:	2800      	cmp	r0, #0
  4066ae:	f340 815d 	ble.w	40696c <_dtoa_r+0xdec>
  4066b2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4066b6:	f000 811b 	beq.w	4068f0 <_dtoa_r+0xd70>
  4066ba:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  4066be:	9b06      	ldr	r3, [sp, #24]
  4066c0:	4635      	mov	r5, r6
  4066c2:	f883 a000 	strb.w	sl, [r3]
  4066c6:	f103 0b01 	add.w	fp, r3, #1
  4066ca:	463e      	mov	r6, r7
  4066cc:	e50f      	b.n	4060ee <_dtoa_r+0x56e>
  4066ce:	bf00      	nop
  4066d0:	3ff00000 	.word	0x3ff00000
  4066d4:	40240000 	.word	0x40240000
  4066d8:	40140000 	.word	0x40140000
  4066dc:	401c0000 	.word	0x401c0000
  4066e0:	d103      	bne.n	4066ea <_dtoa_r+0xb6a>
  4066e2:	f01a 0f01 	tst.w	sl, #1
  4066e6:	f47f acf2 	bne.w	4060ce <_dtoa_r+0x54e>
  4066ea:	465b      	mov	r3, fp
  4066ec:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4066f0:	469b      	mov	fp, r3
  4066f2:	2a30      	cmp	r2, #48	; 0x30
  4066f4:	f103 33ff 	add.w	r3, r3, #4294967295
  4066f8:	d0f8      	beq.n	4066ec <_dtoa_r+0xb6c>
  4066fa:	e4f8      	b.n	4060ee <_dtoa_r+0x56e>
  4066fc:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  406700:	4654      	mov	r4, sl
  406702:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  406706:	f7ff bb47 	b.w	405d98 <_dtoa_r+0x218>
  40670a:	9e07      	ldr	r6, [sp, #28]
  40670c:	4275      	negs	r5, r6
  40670e:	2d00      	cmp	r5, #0
  406710:	f000 80c2 	beq.w	406898 <_dtoa_r+0xd18>
  406714:	4ba3      	ldr	r3, [pc, #652]	; (4069a4 <_dtoa_r+0xe24>)
  406716:	f005 020f 	and.w	r2, r5, #15
  40671a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40671e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406722:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406726:	f003 fdd5 	bl	40a2d4 <__aeabi_dmul>
  40672a:	112d      	asrs	r5, r5, #4
  40672c:	4682      	mov	sl, r0
  40672e:	468b      	mov	fp, r1
  406730:	f000 812e 	beq.w	406990 <_dtoa_r+0xe10>
  406734:	4e9c      	ldr	r6, [pc, #624]	; (4069a8 <_dtoa_r+0xe28>)
  406736:	f04f 0802 	mov.w	r8, #2
  40673a:	07ea      	lsls	r2, r5, #31
  40673c:	d505      	bpl.n	40674a <_dtoa_r+0xbca>
  40673e:	e9d6 2300 	ldrd	r2, r3, [r6]
  406742:	f108 0801 	add.w	r8, r8, #1
  406746:	f003 fdc5 	bl	40a2d4 <__aeabi_dmul>
  40674a:	106d      	asrs	r5, r5, #1
  40674c:	f106 0608 	add.w	r6, r6, #8
  406750:	d1f3      	bne.n	40673a <_dtoa_r+0xbba>
  406752:	4682      	mov	sl, r0
  406754:	468b      	mov	fp, r1
  406756:	e5ef      	b.n	406338 <_dtoa_r+0x7b8>
  406758:	9e07      	ldr	r6, [sp, #28]
  40675a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40675c:	2230      	movs	r2, #48	; 0x30
  40675e:	702a      	strb	r2, [r5, #0]
  406760:	3601      	adds	r6, #1
  406762:	2231      	movs	r2, #49	; 0x31
  406764:	9607      	str	r6, [sp, #28]
  406766:	701a      	strb	r2, [r3, #0]
  406768:	f7ff bbd7 	b.w	405f1a <_dtoa_r+0x39a>
  40676c:	6871      	ldr	r1, [r6, #4]
  40676e:	4620      	mov	r0, r4
  406770:	f001 f978 	bl	407a64 <_Balloc>
  406774:	6933      	ldr	r3, [r6, #16]
  406776:	4605      	mov	r5, r0
  406778:	1c9a      	adds	r2, r3, #2
  40677a:	0092      	lsls	r2, r2, #2
  40677c:	f106 010c 	add.w	r1, r6, #12
  406780:	300c      	adds	r0, #12
  406782:	f7fc fd71 	bl	403268 <memcpy>
  406786:	4620      	mov	r0, r4
  406788:	4629      	mov	r1, r5
  40678a:	2201      	movs	r2, #1
  40678c:	f001 fb28 	bl	407de0 <__lshift>
  406790:	4607      	mov	r7, r0
  406792:	e503      	b.n	40619c <_dtoa_r+0x61c>
  406794:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406798:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40679c:	f000 80a8 	beq.w	4068f0 <_dtoa_r+0xd70>
  4067a0:	9d06      	ldr	r5, [sp, #24]
  4067a2:	f10a 0301 	add.w	r3, sl, #1
  4067a6:	702b      	strb	r3, [r5, #0]
  4067a8:	4635      	mov	r5, r6
  4067aa:	9e06      	ldr	r6, [sp, #24]
  4067ac:	f106 0b01 	add.w	fp, r6, #1
  4067b0:	463e      	mov	r6, r7
  4067b2:	e49c      	b.n	4060ee <_dtoa_r+0x56e>
  4067b4:	4635      	mov	r5, r6
  4067b6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4067ba:	463e      	mov	r6, r7
  4067bc:	e47b      	b.n	4060b6 <_dtoa_r+0x536>
  4067be:	f04f 0800 	mov.w	r8, #0
  4067c2:	4646      	mov	r6, r8
  4067c4:	e70c      	b.n	4065e0 <_dtoa_r+0xa60>
  4067c6:	4977      	ldr	r1, [pc, #476]	; (4069a4 <_dtoa_r+0xe24>)
  4067c8:	f108 35ff 	add.w	r5, r8, #4294967295
  4067cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  4067d0:	4632      	mov	r2, r6
  4067d2:	463b      	mov	r3, r7
  4067d4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4067d8:	9510      	str	r5, [sp, #64]	; 0x40
  4067da:	f003 fd7b 	bl	40a2d4 <__aeabi_dmul>
  4067de:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  4067e2:	4659      	mov	r1, fp
  4067e4:	4650      	mov	r0, sl
  4067e6:	f004 f80f 	bl	40a808 <__aeabi_d2iz>
  4067ea:	4605      	mov	r5, r0
  4067ec:	f003 fd0c 	bl	40a208 <__aeabi_i2d>
  4067f0:	4602      	mov	r2, r0
  4067f2:	460b      	mov	r3, r1
  4067f4:	4650      	mov	r0, sl
  4067f6:	4659      	mov	r1, fp
  4067f8:	f003 fbb8 	bl	409f6c <__aeabi_dsub>
  4067fc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  406800:	3530      	adds	r5, #48	; 0x30
  406802:	f1b8 0f01 	cmp.w	r8, #1
  406806:	4606      	mov	r6, r0
  406808:	460f      	mov	r7, r1
  40680a:	f88e 5000 	strb.w	r5, [lr]
  40680e:	f10e 0b01 	add.w	fp, lr, #1
  406812:	d01e      	beq.n	406852 <_dtoa_r+0xcd2>
  406814:	9d09      	ldr	r5, [sp, #36]	; 0x24
  406816:	1e6b      	subs	r3, r5, #1
  406818:	eb03 0a08 	add.w	sl, r3, r8
  40681c:	2200      	movs	r2, #0
  40681e:	4b63      	ldr	r3, [pc, #396]	; (4069ac <_dtoa_r+0xe2c>)
  406820:	f003 fd58 	bl	40a2d4 <__aeabi_dmul>
  406824:	460f      	mov	r7, r1
  406826:	4606      	mov	r6, r0
  406828:	f003 ffee 	bl	40a808 <__aeabi_d2iz>
  40682c:	4680      	mov	r8, r0
  40682e:	f003 fceb 	bl	40a208 <__aeabi_i2d>
  406832:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406836:	4602      	mov	r2, r0
  406838:	460b      	mov	r3, r1
  40683a:	4630      	mov	r0, r6
  40683c:	4639      	mov	r1, r7
  40683e:	f003 fb95 	bl	409f6c <__aeabi_dsub>
  406842:	f805 8f01 	strb.w	r8, [r5, #1]!
  406846:	4555      	cmp	r5, sl
  406848:	d1e8      	bne.n	40681c <_dtoa_r+0xc9c>
  40684a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40684c:	4606      	mov	r6, r0
  40684e:	460f      	mov	r7, r1
  406850:	44ab      	add	fp, r5
  406852:	2200      	movs	r2, #0
  406854:	4b56      	ldr	r3, [pc, #344]	; (4069b0 <_dtoa_r+0xe30>)
  406856:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  40685a:	f003 fb89 	bl	409f70 <__adddf3>
  40685e:	4632      	mov	r2, r6
  406860:	463b      	mov	r3, r7
  406862:	f003 ffa9 	bl	40a7b8 <__aeabi_dcmplt>
  406866:	2800      	cmp	r0, #0
  406868:	d04d      	beq.n	406906 <_dtoa_r+0xd86>
  40686a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40686c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40686e:	9607      	str	r6, [sp, #28]
  406870:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  406874:	f7ff bb4a 	b.w	405f0c <_dtoa_r+0x38c>
  406878:	9e08      	ldr	r6, [sp, #32]
  40687a:	2300      	movs	r3, #0
  40687c:	ebc9 0506 	rsb	r5, r9, r6
  406880:	f7ff bb75 	b.w	405f6e <_dtoa_r+0x3ee>
  406884:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406886:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406888:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40688c:	9d08      	ldr	r5, [sp, #32]
  40688e:	f7ff bb6e 	b.w	405f6e <_dtoa_r+0x3ee>
  406892:	4657      	mov	r7, sl
  406894:	f7ff bbb8 	b.w	406008 <_dtoa_r+0x488>
  406898:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  40689c:	f04f 0802 	mov.w	r8, #2
  4068a0:	e54a      	b.n	406338 <_dtoa_r+0x7b8>
  4068a2:	f1b9 0f00 	cmp.w	r9, #0
  4068a6:	f43f aeae 	beq.w	406606 <_dtoa_r+0xa86>
  4068aa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  4068ac:	2e00      	cmp	r6, #0
  4068ae:	f77f af28 	ble.w	406702 <_dtoa_r+0xb82>
  4068b2:	2200      	movs	r2, #0
  4068b4:	4b3d      	ldr	r3, [pc, #244]	; (4069ac <_dtoa_r+0xe2c>)
  4068b6:	4650      	mov	r0, sl
  4068b8:	4659      	mov	r1, fp
  4068ba:	f003 fd0b 	bl	40a2d4 <__aeabi_dmul>
  4068be:	4682      	mov	sl, r0
  4068c0:	f108 0001 	add.w	r0, r8, #1
  4068c4:	468b      	mov	fp, r1
  4068c6:	f003 fc9f 	bl	40a208 <__aeabi_i2d>
  4068ca:	4602      	mov	r2, r0
  4068cc:	460b      	mov	r3, r1
  4068ce:	4650      	mov	r0, sl
  4068d0:	4659      	mov	r1, fp
  4068d2:	f003 fcff 	bl	40a2d4 <__aeabi_dmul>
  4068d6:	2200      	movs	r2, #0
  4068d8:	4b36      	ldr	r3, [pc, #216]	; (4069b4 <_dtoa_r+0xe34>)
  4068da:	f003 fb49 	bl	409f70 <__adddf3>
  4068de:	9d07      	ldr	r5, [sp, #28]
  4068e0:	4606      	mov	r6, r0
  4068e2:	3d01      	subs	r5, #1
  4068e4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4068e8:	9517      	str	r5, [sp, #92]	; 0x5c
  4068ea:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  4068ee:	e543      	b.n	406378 <_dtoa_r+0x7f8>
  4068f0:	4635      	mov	r5, r6
  4068f2:	9b06      	ldr	r3, [sp, #24]
  4068f4:	9e06      	ldr	r6, [sp, #24]
  4068f6:	2239      	movs	r2, #57	; 0x39
  4068f8:	7032      	strb	r2, [r6, #0]
  4068fa:	f103 0b01 	add.w	fp, r3, #1
  4068fe:	463e      	mov	r6, r7
  406900:	9909      	ldr	r1, [sp, #36]	; 0x24
  406902:	f7ff bbee 	b.w	4060e2 <_dtoa_r+0x562>
  406906:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40690a:	2000      	movs	r0, #0
  40690c:	4928      	ldr	r1, [pc, #160]	; (4069b0 <_dtoa_r+0xe30>)
  40690e:	f003 fb2d 	bl	409f6c <__aeabi_dsub>
  406912:	4632      	mov	r2, r6
  406914:	463b      	mov	r3, r7
  406916:	f003 ff6d 	bl	40a7f4 <__aeabi_dcmpgt>
  40691a:	2800      	cmp	r0, #0
  40691c:	f43f aef1 	beq.w	406702 <_dtoa_r+0xb82>
  406920:	465b      	mov	r3, fp
  406922:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  406926:	469b      	mov	fp, r3
  406928:	2a30      	cmp	r2, #48	; 0x30
  40692a:	f103 33ff 	add.w	r3, r3, #4294967295
  40692e:	d0f8      	beq.n	406922 <_dtoa_r+0xda2>
  406930:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  406932:	9507      	str	r5, [sp, #28]
  406934:	f7ff baf1 	b.w	405f1a <_dtoa_r+0x39a>
  406938:	4645      	mov	r5, r8
  40693a:	4654      	mov	r4, sl
  40693c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40693e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406940:	9607      	str	r6, [sp, #28]
  406942:	f7ff bae3 	b.w	405f0c <_dtoa_r+0x38c>
  406946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40694a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40694e:	d0cf      	beq.n	4068f0 <_dtoa_r+0xd70>
  406950:	9b03      	ldr	r3, [sp, #12]
  406952:	4635      	mov	r5, r6
  406954:	2b00      	cmp	r3, #0
  406956:	9e06      	ldr	r6, [sp, #24]
  406958:	bfc8      	it	gt
  40695a:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  40695e:	f886 a000 	strb.w	sl, [r6]
  406962:	f106 0b01 	add.w	fp, r6, #1
  406966:	463e      	mov	r6, r7
  406968:	f7ff bbc1 	b.w	4060ee <_dtoa_r+0x56e>
  40696c:	f47f aea7 	bne.w	4066be <_dtoa_r+0xb3e>
  406970:	f01a 0f01 	tst.w	sl, #1
  406974:	f43f aea3 	beq.w	4066be <_dtoa_r+0xb3e>
  406978:	e69b      	b.n	4066b2 <_dtoa_r+0xb32>
  40697a:	4631      	mov	r1, r6
  40697c:	4620      	mov	r0, r4
  40697e:	220a      	movs	r2, #10
  406980:	2300      	movs	r3, #0
  406982:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  406986:	f001 f89d 	bl	407ac4 <__multadd>
  40698a:	4606      	mov	r6, r0
  40698c:	f7ff bb6a 	b.w	406064 <_dtoa_r+0x4e4>
  406990:	f04f 0802 	mov.w	r8, #2
  406994:	e4d0      	b.n	406338 <_dtoa_r+0x7b8>
  406996:	f43f ab50 	beq.w	40603a <_dtoa_r+0x4ba>
  40699a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  40699e:	f7ff bbe0 	b.w	406162 <_dtoa_r+0x5e2>
  4069a2:	bf00      	nop
  4069a4:	0040b768 	.word	0x0040b768
  4069a8:	0040b830 	.word	0x0040b830
  4069ac:	40240000 	.word	0x40240000
  4069b0:	3fe00000 	.word	0x3fe00000
  4069b4:	401c0000 	.word	0x401c0000

004069b8 <__sflush_r>:
  4069b8:	898b      	ldrh	r3, [r1, #12]
  4069ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4069be:	b29a      	uxth	r2, r3
  4069c0:	460d      	mov	r5, r1
  4069c2:	0711      	lsls	r1, r2, #28
  4069c4:	4680      	mov	r8, r0
  4069c6:	d43c      	bmi.n	406a42 <__sflush_r+0x8a>
  4069c8:	686a      	ldr	r2, [r5, #4]
  4069ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4069ce:	2a00      	cmp	r2, #0
  4069d0:	81ab      	strh	r3, [r5, #12]
  4069d2:	dd59      	ble.n	406a88 <__sflush_r+0xd0>
  4069d4:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4069d6:	2c00      	cmp	r4, #0
  4069d8:	d04b      	beq.n	406a72 <__sflush_r+0xba>
  4069da:	b29b      	uxth	r3, r3
  4069dc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4069e0:	2100      	movs	r1, #0
  4069e2:	b292      	uxth	r2, r2
  4069e4:	f8d8 6000 	ldr.w	r6, [r8]
  4069e8:	f8c8 1000 	str.w	r1, [r8]
  4069ec:	2a00      	cmp	r2, #0
  4069ee:	d04f      	beq.n	406a90 <__sflush_r+0xd8>
  4069f0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4069f2:	075f      	lsls	r7, r3, #29
  4069f4:	d505      	bpl.n	406a02 <__sflush_r+0x4a>
  4069f6:	6869      	ldr	r1, [r5, #4]
  4069f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4069fa:	1a52      	subs	r2, r2, r1
  4069fc:	b10b      	cbz	r3, 406a02 <__sflush_r+0x4a>
  4069fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406a00:	1ad2      	subs	r2, r2, r3
  406a02:	4640      	mov	r0, r8
  406a04:	69e9      	ldr	r1, [r5, #28]
  406a06:	2300      	movs	r3, #0
  406a08:	47a0      	blx	r4
  406a0a:	1c44      	adds	r4, r0, #1
  406a0c:	d04a      	beq.n	406aa4 <__sflush_r+0xec>
  406a0e:	89ab      	ldrh	r3, [r5, #12]
  406a10:	692a      	ldr	r2, [r5, #16]
  406a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406a16:	b29b      	uxth	r3, r3
  406a18:	2100      	movs	r1, #0
  406a1a:	602a      	str	r2, [r5, #0]
  406a1c:	04da      	lsls	r2, r3, #19
  406a1e:	81ab      	strh	r3, [r5, #12]
  406a20:	6069      	str	r1, [r5, #4]
  406a22:	d44c      	bmi.n	406abe <__sflush_r+0x106>
  406a24:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406a26:	f8c8 6000 	str.w	r6, [r8]
  406a2a:	b311      	cbz	r1, 406a72 <__sflush_r+0xba>
  406a2c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406a30:	4299      	cmp	r1, r3
  406a32:	d002      	beq.n	406a3a <__sflush_r+0x82>
  406a34:	4640      	mov	r0, r8
  406a36:	f000 f9c3 	bl	406dc0 <_free_r>
  406a3a:	2000      	movs	r0, #0
  406a3c:	6328      	str	r0, [r5, #48]	; 0x30
  406a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a42:	692e      	ldr	r6, [r5, #16]
  406a44:	b1ae      	cbz	r6, 406a72 <__sflush_r+0xba>
  406a46:	0791      	lsls	r1, r2, #30
  406a48:	682c      	ldr	r4, [r5, #0]
  406a4a:	bf0c      	ite	eq
  406a4c:	696b      	ldreq	r3, [r5, #20]
  406a4e:	2300      	movne	r3, #0
  406a50:	602e      	str	r6, [r5, #0]
  406a52:	1ba4      	subs	r4, r4, r6
  406a54:	60ab      	str	r3, [r5, #8]
  406a56:	e00a      	b.n	406a6e <__sflush_r+0xb6>
  406a58:	4632      	mov	r2, r6
  406a5a:	4623      	mov	r3, r4
  406a5c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406a5e:	4640      	mov	r0, r8
  406a60:	69e9      	ldr	r1, [r5, #28]
  406a62:	47b8      	blx	r7
  406a64:	2800      	cmp	r0, #0
  406a66:	ebc0 0404 	rsb	r4, r0, r4
  406a6a:	4406      	add	r6, r0
  406a6c:	dd04      	ble.n	406a78 <__sflush_r+0xc0>
  406a6e:	2c00      	cmp	r4, #0
  406a70:	dcf2      	bgt.n	406a58 <__sflush_r+0xa0>
  406a72:	2000      	movs	r0, #0
  406a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a78:	89ab      	ldrh	r3, [r5, #12]
  406a7a:	f04f 30ff 	mov.w	r0, #4294967295
  406a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406a82:	81ab      	strh	r3, [r5, #12]
  406a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a88:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406a8a:	2a00      	cmp	r2, #0
  406a8c:	dca2      	bgt.n	4069d4 <__sflush_r+0x1c>
  406a8e:	e7f0      	b.n	406a72 <__sflush_r+0xba>
  406a90:	2301      	movs	r3, #1
  406a92:	4640      	mov	r0, r8
  406a94:	69e9      	ldr	r1, [r5, #28]
  406a96:	47a0      	blx	r4
  406a98:	1c43      	adds	r3, r0, #1
  406a9a:	4602      	mov	r2, r0
  406a9c:	d01e      	beq.n	406adc <__sflush_r+0x124>
  406a9e:	89ab      	ldrh	r3, [r5, #12]
  406aa0:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406aa2:	e7a6      	b.n	4069f2 <__sflush_r+0x3a>
  406aa4:	f8d8 3000 	ldr.w	r3, [r8]
  406aa8:	b95b      	cbnz	r3, 406ac2 <__sflush_r+0x10a>
  406aaa:	89aa      	ldrh	r2, [r5, #12]
  406aac:	6929      	ldr	r1, [r5, #16]
  406aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  406ab2:	b292      	uxth	r2, r2
  406ab4:	606b      	str	r3, [r5, #4]
  406ab6:	04d3      	lsls	r3, r2, #19
  406ab8:	81aa      	strh	r2, [r5, #12]
  406aba:	6029      	str	r1, [r5, #0]
  406abc:	d5b2      	bpl.n	406a24 <__sflush_r+0x6c>
  406abe:	6528      	str	r0, [r5, #80]	; 0x50
  406ac0:	e7b0      	b.n	406a24 <__sflush_r+0x6c>
  406ac2:	2b1d      	cmp	r3, #29
  406ac4:	d001      	beq.n	406aca <__sflush_r+0x112>
  406ac6:	2b16      	cmp	r3, #22
  406ac8:	d113      	bne.n	406af2 <__sflush_r+0x13a>
  406aca:	89a9      	ldrh	r1, [r5, #12]
  406acc:	692b      	ldr	r3, [r5, #16]
  406ace:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  406ad2:	2200      	movs	r2, #0
  406ad4:	81a9      	strh	r1, [r5, #12]
  406ad6:	602b      	str	r3, [r5, #0]
  406ad8:	606a      	str	r2, [r5, #4]
  406ada:	e7a3      	b.n	406a24 <__sflush_r+0x6c>
  406adc:	f8d8 3000 	ldr.w	r3, [r8]
  406ae0:	2b00      	cmp	r3, #0
  406ae2:	d0dc      	beq.n	406a9e <__sflush_r+0xe6>
  406ae4:	2b1d      	cmp	r3, #29
  406ae6:	d001      	beq.n	406aec <__sflush_r+0x134>
  406ae8:	2b16      	cmp	r3, #22
  406aea:	d1c5      	bne.n	406a78 <__sflush_r+0xc0>
  406aec:	f8c8 6000 	str.w	r6, [r8]
  406af0:	e7bf      	b.n	406a72 <__sflush_r+0xba>
  406af2:	89ab      	ldrh	r3, [r5, #12]
  406af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406af8:	81ab      	strh	r3, [r5, #12]
  406afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406afe:	bf00      	nop

00406b00 <_fflush_r>:
  406b00:	b510      	push	{r4, lr}
  406b02:	4604      	mov	r4, r0
  406b04:	b082      	sub	sp, #8
  406b06:	b108      	cbz	r0, 406b0c <_fflush_r+0xc>
  406b08:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406b0a:	b153      	cbz	r3, 406b22 <_fflush_r+0x22>
  406b0c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  406b10:	b908      	cbnz	r0, 406b16 <_fflush_r+0x16>
  406b12:	b002      	add	sp, #8
  406b14:	bd10      	pop	{r4, pc}
  406b16:	4620      	mov	r0, r4
  406b18:	b002      	add	sp, #8
  406b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406b1e:	f7ff bf4b 	b.w	4069b8 <__sflush_r>
  406b22:	9101      	str	r1, [sp, #4]
  406b24:	f000 f808 	bl	406b38 <__sinit>
  406b28:	9901      	ldr	r1, [sp, #4]
  406b2a:	e7ef      	b.n	406b0c <_fflush_r+0xc>

00406b2c <_cleanup_r>:
  406b2c:	4901      	ldr	r1, [pc, #4]	; (406b34 <_cleanup_r+0x8>)
  406b2e:	f000 bb9f 	b.w	407270 <_fwalk>
  406b32:	bf00      	nop
  406b34:	00409eb9 	.word	0x00409eb9

00406b38 <__sinit>:
  406b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b3c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  406b3e:	b083      	sub	sp, #12
  406b40:	4607      	mov	r7, r0
  406b42:	2c00      	cmp	r4, #0
  406b44:	d165      	bne.n	406c12 <__sinit+0xda>
  406b46:	687d      	ldr	r5, [r7, #4]
  406b48:	4833      	ldr	r0, [pc, #204]	; (406c18 <__sinit+0xe0>)
  406b4a:	2304      	movs	r3, #4
  406b4c:	2103      	movs	r1, #3
  406b4e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  406b52:	63f8      	str	r0, [r7, #60]	; 0x3c
  406b54:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  406b58:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  406b5c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  406b60:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406b64:	81ab      	strh	r3, [r5, #12]
  406b66:	602c      	str	r4, [r5, #0]
  406b68:	606c      	str	r4, [r5, #4]
  406b6a:	60ac      	str	r4, [r5, #8]
  406b6c:	666c      	str	r4, [r5, #100]	; 0x64
  406b6e:	81ec      	strh	r4, [r5, #14]
  406b70:	612c      	str	r4, [r5, #16]
  406b72:	616c      	str	r4, [r5, #20]
  406b74:	61ac      	str	r4, [r5, #24]
  406b76:	4621      	mov	r1, r4
  406b78:	2208      	movs	r2, #8
  406b7a:	f7fc fbeb 	bl	403354 <memset>
  406b7e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 406c1c <__sinit+0xe4>
  406b82:	68be      	ldr	r6, [r7, #8]
  406b84:	f8df a098 	ldr.w	sl, [pc, #152]	; 406c20 <__sinit+0xe8>
  406b88:	f8df 9098 	ldr.w	r9, [pc, #152]	; 406c24 <__sinit+0xec>
  406b8c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 406c28 <__sinit+0xf0>
  406b90:	2301      	movs	r3, #1
  406b92:	2209      	movs	r2, #9
  406b94:	61ed      	str	r5, [r5, #28]
  406b96:	f8c5 b020 	str.w	fp, [r5, #32]
  406b9a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406b9e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406ba2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406ba6:	4621      	mov	r1, r4
  406ba8:	81f3      	strh	r3, [r6, #14]
  406baa:	81b2      	strh	r2, [r6, #12]
  406bac:	6034      	str	r4, [r6, #0]
  406bae:	6074      	str	r4, [r6, #4]
  406bb0:	60b4      	str	r4, [r6, #8]
  406bb2:	6674      	str	r4, [r6, #100]	; 0x64
  406bb4:	6134      	str	r4, [r6, #16]
  406bb6:	6174      	str	r4, [r6, #20]
  406bb8:	61b4      	str	r4, [r6, #24]
  406bba:	2208      	movs	r2, #8
  406bbc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  406bc0:	9301      	str	r3, [sp, #4]
  406bc2:	f7fc fbc7 	bl	403354 <memset>
  406bc6:	68fd      	ldr	r5, [r7, #12]
  406bc8:	2012      	movs	r0, #18
  406bca:	2202      	movs	r2, #2
  406bcc:	61f6      	str	r6, [r6, #28]
  406bce:	f8c6 b020 	str.w	fp, [r6, #32]
  406bd2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  406bd6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  406bda:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  406bde:	4621      	mov	r1, r4
  406be0:	81a8      	strh	r0, [r5, #12]
  406be2:	81ea      	strh	r2, [r5, #14]
  406be4:	602c      	str	r4, [r5, #0]
  406be6:	606c      	str	r4, [r5, #4]
  406be8:	60ac      	str	r4, [r5, #8]
  406bea:	666c      	str	r4, [r5, #100]	; 0x64
  406bec:	612c      	str	r4, [r5, #16]
  406bee:	616c      	str	r4, [r5, #20]
  406bf0:	61ac      	str	r4, [r5, #24]
  406bf2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406bf6:	2208      	movs	r2, #8
  406bf8:	f7fc fbac 	bl	403354 <memset>
  406bfc:	9b01      	ldr	r3, [sp, #4]
  406bfe:	61ed      	str	r5, [r5, #28]
  406c00:	f8c5 b020 	str.w	fp, [r5, #32]
  406c04:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406c08:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406c0c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406c10:	63bb      	str	r3, [r7, #56]	; 0x38
  406c12:	b003      	add	sp, #12
  406c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c18:	00406b2d 	.word	0x00406b2d
  406c1c:	004084ad 	.word	0x004084ad
  406c20:	004084d1 	.word	0x004084d1
  406c24:	00408509 	.word	0x00408509
  406c28:	00408529 	.word	0x00408529

00406c2c <__sfp_lock_acquire>:
  406c2c:	4770      	bx	lr
  406c2e:	bf00      	nop

00406c30 <__sfp_lock_release>:
  406c30:	4770      	bx	lr
  406c32:	bf00      	nop

00406c34 <__libc_fini_array>:
  406c34:	b538      	push	{r3, r4, r5, lr}
  406c36:	4d09      	ldr	r5, [pc, #36]	; (406c5c <__libc_fini_array+0x28>)
  406c38:	4c09      	ldr	r4, [pc, #36]	; (406c60 <__libc_fini_array+0x2c>)
  406c3a:	1b64      	subs	r4, r4, r5
  406c3c:	10a4      	asrs	r4, r4, #2
  406c3e:	bf18      	it	ne
  406c40:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  406c44:	d005      	beq.n	406c52 <__libc_fini_array+0x1e>
  406c46:	3c01      	subs	r4, #1
  406c48:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406c4c:	4798      	blx	r3
  406c4e:	2c00      	cmp	r4, #0
  406c50:	d1f9      	bne.n	406c46 <__libc_fini_array+0x12>
  406c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406c56:	f004 be1f 	b.w	40b898 <_fini>
  406c5a:	bf00      	nop
  406c5c:	0040b8a4 	.word	0x0040b8a4
  406c60:	0040b8a8 	.word	0x0040b8a8

00406c64 <_fputwc_r>:
  406c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c68:	8993      	ldrh	r3, [r2, #12]
  406c6a:	460f      	mov	r7, r1
  406c6c:	0499      	lsls	r1, r3, #18
  406c6e:	b082      	sub	sp, #8
  406c70:	4614      	mov	r4, r2
  406c72:	4680      	mov	r8, r0
  406c74:	d406      	bmi.n	406c84 <_fputwc_r+0x20>
  406c76:	6e52      	ldr	r2, [r2, #100]	; 0x64
  406c78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406c80:	81a3      	strh	r3, [r4, #12]
  406c82:	6662      	str	r2, [r4, #100]	; 0x64
  406c84:	f000 fb1c 	bl	4072c0 <__locale_mb_cur_max>
  406c88:	2801      	cmp	r0, #1
  406c8a:	d03e      	beq.n	406d0a <_fputwc_r+0xa6>
  406c8c:	463a      	mov	r2, r7
  406c8e:	4640      	mov	r0, r8
  406c90:	a901      	add	r1, sp, #4
  406c92:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406c96:	f002 ffef 	bl	409c78 <_wcrtomb_r>
  406c9a:	1c42      	adds	r2, r0, #1
  406c9c:	4606      	mov	r6, r0
  406c9e:	d02d      	beq.n	406cfc <_fputwc_r+0x98>
  406ca0:	2800      	cmp	r0, #0
  406ca2:	d03a      	beq.n	406d1a <_fputwc_r+0xb6>
  406ca4:	f89d 1004 	ldrb.w	r1, [sp, #4]
  406ca8:	2500      	movs	r5, #0
  406caa:	e009      	b.n	406cc0 <_fputwc_r+0x5c>
  406cac:	6823      	ldr	r3, [r4, #0]
  406cae:	7019      	strb	r1, [r3, #0]
  406cb0:	6823      	ldr	r3, [r4, #0]
  406cb2:	3301      	adds	r3, #1
  406cb4:	6023      	str	r3, [r4, #0]
  406cb6:	3501      	adds	r5, #1
  406cb8:	42b5      	cmp	r5, r6
  406cba:	d22e      	bcs.n	406d1a <_fputwc_r+0xb6>
  406cbc:	ab01      	add	r3, sp, #4
  406cbe:	5ce9      	ldrb	r1, [r5, r3]
  406cc0:	68a3      	ldr	r3, [r4, #8]
  406cc2:	3b01      	subs	r3, #1
  406cc4:	2b00      	cmp	r3, #0
  406cc6:	60a3      	str	r3, [r4, #8]
  406cc8:	daf0      	bge.n	406cac <_fputwc_r+0x48>
  406cca:	69a2      	ldr	r2, [r4, #24]
  406ccc:	4293      	cmp	r3, r2
  406cce:	db06      	blt.n	406cde <_fputwc_r+0x7a>
  406cd0:	6823      	ldr	r3, [r4, #0]
  406cd2:	7019      	strb	r1, [r3, #0]
  406cd4:	6823      	ldr	r3, [r4, #0]
  406cd6:	7819      	ldrb	r1, [r3, #0]
  406cd8:	3301      	adds	r3, #1
  406cda:	290a      	cmp	r1, #10
  406cdc:	d1ea      	bne.n	406cb4 <_fputwc_r+0x50>
  406cde:	4640      	mov	r0, r8
  406ce0:	4622      	mov	r2, r4
  406ce2:	f002 ff75 	bl	409bd0 <__swbuf_r>
  406ce6:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  406cea:	4258      	negs	r0, r3
  406cec:	4158      	adcs	r0, r3
  406cee:	2800      	cmp	r0, #0
  406cf0:	d0e1      	beq.n	406cb6 <_fputwc_r+0x52>
  406cf2:	f04f 30ff 	mov.w	r0, #4294967295
  406cf6:	b002      	add	sp, #8
  406cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cfc:	89a3      	ldrh	r3, [r4, #12]
  406cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406d02:	81a3      	strh	r3, [r4, #12]
  406d04:	b002      	add	sp, #8
  406d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d0a:	1e7b      	subs	r3, r7, #1
  406d0c:	2bfe      	cmp	r3, #254	; 0xfe
  406d0e:	d8bd      	bhi.n	406c8c <_fputwc_r+0x28>
  406d10:	b2f9      	uxtb	r1, r7
  406d12:	4606      	mov	r6, r0
  406d14:	f88d 1004 	strb.w	r1, [sp, #4]
  406d18:	e7c6      	b.n	406ca8 <_fputwc_r+0x44>
  406d1a:	4638      	mov	r0, r7
  406d1c:	b002      	add	sp, #8
  406d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d22:	bf00      	nop

00406d24 <_malloc_trim_r>:
  406d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d26:	4d23      	ldr	r5, [pc, #140]	; (406db4 <_malloc_trim_r+0x90>)
  406d28:	460f      	mov	r7, r1
  406d2a:	4604      	mov	r4, r0
  406d2c:	f000 fe96 	bl	407a5c <__malloc_lock>
  406d30:	68ab      	ldr	r3, [r5, #8]
  406d32:	685e      	ldr	r6, [r3, #4]
  406d34:	f026 0603 	bic.w	r6, r6, #3
  406d38:	1bf1      	subs	r1, r6, r7
  406d3a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  406d3e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406d42:	f021 010f 	bic.w	r1, r1, #15
  406d46:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  406d4a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  406d4e:	db07      	blt.n	406d60 <_malloc_trim_r+0x3c>
  406d50:	4620      	mov	r0, r4
  406d52:	2100      	movs	r1, #0
  406d54:	f001 fb98 	bl	408488 <_sbrk_r>
  406d58:	68ab      	ldr	r3, [r5, #8]
  406d5a:	4433      	add	r3, r6
  406d5c:	4298      	cmp	r0, r3
  406d5e:	d004      	beq.n	406d6a <_malloc_trim_r+0x46>
  406d60:	4620      	mov	r0, r4
  406d62:	f000 fe7d 	bl	407a60 <__malloc_unlock>
  406d66:	2000      	movs	r0, #0
  406d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406d6a:	4620      	mov	r0, r4
  406d6c:	4279      	negs	r1, r7
  406d6e:	f001 fb8b 	bl	408488 <_sbrk_r>
  406d72:	3001      	adds	r0, #1
  406d74:	d00d      	beq.n	406d92 <_malloc_trim_r+0x6e>
  406d76:	4b10      	ldr	r3, [pc, #64]	; (406db8 <_malloc_trim_r+0x94>)
  406d78:	68aa      	ldr	r2, [r5, #8]
  406d7a:	6819      	ldr	r1, [r3, #0]
  406d7c:	1bf6      	subs	r6, r6, r7
  406d7e:	f046 0601 	orr.w	r6, r6, #1
  406d82:	4620      	mov	r0, r4
  406d84:	1bc9      	subs	r1, r1, r7
  406d86:	6056      	str	r6, [r2, #4]
  406d88:	6019      	str	r1, [r3, #0]
  406d8a:	f000 fe69 	bl	407a60 <__malloc_unlock>
  406d8e:	2001      	movs	r0, #1
  406d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406d92:	4620      	mov	r0, r4
  406d94:	2100      	movs	r1, #0
  406d96:	f001 fb77 	bl	408488 <_sbrk_r>
  406d9a:	68ab      	ldr	r3, [r5, #8]
  406d9c:	1ac2      	subs	r2, r0, r3
  406d9e:	2a0f      	cmp	r2, #15
  406da0:	ddde      	ble.n	406d60 <_malloc_trim_r+0x3c>
  406da2:	4d06      	ldr	r5, [pc, #24]	; (406dbc <_malloc_trim_r+0x98>)
  406da4:	4904      	ldr	r1, [pc, #16]	; (406db8 <_malloc_trim_r+0x94>)
  406da6:	682d      	ldr	r5, [r5, #0]
  406da8:	f042 0201 	orr.w	r2, r2, #1
  406dac:	1b40      	subs	r0, r0, r5
  406dae:	605a      	str	r2, [r3, #4]
  406db0:	6008      	str	r0, [r1, #0]
  406db2:	e7d5      	b.n	406d60 <_malloc_trim_r+0x3c>
  406db4:	20000580 	.word	0x20000580
  406db8:	200037e8 	.word	0x200037e8
  406dbc:	2000098c 	.word	0x2000098c

00406dc0 <_free_r>:
  406dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406dc4:	460d      	mov	r5, r1
  406dc6:	4606      	mov	r6, r0
  406dc8:	2900      	cmp	r1, #0
  406dca:	d055      	beq.n	406e78 <_free_r+0xb8>
  406dcc:	f000 fe46 	bl	407a5c <__malloc_lock>
  406dd0:	f855 1c04 	ldr.w	r1, [r5, #-4]
  406dd4:	f8df c170 	ldr.w	ip, [pc, #368]	; 406f48 <_free_r+0x188>
  406dd8:	f1a5 0408 	sub.w	r4, r5, #8
  406ddc:	f021 0301 	bic.w	r3, r1, #1
  406de0:	18e2      	adds	r2, r4, r3
  406de2:	f8dc 0008 	ldr.w	r0, [ip, #8]
  406de6:	6857      	ldr	r7, [r2, #4]
  406de8:	4290      	cmp	r0, r2
  406dea:	f027 0703 	bic.w	r7, r7, #3
  406dee:	d068      	beq.n	406ec2 <_free_r+0x102>
  406df0:	f011 0101 	ands.w	r1, r1, #1
  406df4:	6057      	str	r7, [r2, #4]
  406df6:	d032      	beq.n	406e5e <_free_r+0x9e>
  406df8:	2100      	movs	r1, #0
  406dfa:	19d0      	adds	r0, r2, r7
  406dfc:	6840      	ldr	r0, [r0, #4]
  406dfe:	07c0      	lsls	r0, r0, #31
  406e00:	d406      	bmi.n	406e10 <_free_r+0x50>
  406e02:	443b      	add	r3, r7
  406e04:	6890      	ldr	r0, [r2, #8]
  406e06:	2900      	cmp	r1, #0
  406e08:	d04d      	beq.n	406ea6 <_free_r+0xe6>
  406e0a:	68d2      	ldr	r2, [r2, #12]
  406e0c:	60c2      	str	r2, [r0, #12]
  406e0e:	6090      	str	r0, [r2, #8]
  406e10:	f043 0201 	orr.w	r2, r3, #1
  406e14:	6062      	str	r2, [r4, #4]
  406e16:	50e3      	str	r3, [r4, r3]
  406e18:	b9e1      	cbnz	r1, 406e54 <_free_r+0x94>
  406e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406e1e:	d32d      	bcc.n	406e7c <_free_r+0xbc>
  406e20:	0a5a      	lsrs	r2, r3, #9
  406e22:	2a04      	cmp	r2, #4
  406e24:	d869      	bhi.n	406efa <_free_r+0x13a>
  406e26:	0998      	lsrs	r0, r3, #6
  406e28:	3038      	adds	r0, #56	; 0x38
  406e2a:	0041      	lsls	r1, r0, #1
  406e2c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  406e30:	f8dc 2008 	ldr.w	r2, [ip, #8]
  406e34:	4944      	ldr	r1, [pc, #272]	; (406f48 <_free_r+0x188>)
  406e36:	4562      	cmp	r2, ip
  406e38:	d065      	beq.n	406f06 <_free_r+0x146>
  406e3a:	6851      	ldr	r1, [r2, #4]
  406e3c:	f021 0103 	bic.w	r1, r1, #3
  406e40:	428b      	cmp	r3, r1
  406e42:	d202      	bcs.n	406e4a <_free_r+0x8a>
  406e44:	6892      	ldr	r2, [r2, #8]
  406e46:	4594      	cmp	ip, r2
  406e48:	d1f7      	bne.n	406e3a <_free_r+0x7a>
  406e4a:	68d3      	ldr	r3, [r2, #12]
  406e4c:	60e3      	str	r3, [r4, #12]
  406e4e:	60a2      	str	r2, [r4, #8]
  406e50:	609c      	str	r4, [r3, #8]
  406e52:	60d4      	str	r4, [r2, #12]
  406e54:	4630      	mov	r0, r6
  406e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406e5a:	f000 be01 	b.w	407a60 <__malloc_unlock>
  406e5e:	f855 5c08 	ldr.w	r5, [r5, #-8]
  406e62:	f10c 0808 	add.w	r8, ip, #8
  406e66:	1b64      	subs	r4, r4, r5
  406e68:	68a0      	ldr	r0, [r4, #8]
  406e6a:	442b      	add	r3, r5
  406e6c:	4540      	cmp	r0, r8
  406e6e:	d042      	beq.n	406ef6 <_free_r+0x136>
  406e70:	68e5      	ldr	r5, [r4, #12]
  406e72:	60c5      	str	r5, [r0, #12]
  406e74:	60a8      	str	r0, [r5, #8]
  406e76:	e7c0      	b.n	406dfa <_free_r+0x3a>
  406e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e7c:	08db      	lsrs	r3, r3, #3
  406e7e:	109a      	asrs	r2, r3, #2
  406e80:	2001      	movs	r0, #1
  406e82:	4090      	lsls	r0, r2
  406e84:	f8dc 1004 	ldr.w	r1, [ip, #4]
  406e88:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
  406e8c:	689a      	ldr	r2, [r3, #8]
  406e8e:	4301      	orrs	r1, r0
  406e90:	60a2      	str	r2, [r4, #8]
  406e92:	60e3      	str	r3, [r4, #12]
  406e94:	f8cc 1004 	str.w	r1, [ip, #4]
  406e98:	4630      	mov	r0, r6
  406e9a:	609c      	str	r4, [r3, #8]
  406e9c:	60d4      	str	r4, [r2, #12]
  406e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406ea2:	f000 bddd 	b.w	407a60 <__malloc_unlock>
  406ea6:	4d29      	ldr	r5, [pc, #164]	; (406f4c <_free_r+0x18c>)
  406ea8:	42a8      	cmp	r0, r5
  406eaa:	d1ae      	bne.n	406e0a <_free_r+0x4a>
  406eac:	f043 0201 	orr.w	r2, r3, #1
  406eb0:	f8cc 4014 	str.w	r4, [ip, #20]
  406eb4:	f8cc 4010 	str.w	r4, [ip, #16]
  406eb8:	60e0      	str	r0, [r4, #12]
  406eba:	60a0      	str	r0, [r4, #8]
  406ebc:	6062      	str	r2, [r4, #4]
  406ebe:	50e3      	str	r3, [r4, r3]
  406ec0:	e7c8      	b.n	406e54 <_free_r+0x94>
  406ec2:	441f      	add	r7, r3
  406ec4:	07cb      	lsls	r3, r1, #31
  406ec6:	d407      	bmi.n	406ed8 <_free_r+0x118>
  406ec8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406ecc:	1a64      	subs	r4, r4, r1
  406ece:	68e3      	ldr	r3, [r4, #12]
  406ed0:	68a2      	ldr	r2, [r4, #8]
  406ed2:	440f      	add	r7, r1
  406ed4:	60d3      	str	r3, [r2, #12]
  406ed6:	609a      	str	r2, [r3, #8]
  406ed8:	4b1d      	ldr	r3, [pc, #116]	; (406f50 <_free_r+0x190>)
  406eda:	f047 0201 	orr.w	r2, r7, #1
  406ede:	681b      	ldr	r3, [r3, #0]
  406ee0:	6062      	str	r2, [r4, #4]
  406ee2:	429f      	cmp	r7, r3
  406ee4:	f8cc 4008 	str.w	r4, [ip, #8]
  406ee8:	d3b4      	bcc.n	406e54 <_free_r+0x94>
  406eea:	4b1a      	ldr	r3, [pc, #104]	; (406f54 <_free_r+0x194>)
  406eec:	4630      	mov	r0, r6
  406eee:	6819      	ldr	r1, [r3, #0]
  406ef0:	f7ff ff18 	bl	406d24 <_malloc_trim_r>
  406ef4:	e7ae      	b.n	406e54 <_free_r+0x94>
  406ef6:	2101      	movs	r1, #1
  406ef8:	e77f      	b.n	406dfa <_free_r+0x3a>
  406efa:	2a14      	cmp	r2, #20
  406efc:	d80b      	bhi.n	406f16 <_free_r+0x156>
  406efe:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  406f02:	0041      	lsls	r1, r0, #1
  406f04:	e792      	b.n	406e2c <_free_r+0x6c>
  406f06:	1080      	asrs	r0, r0, #2
  406f08:	2501      	movs	r5, #1
  406f0a:	4085      	lsls	r5, r0
  406f0c:	6848      	ldr	r0, [r1, #4]
  406f0e:	4613      	mov	r3, r2
  406f10:	4328      	orrs	r0, r5
  406f12:	6048      	str	r0, [r1, #4]
  406f14:	e79a      	b.n	406e4c <_free_r+0x8c>
  406f16:	2a54      	cmp	r2, #84	; 0x54
  406f18:	d803      	bhi.n	406f22 <_free_r+0x162>
  406f1a:	0b18      	lsrs	r0, r3, #12
  406f1c:	306e      	adds	r0, #110	; 0x6e
  406f1e:	0041      	lsls	r1, r0, #1
  406f20:	e784      	b.n	406e2c <_free_r+0x6c>
  406f22:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406f26:	d803      	bhi.n	406f30 <_free_r+0x170>
  406f28:	0bd8      	lsrs	r0, r3, #15
  406f2a:	3077      	adds	r0, #119	; 0x77
  406f2c:	0041      	lsls	r1, r0, #1
  406f2e:	e77d      	b.n	406e2c <_free_r+0x6c>
  406f30:	f240 5154 	movw	r1, #1364	; 0x554
  406f34:	428a      	cmp	r2, r1
  406f36:	d803      	bhi.n	406f40 <_free_r+0x180>
  406f38:	0c98      	lsrs	r0, r3, #18
  406f3a:	307c      	adds	r0, #124	; 0x7c
  406f3c:	0041      	lsls	r1, r0, #1
  406f3e:	e775      	b.n	406e2c <_free_r+0x6c>
  406f40:	21fc      	movs	r1, #252	; 0xfc
  406f42:	207e      	movs	r0, #126	; 0x7e
  406f44:	e772      	b.n	406e2c <_free_r+0x6c>
  406f46:	bf00      	nop
  406f48:	20000580 	.word	0x20000580
  406f4c:	20000588 	.word	0x20000588
  406f50:	20000988 	.word	0x20000988
  406f54:	200037e4 	.word	0x200037e4

00406f58 <__sfvwrite_r>:
  406f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f5c:	6893      	ldr	r3, [r2, #8]
  406f5e:	b083      	sub	sp, #12
  406f60:	4616      	mov	r6, r2
  406f62:	4681      	mov	r9, r0
  406f64:	460c      	mov	r4, r1
  406f66:	b32b      	cbz	r3, 406fb4 <__sfvwrite_r+0x5c>
  406f68:	898b      	ldrh	r3, [r1, #12]
  406f6a:	0719      	lsls	r1, r3, #28
  406f6c:	d526      	bpl.n	406fbc <__sfvwrite_r+0x64>
  406f6e:	6922      	ldr	r2, [r4, #16]
  406f70:	b322      	cbz	r2, 406fbc <__sfvwrite_r+0x64>
  406f72:	f003 0202 	and.w	r2, r3, #2
  406f76:	b292      	uxth	r2, r2
  406f78:	6835      	ldr	r5, [r6, #0]
  406f7a:	2a00      	cmp	r2, #0
  406f7c:	d02c      	beq.n	406fd8 <__sfvwrite_r+0x80>
  406f7e:	f04f 0a00 	mov.w	sl, #0
  406f82:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 40726c <__sfvwrite_r+0x314>
  406f86:	46d0      	mov	r8, sl
  406f88:	45d8      	cmp	r8, fp
  406f8a:	bf34      	ite	cc
  406f8c:	4643      	movcc	r3, r8
  406f8e:	465b      	movcs	r3, fp
  406f90:	4652      	mov	r2, sl
  406f92:	4648      	mov	r0, r9
  406f94:	f1b8 0f00 	cmp.w	r8, #0
  406f98:	d04f      	beq.n	40703a <__sfvwrite_r+0xe2>
  406f9a:	69e1      	ldr	r1, [r4, #28]
  406f9c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406f9e:	47b8      	blx	r7
  406fa0:	2800      	cmp	r0, #0
  406fa2:	dd56      	ble.n	407052 <__sfvwrite_r+0xfa>
  406fa4:	68b3      	ldr	r3, [r6, #8]
  406fa6:	4482      	add	sl, r0
  406fa8:	1a1b      	subs	r3, r3, r0
  406faa:	ebc0 0808 	rsb	r8, r0, r8
  406fae:	60b3      	str	r3, [r6, #8]
  406fb0:	2b00      	cmp	r3, #0
  406fb2:	d1e9      	bne.n	406f88 <__sfvwrite_r+0x30>
  406fb4:	2000      	movs	r0, #0
  406fb6:	b003      	add	sp, #12
  406fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fbc:	4648      	mov	r0, r9
  406fbe:	4621      	mov	r1, r4
  406fc0:	f7fe fcd0 	bl	405964 <__swsetup_r>
  406fc4:	2800      	cmp	r0, #0
  406fc6:	f040 8148 	bne.w	40725a <__sfvwrite_r+0x302>
  406fca:	89a3      	ldrh	r3, [r4, #12]
  406fcc:	6835      	ldr	r5, [r6, #0]
  406fce:	f003 0202 	and.w	r2, r3, #2
  406fd2:	b292      	uxth	r2, r2
  406fd4:	2a00      	cmp	r2, #0
  406fd6:	d1d2      	bne.n	406f7e <__sfvwrite_r+0x26>
  406fd8:	f013 0a01 	ands.w	sl, r3, #1
  406fdc:	d142      	bne.n	407064 <__sfvwrite_r+0x10c>
  406fde:	46d0      	mov	r8, sl
  406fe0:	f1b8 0f00 	cmp.w	r8, #0
  406fe4:	d023      	beq.n	40702e <__sfvwrite_r+0xd6>
  406fe6:	059a      	lsls	r2, r3, #22
  406fe8:	68a7      	ldr	r7, [r4, #8]
  406fea:	d576      	bpl.n	4070da <__sfvwrite_r+0x182>
  406fec:	45b8      	cmp	r8, r7
  406fee:	f0c0 80a4 	bcc.w	40713a <__sfvwrite_r+0x1e2>
  406ff2:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406ff6:	f040 80b2 	bne.w	40715e <__sfvwrite_r+0x206>
  406ffa:	6820      	ldr	r0, [r4, #0]
  406ffc:	46bb      	mov	fp, r7
  406ffe:	4651      	mov	r1, sl
  407000:	465a      	mov	r2, fp
  407002:	f000 fcc5 	bl	407990 <memmove>
  407006:	68a2      	ldr	r2, [r4, #8]
  407008:	6821      	ldr	r1, [r4, #0]
  40700a:	1bd2      	subs	r2, r2, r7
  40700c:	eb01 030b 	add.w	r3, r1, fp
  407010:	60a2      	str	r2, [r4, #8]
  407012:	6023      	str	r3, [r4, #0]
  407014:	4642      	mov	r2, r8
  407016:	68b3      	ldr	r3, [r6, #8]
  407018:	4492      	add	sl, r2
  40701a:	1a9b      	subs	r3, r3, r2
  40701c:	ebc2 0808 	rsb	r8, r2, r8
  407020:	60b3      	str	r3, [r6, #8]
  407022:	2b00      	cmp	r3, #0
  407024:	d0c6      	beq.n	406fb4 <__sfvwrite_r+0x5c>
  407026:	89a3      	ldrh	r3, [r4, #12]
  407028:	f1b8 0f00 	cmp.w	r8, #0
  40702c:	d1db      	bne.n	406fe6 <__sfvwrite_r+0x8e>
  40702e:	f8d5 a000 	ldr.w	sl, [r5]
  407032:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407036:	3508      	adds	r5, #8
  407038:	e7d2      	b.n	406fe0 <__sfvwrite_r+0x88>
  40703a:	f8d5 a000 	ldr.w	sl, [r5]
  40703e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407042:	3508      	adds	r5, #8
  407044:	e7a0      	b.n	406f88 <__sfvwrite_r+0x30>
  407046:	4648      	mov	r0, r9
  407048:	4621      	mov	r1, r4
  40704a:	f7ff fd59 	bl	406b00 <_fflush_r>
  40704e:	2800      	cmp	r0, #0
  407050:	d059      	beq.n	407106 <__sfvwrite_r+0x1ae>
  407052:	89a3      	ldrh	r3, [r4, #12]
  407054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407058:	f04f 30ff 	mov.w	r0, #4294967295
  40705c:	81a3      	strh	r3, [r4, #12]
  40705e:	b003      	add	sp, #12
  407060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407064:	4692      	mov	sl, r2
  407066:	9201      	str	r2, [sp, #4]
  407068:	4693      	mov	fp, r2
  40706a:	4690      	mov	r8, r2
  40706c:	f1b8 0f00 	cmp.w	r8, #0
  407070:	d02b      	beq.n	4070ca <__sfvwrite_r+0x172>
  407072:	9f01      	ldr	r7, [sp, #4]
  407074:	2f00      	cmp	r7, #0
  407076:	d064      	beq.n	407142 <__sfvwrite_r+0x1ea>
  407078:	6820      	ldr	r0, [r4, #0]
  40707a:	6921      	ldr	r1, [r4, #16]
  40707c:	45c2      	cmp	sl, r8
  40707e:	bf34      	ite	cc
  407080:	4653      	movcc	r3, sl
  407082:	4643      	movcs	r3, r8
  407084:	4288      	cmp	r0, r1
  407086:	461f      	mov	r7, r3
  407088:	f8d4 c008 	ldr.w	ip, [r4, #8]
  40708c:	6962      	ldr	r2, [r4, #20]
  40708e:	d903      	bls.n	407098 <__sfvwrite_r+0x140>
  407090:	4494      	add	ip, r2
  407092:	4563      	cmp	r3, ip
  407094:	f300 80ae 	bgt.w	4071f4 <__sfvwrite_r+0x29c>
  407098:	4293      	cmp	r3, r2
  40709a:	db36      	blt.n	40710a <__sfvwrite_r+0x1b2>
  40709c:	4613      	mov	r3, r2
  40709e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4070a0:	4648      	mov	r0, r9
  4070a2:	69e1      	ldr	r1, [r4, #28]
  4070a4:	465a      	mov	r2, fp
  4070a6:	47b8      	blx	r7
  4070a8:	1e07      	subs	r7, r0, #0
  4070aa:	ddd2      	ble.n	407052 <__sfvwrite_r+0xfa>
  4070ac:	ebba 0a07 	subs.w	sl, sl, r7
  4070b0:	d03a      	beq.n	407128 <__sfvwrite_r+0x1d0>
  4070b2:	68b3      	ldr	r3, [r6, #8]
  4070b4:	44bb      	add	fp, r7
  4070b6:	1bdb      	subs	r3, r3, r7
  4070b8:	ebc7 0808 	rsb	r8, r7, r8
  4070bc:	60b3      	str	r3, [r6, #8]
  4070be:	2b00      	cmp	r3, #0
  4070c0:	f43f af78 	beq.w	406fb4 <__sfvwrite_r+0x5c>
  4070c4:	f1b8 0f00 	cmp.w	r8, #0
  4070c8:	d1d3      	bne.n	407072 <__sfvwrite_r+0x11a>
  4070ca:	2700      	movs	r7, #0
  4070cc:	f8d5 b000 	ldr.w	fp, [r5]
  4070d0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4070d4:	9701      	str	r7, [sp, #4]
  4070d6:	3508      	adds	r5, #8
  4070d8:	e7c8      	b.n	40706c <__sfvwrite_r+0x114>
  4070da:	6820      	ldr	r0, [r4, #0]
  4070dc:	6923      	ldr	r3, [r4, #16]
  4070de:	4298      	cmp	r0, r3
  4070e0:	d802      	bhi.n	4070e8 <__sfvwrite_r+0x190>
  4070e2:	6963      	ldr	r3, [r4, #20]
  4070e4:	4598      	cmp	r8, r3
  4070e6:	d272      	bcs.n	4071ce <__sfvwrite_r+0x276>
  4070e8:	45b8      	cmp	r8, r7
  4070ea:	bf38      	it	cc
  4070ec:	4647      	movcc	r7, r8
  4070ee:	463a      	mov	r2, r7
  4070f0:	4651      	mov	r1, sl
  4070f2:	f000 fc4d 	bl	407990 <memmove>
  4070f6:	68a3      	ldr	r3, [r4, #8]
  4070f8:	6822      	ldr	r2, [r4, #0]
  4070fa:	1bdb      	subs	r3, r3, r7
  4070fc:	443a      	add	r2, r7
  4070fe:	60a3      	str	r3, [r4, #8]
  407100:	6022      	str	r2, [r4, #0]
  407102:	2b00      	cmp	r3, #0
  407104:	d09f      	beq.n	407046 <__sfvwrite_r+0xee>
  407106:	463a      	mov	r2, r7
  407108:	e785      	b.n	407016 <__sfvwrite_r+0xbe>
  40710a:	461a      	mov	r2, r3
  40710c:	4659      	mov	r1, fp
  40710e:	9300      	str	r3, [sp, #0]
  407110:	f000 fc3e 	bl	407990 <memmove>
  407114:	9b00      	ldr	r3, [sp, #0]
  407116:	68a1      	ldr	r1, [r4, #8]
  407118:	6822      	ldr	r2, [r4, #0]
  40711a:	1ac9      	subs	r1, r1, r3
  40711c:	ebba 0a07 	subs.w	sl, sl, r7
  407120:	4413      	add	r3, r2
  407122:	60a1      	str	r1, [r4, #8]
  407124:	6023      	str	r3, [r4, #0]
  407126:	d1c4      	bne.n	4070b2 <__sfvwrite_r+0x15a>
  407128:	4648      	mov	r0, r9
  40712a:	4621      	mov	r1, r4
  40712c:	f7ff fce8 	bl	406b00 <_fflush_r>
  407130:	2800      	cmp	r0, #0
  407132:	d18e      	bne.n	407052 <__sfvwrite_r+0xfa>
  407134:	f8cd a004 	str.w	sl, [sp, #4]
  407138:	e7bb      	b.n	4070b2 <__sfvwrite_r+0x15a>
  40713a:	6820      	ldr	r0, [r4, #0]
  40713c:	4647      	mov	r7, r8
  40713e:	46c3      	mov	fp, r8
  407140:	e75d      	b.n	406ffe <__sfvwrite_r+0xa6>
  407142:	4658      	mov	r0, fp
  407144:	210a      	movs	r1, #10
  407146:	4642      	mov	r2, r8
  407148:	f000 fbd8 	bl	4078fc <memchr>
  40714c:	2800      	cmp	r0, #0
  40714e:	d07f      	beq.n	407250 <__sfvwrite_r+0x2f8>
  407150:	f100 0a01 	add.w	sl, r0, #1
  407154:	2701      	movs	r7, #1
  407156:	ebcb 0a0a 	rsb	sl, fp, sl
  40715a:	9701      	str	r7, [sp, #4]
  40715c:	e78c      	b.n	407078 <__sfvwrite_r+0x120>
  40715e:	6822      	ldr	r2, [r4, #0]
  407160:	6921      	ldr	r1, [r4, #16]
  407162:	6967      	ldr	r7, [r4, #20]
  407164:	ebc1 0c02 	rsb	ip, r1, r2
  407168:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40716c:	f10c 0201 	add.w	r2, ip, #1
  407170:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  407174:	4442      	add	r2, r8
  407176:	107f      	asrs	r7, r7, #1
  407178:	4297      	cmp	r7, r2
  40717a:	bf34      	ite	cc
  40717c:	4617      	movcc	r7, r2
  40717e:	463a      	movcs	r2, r7
  407180:	055b      	lsls	r3, r3, #21
  407182:	d54f      	bpl.n	407224 <__sfvwrite_r+0x2cc>
  407184:	4611      	mov	r1, r2
  407186:	4648      	mov	r0, r9
  407188:	f8cd c000 	str.w	ip, [sp]
  40718c:	f000 f91a 	bl	4073c4 <_malloc_r>
  407190:	f8dd c000 	ldr.w	ip, [sp]
  407194:	4683      	mov	fp, r0
  407196:	2800      	cmp	r0, #0
  407198:	d062      	beq.n	407260 <__sfvwrite_r+0x308>
  40719a:	4662      	mov	r2, ip
  40719c:	6921      	ldr	r1, [r4, #16]
  40719e:	f8cd c000 	str.w	ip, [sp]
  4071a2:	f7fc f861 	bl	403268 <memcpy>
  4071a6:	89a2      	ldrh	r2, [r4, #12]
  4071a8:	f8dd c000 	ldr.w	ip, [sp]
  4071ac:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4071b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4071b4:	81a2      	strh	r2, [r4, #12]
  4071b6:	eb0b 000c 	add.w	r0, fp, ip
  4071ba:	ebcc 0207 	rsb	r2, ip, r7
  4071be:	f8c4 b010 	str.w	fp, [r4, #16]
  4071c2:	6167      	str	r7, [r4, #20]
  4071c4:	6020      	str	r0, [r4, #0]
  4071c6:	60a2      	str	r2, [r4, #8]
  4071c8:	4647      	mov	r7, r8
  4071ca:	46c3      	mov	fp, r8
  4071cc:	e717      	b.n	406ffe <__sfvwrite_r+0xa6>
  4071ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  4071d2:	4590      	cmp	r8, r2
  4071d4:	bf38      	it	cc
  4071d6:	4642      	movcc	r2, r8
  4071d8:	fb92 f2f3 	sdiv	r2, r2, r3
  4071dc:	fb02 f303 	mul.w	r3, r2, r3
  4071e0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4071e2:	4648      	mov	r0, r9
  4071e4:	69e1      	ldr	r1, [r4, #28]
  4071e6:	4652      	mov	r2, sl
  4071e8:	47b8      	blx	r7
  4071ea:	2800      	cmp	r0, #0
  4071ec:	f77f af31 	ble.w	407052 <__sfvwrite_r+0xfa>
  4071f0:	4602      	mov	r2, r0
  4071f2:	e710      	b.n	407016 <__sfvwrite_r+0xbe>
  4071f4:	4662      	mov	r2, ip
  4071f6:	4659      	mov	r1, fp
  4071f8:	f8cd c000 	str.w	ip, [sp]
  4071fc:	f000 fbc8 	bl	407990 <memmove>
  407200:	f8dd c000 	ldr.w	ip, [sp]
  407204:	6823      	ldr	r3, [r4, #0]
  407206:	4648      	mov	r0, r9
  407208:	4463      	add	r3, ip
  40720a:	6023      	str	r3, [r4, #0]
  40720c:	4621      	mov	r1, r4
  40720e:	f8cd c000 	str.w	ip, [sp]
  407212:	f7ff fc75 	bl	406b00 <_fflush_r>
  407216:	f8dd c000 	ldr.w	ip, [sp]
  40721a:	2800      	cmp	r0, #0
  40721c:	f47f af19 	bne.w	407052 <__sfvwrite_r+0xfa>
  407220:	4667      	mov	r7, ip
  407222:	e743      	b.n	4070ac <__sfvwrite_r+0x154>
  407224:	4648      	mov	r0, r9
  407226:	f8cd c000 	str.w	ip, [sp]
  40722a:	f000 ff25 	bl	408078 <_realloc_r>
  40722e:	f8dd c000 	ldr.w	ip, [sp]
  407232:	4683      	mov	fp, r0
  407234:	2800      	cmp	r0, #0
  407236:	d1be      	bne.n	4071b6 <__sfvwrite_r+0x25e>
  407238:	4648      	mov	r0, r9
  40723a:	6921      	ldr	r1, [r4, #16]
  40723c:	f7ff fdc0 	bl	406dc0 <_free_r>
  407240:	89a3      	ldrh	r3, [r4, #12]
  407242:	220c      	movs	r2, #12
  407244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407248:	b29b      	uxth	r3, r3
  40724a:	f8c9 2000 	str.w	r2, [r9]
  40724e:	e701      	b.n	407054 <__sfvwrite_r+0xfc>
  407250:	2701      	movs	r7, #1
  407252:	f108 0a01 	add.w	sl, r8, #1
  407256:	9701      	str	r7, [sp, #4]
  407258:	e70e      	b.n	407078 <__sfvwrite_r+0x120>
  40725a:	f04f 30ff 	mov.w	r0, #4294967295
  40725e:	e6aa      	b.n	406fb6 <__sfvwrite_r+0x5e>
  407260:	230c      	movs	r3, #12
  407262:	f8c9 3000 	str.w	r3, [r9]
  407266:	89a3      	ldrh	r3, [r4, #12]
  407268:	e6f4      	b.n	407054 <__sfvwrite_r+0xfc>
  40726a:	bf00      	nop
  40726c:	7ffffc00 	.word	0x7ffffc00

00407270 <_fwalk>:
  407270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407274:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407278:	4688      	mov	r8, r1
  40727a:	d019      	beq.n	4072b0 <_fwalk+0x40>
  40727c:	2600      	movs	r6, #0
  40727e:	687d      	ldr	r5, [r7, #4]
  407280:	68bc      	ldr	r4, [r7, #8]
  407282:	3d01      	subs	r5, #1
  407284:	d40e      	bmi.n	4072a4 <_fwalk+0x34>
  407286:	89a3      	ldrh	r3, [r4, #12]
  407288:	3d01      	subs	r5, #1
  40728a:	2b01      	cmp	r3, #1
  40728c:	d906      	bls.n	40729c <_fwalk+0x2c>
  40728e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407292:	4620      	mov	r0, r4
  407294:	3301      	adds	r3, #1
  407296:	d001      	beq.n	40729c <_fwalk+0x2c>
  407298:	47c0      	blx	r8
  40729a:	4306      	orrs	r6, r0
  40729c:	1c6b      	adds	r3, r5, #1
  40729e:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4072a2:	d1f0      	bne.n	407286 <_fwalk+0x16>
  4072a4:	683f      	ldr	r7, [r7, #0]
  4072a6:	2f00      	cmp	r7, #0
  4072a8:	d1e9      	bne.n	40727e <_fwalk+0xe>
  4072aa:	4630      	mov	r0, r6
  4072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4072b0:	463e      	mov	r6, r7
  4072b2:	4630      	mov	r0, r6
  4072b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004072b8 <__locale_charset>:
  4072b8:	4800      	ldr	r0, [pc, #0]	; (4072bc <__locale_charset+0x4>)
  4072ba:	4770      	bx	lr
  4072bc:	2000055c 	.word	0x2000055c

004072c0 <__locale_mb_cur_max>:
  4072c0:	4b01      	ldr	r3, [pc, #4]	; (4072c8 <__locale_mb_cur_max+0x8>)
  4072c2:	6818      	ldr	r0, [r3, #0]
  4072c4:	4770      	bx	lr
  4072c6:	bf00      	nop
  4072c8:	2000057c 	.word	0x2000057c

004072cc <_localeconv_r>:
  4072cc:	4800      	ldr	r0, [pc, #0]	; (4072d0 <_localeconv_r+0x4>)
  4072ce:	4770      	bx	lr
  4072d0:	20000524 	.word	0x20000524

004072d4 <__smakebuf_r>:
  4072d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4072d6:	898b      	ldrh	r3, [r1, #12]
  4072d8:	b091      	sub	sp, #68	; 0x44
  4072da:	b29a      	uxth	r2, r3
  4072dc:	0796      	lsls	r6, r2, #30
  4072de:	460c      	mov	r4, r1
  4072e0:	4605      	mov	r5, r0
  4072e2:	d437      	bmi.n	407354 <__smakebuf_r+0x80>
  4072e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4072e8:	2900      	cmp	r1, #0
  4072ea:	db17      	blt.n	40731c <__smakebuf_r+0x48>
  4072ec:	aa01      	add	r2, sp, #4
  4072ee:	f002 fdeb 	bl	409ec8 <_fstat_r>
  4072f2:	2800      	cmp	r0, #0
  4072f4:	db10      	blt.n	407318 <__smakebuf_r+0x44>
  4072f6:	9b02      	ldr	r3, [sp, #8]
  4072f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4072fc:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  407300:	424f      	negs	r7, r1
  407302:	414f      	adcs	r7, r1
  407304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  407308:	d02c      	beq.n	407364 <__smakebuf_r+0x90>
  40730a:	89a3      	ldrh	r3, [r4, #12]
  40730c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  407310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407314:	81a3      	strh	r3, [r4, #12]
  407316:	e00b      	b.n	407330 <__smakebuf_r+0x5c>
  407318:	89a3      	ldrh	r3, [r4, #12]
  40731a:	b29a      	uxth	r2, r3
  40731c:	f012 0f80 	tst.w	r2, #128	; 0x80
  407320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407324:	81a3      	strh	r3, [r4, #12]
  407326:	bf14      	ite	ne
  407328:	2640      	movne	r6, #64	; 0x40
  40732a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40732e:	2700      	movs	r7, #0
  407330:	4628      	mov	r0, r5
  407332:	4631      	mov	r1, r6
  407334:	f000 f846 	bl	4073c4 <_malloc_r>
  407338:	89a3      	ldrh	r3, [r4, #12]
  40733a:	2800      	cmp	r0, #0
  40733c:	d029      	beq.n	407392 <__smakebuf_r+0xbe>
  40733e:	4a1b      	ldr	r2, [pc, #108]	; (4073ac <__smakebuf_r+0xd8>)
  407340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407344:	63ea      	str	r2, [r5, #60]	; 0x3c
  407346:	81a3      	strh	r3, [r4, #12]
  407348:	6020      	str	r0, [r4, #0]
  40734a:	6120      	str	r0, [r4, #16]
  40734c:	6166      	str	r6, [r4, #20]
  40734e:	b9a7      	cbnz	r7, 40737a <__smakebuf_r+0xa6>
  407350:	b011      	add	sp, #68	; 0x44
  407352:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407354:	f101 0343 	add.w	r3, r1, #67	; 0x43
  407358:	2201      	movs	r2, #1
  40735a:	600b      	str	r3, [r1, #0]
  40735c:	610b      	str	r3, [r1, #16]
  40735e:	614a      	str	r2, [r1, #20]
  407360:	b011      	add	sp, #68	; 0x44
  407362:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407364:	4a12      	ldr	r2, [pc, #72]	; (4073b0 <__smakebuf_r+0xdc>)
  407366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  407368:	4293      	cmp	r3, r2
  40736a:	d1ce      	bne.n	40730a <__smakebuf_r+0x36>
  40736c:	89a3      	ldrh	r3, [r4, #12]
  40736e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  407372:	4333      	orrs	r3, r6
  407374:	81a3      	strh	r3, [r4, #12]
  407376:	64e6      	str	r6, [r4, #76]	; 0x4c
  407378:	e7da      	b.n	407330 <__smakebuf_r+0x5c>
  40737a:	4628      	mov	r0, r5
  40737c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407380:	f002 fdb6 	bl	409ef0 <_isatty_r>
  407384:	2800      	cmp	r0, #0
  407386:	d0e3      	beq.n	407350 <__smakebuf_r+0x7c>
  407388:	89a3      	ldrh	r3, [r4, #12]
  40738a:	f043 0301 	orr.w	r3, r3, #1
  40738e:	81a3      	strh	r3, [r4, #12]
  407390:	e7de      	b.n	407350 <__smakebuf_r+0x7c>
  407392:	059a      	lsls	r2, r3, #22
  407394:	d4dc      	bmi.n	407350 <__smakebuf_r+0x7c>
  407396:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40739a:	f043 0302 	orr.w	r3, r3, #2
  40739e:	2101      	movs	r1, #1
  4073a0:	81a3      	strh	r3, [r4, #12]
  4073a2:	6022      	str	r2, [r4, #0]
  4073a4:	6122      	str	r2, [r4, #16]
  4073a6:	6161      	str	r1, [r4, #20]
  4073a8:	e7d2      	b.n	407350 <__smakebuf_r+0x7c>
  4073aa:	bf00      	nop
  4073ac:	00406b2d 	.word	0x00406b2d
  4073b0:	00408509 	.word	0x00408509

004073b4 <malloc>:
  4073b4:	4b02      	ldr	r3, [pc, #8]	; (4073c0 <malloc+0xc>)
  4073b6:	4601      	mov	r1, r0
  4073b8:	6818      	ldr	r0, [r3, #0]
  4073ba:	f000 b803 	b.w	4073c4 <_malloc_r>
  4073be:	bf00      	nop
  4073c0:	20000520 	.word	0x20000520

004073c4 <_malloc_r>:
  4073c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4073c8:	f101 050b 	add.w	r5, r1, #11
  4073cc:	2d16      	cmp	r5, #22
  4073ce:	b083      	sub	sp, #12
  4073d0:	4606      	mov	r6, r0
  4073d2:	d927      	bls.n	407424 <_malloc_r+0x60>
  4073d4:	f035 0507 	bics.w	r5, r5, #7
  4073d8:	d427      	bmi.n	40742a <_malloc_r+0x66>
  4073da:	42a9      	cmp	r1, r5
  4073dc:	d825      	bhi.n	40742a <_malloc_r+0x66>
  4073de:	4630      	mov	r0, r6
  4073e0:	f000 fb3c 	bl	407a5c <__malloc_lock>
  4073e4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4073e8:	d226      	bcs.n	407438 <_malloc_r+0x74>
  4073ea:	4fc1      	ldr	r7, [pc, #772]	; (4076f0 <_malloc_r+0x32c>)
  4073ec:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  4073f0:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  4073f4:	68dc      	ldr	r4, [r3, #12]
  4073f6:	429c      	cmp	r4, r3
  4073f8:	f000 81d2 	beq.w	4077a0 <_malloc_r+0x3dc>
  4073fc:	6863      	ldr	r3, [r4, #4]
  4073fe:	68e2      	ldr	r2, [r4, #12]
  407400:	f023 0303 	bic.w	r3, r3, #3
  407404:	4423      	add	r3, r4
  407406:	6858      	ldr	r0, [r3, #4]
  407408:	68a1      	ldr	r1, [r4, #8]
  40740a:	f040 0501 	orr.w	r5, r0, #1
  40740e:	60ca      	str	r2, [r1, #12]
  407410:	4630      	mov	r0, r6
  407412:	6091      	str	r1, [r2, #8]
  407414:	605d      	str	r5, [r3, #4]
  407416:	f000 fb23 	bl	407a60 <__malloc_unlock>
  40741a:	3408      	adds	r4, #8
  40741c:	4620      	mov	r0, r4
  40741e:	b003      	add	sp, #12
  407420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407424:	2510      	movs	r5, #16
  407426:	42a9      	cmp	r1, r5
  407428:	d9d9      	bls.n	4073de <_malloc_r+0x1a>
  40742a:	2400      	movs	r4, #0
  40742c:	230c      	movs	r3, #12
  40742e:	4620      	mov	r0, r4
  407430:	6033      	str	r3, [r6, #0]
  407432:	b003      	add	sp, #12
  407434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407438:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  40743c:	f000 8089 	beq.w	407552 <_malloc_r+0x18e>
  407440:	f1bc 0f04 	cmp.w	ip, #4
  407444:	f200 8160 	bhi.w	407708 <_malloc_r+0x344>
  407448:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  40744c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  407450:	ea4f 014c 	mov.w	r1, ip, lsl #1
  407454:	4fa6      	ldr	r7, [pc, #664]	; (4076f0 <_malloc_r+0x32c>)
  407456:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40745a:	68cc      	ldr	r4, [r1, #12]
  40745c:	42a1      	cmp	r1, r4
  40745e:	d105      	bne.n	40746c <_malloc_r+0xa8>
  407460:	e00c      	b.n	40747c <_malloc_r+0xb8>
  407462:	2b00      	cmp	r3, #0
  407464:	da79      	bge.n	40755a <_malloc_r+0x196>
  407466:	68e4      	ldr	r4, [r4, #12]
  407468:	42a1      	cmp	r1, r4
  40746a:	d007      	beq.n	40747c <_malloc_r+0xb8>
  40746c:	6862      	ldr	r2, [r4, #4]
  40746e:	f022 0203 	bic.w	r2, r2, #3
  407472:	1b53      	subs	r3, r2, r5
  407474:	2b0f      	cmp	r3, #15
  407476:	ddf4      	ble.n	407462 <_malloc_r+0x9e>
  407478:	f10c 3cff 	add.w	ip, ip, #4294967295
  40747c:	f10c 0c01 	add.w	ip, ip, #1
  407480:	4b9b      	ldr	r3, [pc, #620]	; (4076f0 <_malloc_r+0x32c>)
  407482:	693c      	ldr	r4, [r7, #16]
  407484:	f103 0e08 	add.w	lr, r3, #8
  407488:	4574      	cmp	r4, lr
  40748a:	f000 817e 	beq.w	40778a <_malloc_r+0x3c6>
  40748e:	6861      	ldr	r1, [r4, #4]
  407490:	f021 0103 	bic.w	r1, r1, #3
  407494:	1b4a      	subs	r2, r1, r5
  407496:	2a0f      	cmp	r2, #15
  407498:	f300 8164 	bgt.w	407764 <_malloc_r+0x3a0>
  40749c:	2a00      	cmp	r2, #0
  40749e:	f8c3 e014 	str.w	lr, [r3, #20]
  4074a2:	f8c3 e010 	str.w	lr, [r3, #16]
  4074a6:	da69      	bge.n	40757c <_malloc_r+0x1b8>
  4074a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  4074ac:	f080 813a 	bcs.w	407724 <_malloc_r+0x360>
  4074b0:	08c9      	lsrs	r1, r1, #3
  4074b2:	108a      	asrs	r2, r1, #2
  4074b4:	f04f 0801 	mov.w	r8, #1
  4074b8:	fa08 f802 	lsl.w	r8, r8, r2
  4074bc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4074c0:	685a      	ldr	r2, [r3, #4]
  4074c2:	6888      	ldr	r0, [r1, #8]
  4074c4:	ea48 0202 	orr.w	r2, r8, r2
  4074c8:	60a0      	str	r0, [r4, #8]
  4074ca:	60e1      	str	r1, [r4, #12]
  4074cc:	605a      	str	r2, [r3, #4]
  4074ce:	608c      	str	r4, [r1, #8]
  4074d0:	60c4      	str	r4, [r0, #12]
  4074d2:	ea4f 03ac 	mov.w	r3, ip, asr #2
  4074d6:	2001      	movs	r0, #1
  4074d8:	4098      	lsls	r0, r3
  4074da:	4290      	cmp	r0, r2
  4074dc:	d85b      	bhi.n	407596 <_malloc_r+0x1d2>
  4074de:	4202      	tst	r2, r0
  4074e0:	d106      	bne.n	4074f0 <_malloc_r+0x12c>
  4074e2:	f02c 0c03 	bic.w	ip, ip, #3
  4074e6:	0040      	lsls	r0, r0, #1
  4074e8:	4202      	tst	r2, r0
  4074ea:	f10c 0c04 	add.w	ip, ip, #4
  4074ee:	d0fa      	beq.n	4074e6 <_malloc_r+0x122>
  4074f0:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  4074f4:	4644      	mov	r4, r8
  4074f6:	46e1      	mov	r9, ip
  4074f8:	68e3      	ldr	r3, [r4, #12]
  4074fa:	429c      	cmp	r4, r3
  4074fc:	d107      	bne.n	40750e <_malloc_r+0x14a>
  4074fe:	e146      	b.n	40778e <_malloc_r+0x3ca>
  407500:	2a00      	cmp	r2, #0
  407502:	f280 8157 	bge.w	4077b4 <_malloc_r+0x3f0>
  407506:	68db      	ldr	r3, [r3, #12]
  407508:	429c      	cmp	r4, r3
  40750a:	f000 8140 	beq.w	40778e <_malloc_r+0x3ca>
  40750e:	6859      	ldr	r1, [r3, #4]
  407510:	f021 0103 	bic.w	r1, r1, #3
  407514:	1b4a      	subs	r2, r1, r5
  407516:	2a0f      	cmp	r2, #15
  407518:	ddf2      	ble.n	407500 <_malloc_r+0x13c>
  40751a:	461c      	mov	r4, r3
  40751c:	f854 cf08 	ldr.w	ip, [r4, #8]!
  407520:	68d9      	ldr	r1, [r3, #12]
  407522:	f045 0901 	orr.w	r9, r5, #1
  407526:	f042 0801 	orr.w	r8, r2, #1
  40752a:	441d      	add	r5, r3
  40752c:	f8c3 9004 	str.w	r9, [r3, #4]
  407530:	4630      	mov	r0, r6
  407532:	f8cc 100c 	str.w	r1, [ip, #12]
  407536:	f8c1 c008 	str.w	ip, [r1, #8]
  40753a:	617d      	str	r5, [r7, #20]
  40753c:	613d      	str	r5, [r7, #16]
  40753e:	f8c5 e00c 	str.w	lr, [r5, #12]
  407542:	f8c5 e008 	str.w	lr, [r5, #8]
  407546:	f8c5 8004 	str.w	r8, [r5, #4]
  40754a:	50aa      	str	r2, [r5, r2]
  40754c:	f000 fa88 	bl	407a60 <__malloc_unlock>
  407550:	e764      	b.n	40741c <_malloc_r+0x58>
  407552:	217e      	movs	r1, #126	; 0x7e
  407554:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  407558:	e77c      	b.n	407454 <_malloc_r+0x90>
  40755a:	4422      	add	r2, r4
  40755c:	6850      	ldr	r0, [r2, #4]
  40755e:	68e3      	ldr	r3, [r4, #12]
  407560:	68a1      	ldr	r1, [r4, #8]
  407562:	f040 0501 	orr.w	r5, r0, #1
  407566:	60cb      	str	r3, [r1, #12]
  407568:	4630      	mov	r0, r6
  40756a:	6099      	str	r1, [r3, #8]
  40756c:	6055      	str	r5, [r2, #4]
  40756e:	f000 fa77 	bl	407a60 <__malloc_unlock>
  407572:	3408      	adds	r4, #8
  407574:	4620      	mov	r0, r4
  407576:	b003      	add	sp, #12
  407578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40757c:	4421      	add	r1, r4
  40757e:	684b      	ldr	r3, [r1, #4]
  407580:	4630      	mov	r0, r6
  407582:	f043 0301 	orr.w	r3, r3, #1
  407586:	604b      	str	r3, [r1, #4]
  407588:	f000 fa6a 	bl	407a60 <__malloc_unlock>
  40758c:	3408      	adds	r4, #8
  40758e:	4620      	mov	r0, r4
  407590:	b003      	add	sp, #12
  407592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407596:	68bc      	ldr	r4, [r7, #8]
  407598:	6863      	ldr	r3, [r4, #4]
  40759a:	f023 0903 	bic.w	r9, r3, #3
  40759e:	45a9      	cmp	r9, r5
  4075a0:	d304      	bcc.n	4075ac <_malloc_r+0x1e8>
  4075a2:	ebc5 0309 	rsb	r3, r5, r9
  4075a6:	2b0f      	cmp	r3, #15
  4075a8:	f300 8091 	bgt.w	4076ce <_malloc_r+0x30a>
  4075ac:	4b51      	ldr	r3, [pc, #324]	; (4076f4 <_malloc_r+0x330>)
  4075ae:	4a52      	ldr	r2, [pc, #328]	; (4076f8 <_malloc_r+0x334>)
  4075b0:	6819      	ldr	r1, [r3, #0]
  4075b2:	6813      	ldr	r3, [r2, #0]
  4075b4:	eb05 0a01 	add.w	sl, r5, r1
  4075b8:	3301      	adds	r3, #1
  4075ba:	eb04 0b09 	add.w	fp, r4, r9
  4075be:	f000 8161 	beq.w	407884 <_malloc_r+0x4c0>
  4075c2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  4075c6:	f10a 0a0f 	add.w	sl, sl, #15
  4075ca:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  4075ce:	f02a 0a0f 	bic.w	sl, sl, #15
  4075d2:	4630      	mov	r0, r6
  4075d4:	4651      	mov	r1, sl
  4075d6:	9201      	str	r2, [sp, #4]
  4075d8:	f000 ff56 	bl	408488 <_sbrk_r>
  4075dc:	f1b0 3fff 	cmp.w	r0, #4294967295
  4075e0:	4680      	mov	r8, r0
  4075e2:	9a01      	ldr	r2, [sp, #4]
  4075e4:	f000 8101 	beq.w	4077ea <_malloc_r+0x426>
  4075e8:	4583      	cmp	fp, r0
  4075ea:	f200 80fb 	bhi.w	4077e4 <_malloc_r+0x420>
  4075ee:	f8df c114 	ldr.w	ip, [pc, #276]	; 407704 <_malloc_r+0x340>
  4075f2:	45c3      	cmp	fp, r8
  4075f4:	f8dc 3000 	ldr.w	r3, [ip]
  4075f8:	4453      	add	r3, sl
  4075fa:	f8cc 3000 	str.w	r3, [ip]
  4075fe:	f000 814a 	beq.w	407896 <_malloc_r+0x4d2>
  407602:	6812      	ldr	r2, [r2, #0]
  407604:	493c      	ldr	r1, [pc, #240]	; (4076f8 <_malloc_r+0x334>)
  407606:	3201      	adds	r2, #1
  407608:	bf1b      	ittet	ne
  40760a:	ebcb 0b08 	rsbne	fp, fp, r8
  40760e:	445b      	addne	r3, fp
  407610:	f8c1 8000 	streq.w	r8, [r1]
  407614:	f8cc 3000 	strne.w	r3, [ip]
  407618:	f018 0307 	ands.w	r3, r8, #7
  40761c:	f000 8114 	beq.w	407848 <_malloc_r+0x484>
  407620:	f1c3 0208 	rsb	r2, r3, #8
  407624:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  407628:	4490      	add	r8, r2
  40762a:	3308      	adds	r3, #8
  40762c:	44c2      	add	sl, r8
  40762e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  407632:	ebca 0a03 	rsb	sl, sl, r3
  407636:	4651      	mov	r1, sl
  407638:	4630      	mov	r0, r6
  40763a:	f8cd c004 	str.w	ip, [sp, #4]
  40763e:	f000 ff23 	bl	408488 <_sbrk_r>
  407642:	1c43      	adds	r3, r0, #1
  407644:	f8dd c004 	ldr.w	ip, [sp, #4]
  407648:	f000 8135 	beq.w	4078b6 <_malloc_r+0x4f2>
  40764c:	ebc8 0200 	rsb	r2, r8, r0
  407650:	4452      	add	r2, sl
  407652:	f042 0201 	orr.w	r2, r2, #1
  407656:	f8dc 3000 	ldr.w	r3, [ip]
  40765a:	42bc      	cmp	r4, r7
  40765c:	4453      	add	r3, sl
  40765e:	f8c7 8008 	str.w	r8, [r7, #8]
  407662:	f8cc 3000 	str.w	r3, [ip]
  407666:	f8c8 2004 	str.w	r2, [r8, #4]
  40766a:	f8df a098 	ldr.w	sl, [pc, #152]	; 407704 <_malloc_r+0x340>
  40766e:	d015      	beq.n	40769c <_malloc_r+0x2d8>
  407670:	f1b9 0f0f 	cmp.w	r9, #15
  407674:	f240 80eb 	bls.w	40784e <_malloc_r+0x48a>
  407678:	6861      	ldr	r1, [r4, #4]
  40767a:	f1a9 020c 	sub.w	r2, r9, #12
  40767e:	f022 0207 	bic.w	r2, r2, #7
  407682:	f001 0101 	and.w	r1, r1, #1
  407686:	ea42 0e01 	orr.w	lr, r2, r1
  40768a:	2005      	movs	r0, #5
  40768c:	18a1      	adds	r1, r4, r2
  40768e:	2a0f      	cmp	r2, #15
  407690:	f8c4 e004 	str.w	lr, [r4, #4]
  407694:	6048      	str	r0, [r1, #4]
  407696:	6088      	str	r0, [r1, #8]
  407698:	f200 8111 	bhi.w	4078be <_malloc_r+0x4fa>
  40769c:	4a17      	ldr	r2, [pc, #92]	; (4076fc <_malloc_r+0x338>)
  40769e:	68bc      	ldr	r4, [r7, #8]
  4076a0:	6811      	ldr	r1, [r2, #0]
  4076a2:	428b      	cmp	r3, r1
  4076a4:	bf88      	it	hi
  4076a6:	6013      	strhi	r3, [r2, #0]
  4076a8:	4a15      	ldr	r2, [pc, #84]	; (407700 <_malloc_r+0x33c>)
  4076aa:	6811      	ldr	r1, [r2, #0]
  4076ac:	428b      	cmp	r3, r1
  4076ae:	bf88      	it	hi
  4076b0:	6013      	strhi	r3, [r2, #0]
  4076b2:	6862      	ldr	r2, [r4, #4]
  4076b4:	f022 0203 	bic.w	r2, r2, #3
  4076b8:	4295      	cmp	r5, r2
  4076ba:	ebc5 0302 	rsb	r3, r5, r2
  4076be:	d801      	bhi.n	4076c4 <_malloc_r+0x300>
  4076c0:	2b0f      	cmp	r3, #15
  4076c2:	dc04      	bgt.n	4076ce <_malloc_r+0x30a>
  4076c4:	4630      	mov	r0, r6
  4076c6:	f000 f9cb 	bl	407a60 <__malloc_unlock>
  4076ca:	2400      	movs	r4, #0
  4076cc:	e6a6      	b.n	40741c <_malloc_r+0x58>
  4076ce:	f045 0201 	orr.w	r2, r5, #1
  4076d2:	f043 0301 	orr.w	r3, r3, #1
  4076d6:	4425      	add	r5, r4
  4076d8:	6062      	str	r2, [r4, #4]
  4076da:	4630      	mov	r0, r6
  4076dc:	60bd      	str	r5, [r7, #8]
  4076de:	606b      	str	r3, [r5, #4]
  4076e0:	f000 f9be 	bl	407a60 <__malloc_unlock>
  4076e4:	3408      	adds	r4, #8
  4076e6:	4620      	mov	r0, r4
  4076e8:	b003      	add	sp, #12
  4076ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076ee:	bf00      	nop
  4076f0:	20000580 	.word	0x20000580
  4076f4:	200037e4 	.word	0x200037e4
  4076f8:	2000098c 	.word	0x2000098c
  4076fc:	200037e0 	.word	0x200037e0
  407700:	200037dc 	.word	0x200037dc
  407704:	200037e8 	.word	0x200037e8
  407708:	f1bc 0f14 	cmp.w	ip, #20
  40770c:	d961      	bls.n	4077d2 <_malloc_r+0x40e>
  40770e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  407712:	f200 808f 	bhi.w	407834 <_malloc_r+0x470>
  407716:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  40771a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40771e:	ea4f 014c 	mov.w	r1, ip, lsl #1
  407722:	e697      	b.n	407454 <_malloc_r+0x90>
  407724:	0a4b      	lsrs	r3, r1, #9
  407726:	2b04      	cmp	r3, #4
  407728:	d958      	bls.n	4077dc <_malloc_r+0x418>
  40772a:	2b14      	cmp	r3, #20
  40772c:	f200 80ad 	bhi.w	40788a <_malloc_r+0x4c6>
  407730:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  407734:	0050      	lsls	r0, r2, #1
  407736:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40773a:	6883      	ldr	r3, [r0, #8]
  40773c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 4078f8 <_malloc_r+0x534>
  407740:	4283      	cmp	r3, r0
  407742:	f000 808a 	beq.w	40785a <_malloc_r+0x496>
  407746:	685a      	ldr	r2, [r3, #4]
  407748:	f022 0203 	bic.w	r2, r2, #3
  40774c:	4291      	cmp	r1, r2
  40774e:	d202      	bcs.n	407756 <_malloc_r+0x392>
  407750:	689b      	ldr	r3, [r3, #8]
  407752:	4298      	cmp	r0, r3
  407754:	d1f7      	bne.n	407746 <_malloc_r+0x382>
  407756:	68d9      	ldr	r1, [r3, #12]
  407758:	687a      	ldr	r2, [r7, #4]
  40775a:	60e1      	str	r1, [r4, #12]
  40775c:	60a3      	str	r3, [r4, #8]
  40775e:	608c      	str	r4, [r1, #8]
  407760:	60dc      	str	r4, [r3, #12]
  407762:	e6b6      	b.n	4074d2 <_malloc_r+0x10e>
  407764:	f045 0701 	orr.w	r7, r5, #1
  407768:	f042 0101 	orr.w	r1, r2, #1
  40776c:	4425      	add	r5, r4
  40776e:	6067      	str	r7, [r4, #4]
  407770:	4630      	mov	r0, r6
  407772:	615d      	str	r5, [r3, #20]
  407774:	611d      	str	r5, [r3, #16]
  407776:	f8c5 e00c 	str.w	lr, [r5, #12]
  40777a:	f8c5 e008 	str.w	lr, [r5, #8]
  40777e:	6069      	str	r1, [r5, #4]
  407780:	50aa      	str	r2, [r5, r2]
  407782:	3408      	adds	r4, #8
  407784:	f000 f96c 	bl	407a60 <__malloc_unlock>
  407788:	e648      	b.n	40741c <_malloc_r+0x58>
  40778a:	685a      	ldr	r2, [r3, #4]
  40778c:	e6a1      	b.n	4074d2 <_malloc_r+0x10e>
  40778e:	f109 0901 	add.w	r9, r9, #1
  407792:	f019 0f03 	tst.w	r9, #3
  407796:	f104 0408 	add.w	r4, r4, #8
  40779a:	f47f aead 	bne.w	4074f8 <_malloc_r+0x134>
  40779e:	e02d      	b.n	4077fc <_malloc_r+0x438>
  4077a0:	f104 0308 	add.w	r3, r4, #8
  4077a4:	6964      	ldr	r4, [r4, #20]
  4077a6:	42a3      	cmp	r3, r4
  4077a8:	bf08      	it	eq
  4077aa:	f10c 0c02 	addeq.w	ip, ip, #2
  4077ae:	f43f ae67 	beq.w	407480 <_malloc_r+0xbc>
  4077b2:	e623      	b.n	4073fc <_malloc_r+0x38>
  4077b4:	4419      	add	r1, r3
  4077b6:	6848      	ldr	r0, [r1, #4]
  4077b8:	461c      	mov	r4, r3
  4077ba:	f854 2f08 	ldr.w	r2, [r4, #8]!
  4077be:	68db      	ldr	r3, [r3, #12]
  4077c0:	f040 0501 	orr.w	r5, r0, #1
  4077c4:	604d      	str	r5, [r1, #4]
  4077c6:	4630      	mov	r0, r6
  4077c8:	60d3      	str	r3, [r2, #12]
  4077ca:	609a      	str	r2, [r3, #8]
  4077cc:	f000 f948 	bl	407a60 <__malloc_unlock>
  4077d0:	e624      	b.n	40741c <_malloc_r+0x58>
  4077d2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  4077d6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4077da:	e63b      	b.n	407454 <_malloc_r+0x90>
  4077dc:	098a      	lsrs	r2, r1, #6
  4077de:	3238      	adds	r2, #56	; 0x38
  4077e0:	0050      	lsls	r0, r2, #1
  4077e2:	e7a8      	b.n	407736 <_malloc_r+0x372>
  4077e4:	42bc      	cmp	r4, r7
  4077e6:	f43f af02 	beq.w	4075ee <_malloc_r+0x22a>
  4077ea:	68bc      	ldr	r4, [r7, #8]
  4077ec:	6862      	ldr	r2, [r4, #4]
  4077ee:	f022 0203 	bic.w	r2, r2, #3
  4077f2:	e761      	b.n	4076b8 <_malloc_r+0x2f4>
  4077f4:	f8d8 8000 	ldr.w	r8, [r8]
  4077f8:	4598      	cmp	r8, r3
  4077fa:	d17a      	bne.n	4078f2 <_malloc_r+0x52e>
  4077fc:	f01c 0f03 	tst.w	ip, #3
  407800:	f1a8 0308 	sub.w	r3, r8, #8
  407804:	f10c 3cff 	add.w	ip, ip, #4294967295
  407808:	d1f4      	bne.n	4077f4 <_malloc_r+0x430>
  40780a:	687b      	ldr	r3, [r7, #4]
  40780c:	ea23 0300 	bic.w	r3, r3, r0
  407810:	607b      	str	r3, [r7, #4]
  407812:	0040      	lsls	r0, r0, #1
  407814:	4298      	cmp	r0, r3
  407816:	f63f aebe 	bhi.w	407596 <_malloc_r+0x1d2>
  40781a:	2800      	cmp	r0, #0
  40781c:	f43f aebb 	beq.w	407596 <_malloc_r+0x1d2>
  407820:	4203      	tst	r3, r0
  407822:	46cc      	mov	ip, r9
  407824:	f47f ae64 	bne.w	4074f0 <_malloc_r+0x12c>
  407828:	0040      	lsls	r0, r0, #1
  40782a:	4203      	tst	r3, r0
  40782c:	f10c 0c04 	add.w	ip, ip, #4
  407830:	d0fa      	beq.n	407828 <_malloc_r+0x464>
  407832:	e65d      	b.n	4074f0 <_malloc_r+0x12c>
  407834:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  407838:	d819      	bhi.n	40786e <_malloc_r+0x4aa>
  40783a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  40783e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  407842:	ea4f 014c 	mov.w	r1, ip, lsl #1
  407846:	e605      	b.n	407454 <_malloc_r+0x90>
  407848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40784c:	e6ee      	b.n	40762c <_malloc_r+0x268>
  40784e:	2301      	movs	r3, #1
  407850:	f8c8 3004 	str.w	r3, [r8, #4]
  407854:	4644      	mov	r4, r8
  407856:	2200      	movs	r2, #0
  407858:	e72e      	b.n	4076b8 <_malloc_r+0x2f4>
  40785a:	1092      	asrs	r2, r2, #2
  40785c:	2001      	movs	r0, #1
  40785e:	4090      	lsls	r0, r2
  407860:	f8d8 2004 	ldr.w	r2, [r8, #4]
  407864:	4619      	mov	r1, r3
  407866:	4302      	orrs	r2, r0
  407868:	f8c8 2004 	str.w	r2, [r8, #4]
  40786c:	e775      	b.n	40775a <_malloc_r+0x396>
  40786e:	f240 5354 	movw	r3, #1364	; 0x554
  407872:	459c      	cmp	ip, r3
  407874:	d81b      	bhi.n	4078ae <_malloc_r+0x4ea>
  407876:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  40787a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40787e:	ea4f 014c 	mov.w	r1, ip, lsl #1
  407882:	e5e7      	b.n	407454 <_malloc_r+0x90>
  407884:	f10a 0a10 	add.w	sl, sl, #16
  407888:	e6a3      	b.n	4075d2 <_malloc_r+0x20e>
  40788a:	2b54      	cmp	r3, #84	; 0x54
  40788c:	d81f      	bhi.n	4078ce <_malloc_r+0x50a>
  40788e:	0b0a      	lsrs	r2, r1, #12
  407890:	326e      	adds	r2, #110	; 0x6e
  407892:	0050      	lsls	r0, r2, #1
  407894:	e74f      	b.n	407736 <_malloc_r+0x372>
  407896:	f3cb 010b 	ubfx	r1, fp, #0, #12
  40789a:	2900      	cmp	r1, #0
  40789c:	f47f aeb1 	bne.w	407602 <_malloc_r+0x23e>
  4078a0:	eb0a 0109 	add.w	r1, sl, r9
  4078a4:	68ba      	ldr	r2, [r7, #8]
  4078a6:	f041 0101 	orr.w	r1, r1, #1
  4078aa:	6051      	str	r1, [r2, #4]
  4078ac:	e6f6      	b.n	40769c <_malloc_r+0x2d8>
  4078ae:	21fc      	movs	r1, #252	; 0xfc
  4078b0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  4078b4:	e5ce      	b.n	407454 <_malloc_r+0x90>
  4078b6:	2201      	movs	r2, #1
  4078b8:	f04f 0a00 	mov.w	sl, #0
  4078bc:	e6cb      	b.n	407656 <_malloc_r+0x292>
  4078be:	f104 0108 	add.w	r1, r4, #8
  4078c2:	4630      	mov	r0, r6
  4078c4:	f7ff fa7c 	bl	406dc0 <_free_r>
  4078c8:	f8da 3000 	ldr.w	r3, [sl]
  4078cc:	e6e6      	b.n	40769c <_malloc_r+0x2d8>
  4078ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4078d2:	d803      	bhi.n	4078dc <_malloc_r+0x518>
  4078d4:	0bca      	lsrs	r2, r1, #15
  4078d6:	3277      	adds	r2, #119	; 0x77
  4078d8:	0050      	lsls	r0, r2, #1
  4078da:	e72c      	b.n	407736 <_malloc_r+0x372>
  4078dc:	f240 5254 	movw	r2, #1364	; 0x554
  4078e0:	4293      	cmp	r3, r2
  4078e2:	d803      	bhi.n	4078ec <_malloc_r+0x528>
  4078e4:	0c8a      	lsrs	r2, r1, #18
  4078e6:	327c      	adds	r2, #124	; 0x7c
  4078e8:	0050      	lsls	r0, r2, #1
  4078ea:	e724      	b.n	407736 <_malloc_r+0x372>
  4078ec:	20fc      	movs	r0, #252	; 0xfc
  4078ee:	227e      	movs	r2, #126	; 0x7e
  4078f0:	e721      	b.n	407736 <_malloc_r+0x372>
  4078f2:	687b      	ldr	r3, [r7, #4]
  4078f4:	e78d      	b.n	407812 <_malloc_r+0x44e>
  4078f6:	bf00      	nop
  4078f8:	20000580 	.word	0x20000580

004078fc <memchr>:
  4078fc:	0783      	lsls	r3, r0, #30
  4078fe:	b470      	push	{r4, r5, r6}
  407900:	b2c9      	uxtb	r1, r1
  407902:	d040      	beq.n	407986 <memchr+0x8a>
  407904:	1e54      	subs	r4, r2, #1
  407906:	b32a      	cbz	r2, 407954 <memchr+0x58>
  407908:	7803      	ldrb	r3, [r0, #0]
  40790a:	428b      	cmp	r3, r1
  40790c:	d023      	beq.n	407956 <memchr+0x5a>
  40790e:	1c43      	adds	r3, r0, #1
  407910:	e004      	b.n	40791c <memchr+0x20>
  407912:	b1fc      	cbz	r4, 407954 <memchr+0x58>
  407914:	7805      	ldrb	r5, [r0, #0]
  407916:	4614      	mov	r4, r2
  407918:	428d      	cmp	r5, r1
  40791a:	d01c      	beq.n	407956 <memchr+0x5a>
  40791c:	f013 0f03 	tst.w	r3, #3
  407920:	4618      	mov	r0, r3
  407922:	f104 32ff 	add.w	r2, r4, #4294967295
  407926:	f103 0301 	add.w	r3, r3, #1
  40792a:	d1f2      	bne.n	407912 <memchr+0x16>
  40792c:	2c03      	cmp	r4, #3
  40792e:	d814      	bhi.n	40795a <memchr+0x5e>
  407930:	1e65      	subs	r5, r4, #1
  407932:	b354      	cbz	r4, 40798a <memchr+0x8e>
  407934:	7803      	ldrb	r3, [r0, #0]
  407936:	428b      	cmp	r3, r1
  407938:	d00d      	beq.n	407956 <memchr+0x5a>
  40793a:	1c42      	adds	r2, r0, #1
  40793c:	2300      	movs	r3, #0
  40793e:	e002      	b.n	407946 <memchr+0x4a>
  407940:	7804      	ldrb	r4, [r0, #0]
  407942:	428c      	cmp	r4, r1
  407944:	d007      	beq.n	407956 <memchr+0x5a>
  407946:	42ab      	cmp	r3, r5
  407948:	4610      	mov	r0, r2
  40794a:	f103 0301 	add.w	r3, r3, #1
  40794e:	f102 0201 	add.w	r2, r2, #1
  407952:	d1f5      	bne.n	407940 <memchr+0x44>
  407954:	2000      	movs	r0, #0
  407956:	bc70      	pop	{r4, r5, r6}
  407958:	4770      	bx	lr
  40795a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40795e:	4603      	mov	r3, r0
  407960:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  407964:	681a      	ldr	r2, [r3, #0]
  407966:	4618      	mov	r0, r3
  407968:	4072      	eors	r2, r6
  40796a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  40796e:	ea25 0202 	bic.w	r2, r5, r2
  407972:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407976:	f103 0304 	add.w	r3, r3, #4
  40797a:	d1d9      	bne.n	407930 <memchr+0x34>
  40797c:	3c04      	subs	r4, #4
  40797e:	2c03      	cmp	r4, #3
  407980:	4618      	mov	r0, r3
  407982:	d8ef      	bhi.n	407964 <memchr+0x68>
  407984:	e7d4      	b.n	407930 <memchr+0x34>
  407986:	4614      	mov	r4, r2
  407988:	e7d0      	b.n	40792c <memchr+0x30>
  40798a:	4620      	mov	r0, r4
  40798c:	e7e3      	b.n	407956 <memchr+0x5a>
  40798e:	bf00      	nop

00407990 <memmove>:
  407990:	4288      	cmp	r0, r1
  407992:	b4f0      	push	{r4, r5, r6, r7}
  407994:	d910      	bls.n	4079b8 <memmove+0x28>
  407996:	188c      	adds	r4, r1, r2
  407998:	42a0      	cmp	r0, r4
  40799a:	d20d      	bcs.n	4079b8 <memmove+0x28>
  40799c:	1885      	adds	r5, r0, r2
  40799e:	1e53      	subs	r3, r2, #1
  4079a0:	b142      	cbz	r2, 4079b4 <memmove+0x24>
  4079a2:	4621      	mov	r1, r4
  4079a4:	462a      	mov	r2, r5
  4079a6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  4079aa:	3b01      	subs	r3, #1
  4079ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4079b0:	1c5c      	adds	r4, r3, #1
  4079b2:	d1f8      	bne.n	4079a6 <memmove+0x16>
  4079b4:	bcf0      	pop	{r4, r5, r6, r7}
  4079b6:	4770      	bx	lr
  4079b8:	2a0f      	cmp	r2, #15
  4079ba:	d944      	bls.n	407a46 <memmove+0xb6>
  4079bc:	ea40 0301 	orr.w	r3, r0, r1
  4079c0:	079b      	lsls	r3, r3, #30
  4079c2:	d144      	bne.n	407a4e <memmove+0xbe>
  4079c4:	f1a2 0710 	sub.w	r7, r2, #16
  4079c8:	093f      	lsrs	r7, r7, #4
  4079ca:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  4079ce:	3610      	adds	r6, #16
  4079d0:	460c      	mov	r4, r1
  4079d2:	4603      	mov	r3, r0
  4079d4:	6825      	ldr	r5, [r4, #0]
  4079d6:	3310      	adds	r3, #16
  4079d8:	f843 5c10 	str.w	r5, [r3, #-16]
  4079dc:	6865      	ldr	r5, [r4, #4]
  4079de:	3410      	adds	r4, #16
  4079e0:	f843 5c0c 	str.w	r5, [r3, #-12]
  4079e4:	f854 5c08 	ldr.w	r5, [r4, #-8]
  4079e8:	f843 5c08 	str.w	r5, [r3, #-8]
  4079ec:	f854 5c04 	ldr.w	r5, [r4, #-4]
  4079f0:	f843 5c04 	str.w	r5, [r3, #-4]
  4079f4:	42b3      	cmp	r3, r6
  4079f6:	d1ed      	bne.n	4079d4 <memmove+0x44>
  4079f8:	1c7b      	adds	r3, r7, #1
  4079fa:	f002 0c0f 	and.w	ip, r2, #15
  4079fe:	011b      	lsls	r3, r3, #4
  407a00:	f1bc 0f03 	cmp.w	ip, #3
  407a04:	4419      	add	r1, r3
  407a06:	4403      	add	r3, r0
  407a08:	d923      	bls.n	407a52 <memmove+0xc2>
  407a0a:	460e      	mov	r6, r1
  407a0c:	461d      	mov	r5, r3
  407a0e:	4664      	mov	r4, ip
  407a10:	f856 7b04 	ldr.w	r7, [r6], #4
  407a14:	3c04      	subs	r4, #4
  407a16:	2c03      	cmp	r4, #3
  407a18:	f845 7b04 	str.w	r7, [r5], #4
  407a1c:	d8f8      	bhi.n	407a10 <memmove+0x80>
  407a1e:	f1ac 0404 	sub.w	r4, ip, #4
  407a22:	f024 0403 	bic.w	r4, r4, #3
  407a26:	3404      	adds	r4, #4
  407a28:	f002 0203 	and.w	r2, r2, #3
  407a2c:	4423      	add	r3, r4
  407a2e:	4421      	add	r1, r4
  407a30:	2a00      	cmp	r2, #0
  407a32:	d0bf      	beq.n	4079b4 <memmove+0x24>
  407a34:	441a      	add	r2, r3
  407a36:	f811 4b01 	ldrb.w	r4, [r1], #1
  407a3a:	f803 4b01 	strb.w	r4, [r3], #1
  407a3e:	4293      	cmp	r3, r2
  407a40:	d1f9      	bne.n	407a36 <memmove+0xa6>
  407a42:	bcf0      	pop	{r4, r5, r6, r7}
  407a44:	4770      	bx	lr
  407a46:	4603      	mov	r3, r0
  407a48:	2a00      	cmp	r2, #0
  407a4a:	d1f3      	bne.n	407a34 <memmove+0xa4>
  407a4c:	e7b2      	b.n	4079b4 <memmove+0x24>
  407a4e:	4603      	mov	r3, r0
  407a50:	e7f0      	b.n	407a34 <memmove+0xa4>
  407a52:	4662      	mov	r2, ip
  407a54:	2a00      	cmp	r2, #0
  407a56:	d1ed      	bne.n	407a34 <memmove+0xa4>
  407a58:	e7ac      	b.n	4079b4 <memmove+0x24>
  407a5a:	bf00      	nop

00407a5c <__malloc_lock>:
  407a5c:	4770      	bx	lr
  407a5e:	bf00      	nop

00407a60 <__malloc_unlock>:
  407a60:	4770      	bx	lr
  407a62:	bf00      	nop

00407a64 <_Balloc>:
  407a64:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  407a66:	b570      	push	{r4, r5, r6, lr}
  407a68:	4605      	mov	r5, r0
  407a6a:	460c      	mov	r4, r1
  407a6c:	b14a      	cbz	r2, 407a82 <_Balloc+0x1e>
  407a6e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  407a72:	b180      	cbz	r0, 407a96 <_Balloc+0x32>
  407a74:	6801      	ldr	r1, [r0, #0]
  407a76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  407a7a:	2200      	movs	r2, #0
  407a7c:	6102      	str	r2, [r0, #16]
  407a7e:	60c2      	str	r2, [r0, #12]
  407a80:	bd70      	pop	{r4, r5, r6, pc}
  407a82:	2221      	movs	r2, #33	; 0x21
  407a84:	2104      	movs	r1, #4
  407a86:	f002 f995 	bl	409db4 <_calloc_r>
  407a8a:	64e8      	str	r0, [r5, #76]	; 0x4c
  407a8c:	4602      	mov	r2, r0
  407a8e:	2800      	cmp	r0, #0
  407a90:	d1ed      	bne.n	407a6e <_Balloc+0xa>
  407a92:	2000      	movs	r0, #0
  407a94:	bd70      	pop	{r4, r5, r6, pc}
  407a96:	2101      	movs	r1, #1
  407a98:	fa01 f604 	lsl.w	r6, r1, r4
  407a9c:	1d72      	adds	r2, r6, #5
  407a9e:	4628      	mov	r0, r5
  407aa0:	0092      	lsls	r2, r2, #2
  407aa2:	f002 f987 	bl	409db4 <_calloc_r>
  407aa6:	2800      	cmp	r0, #0
  407aa8:	d0f3      	beq.n	407a92 <_Balloc+0x2e>
  407aaa:	6044      	str	r4, [r0, #4]
  407aac:	6086      	str	r6, [r0, #8]
  407aae:	e7e4      	b.n	407a7a <_Balloc+0x16>

00407ab0 <_Bfree>:
  407ab0:	b131      	cbz	r1, 407ac0 <_Bfree+0x10>
  407ab2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407ab4:	684a      	ldr	r2, [r1, #4]
  407ab6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407aba:	6008      	str	r0, [r1, #0]
  407abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407ac0:	4770      	bx	lr
  407ac2:	bf00      	nop

00407ac4 <__multadd>:
  407ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407ac8:	690f      	ldr	r7, [r1, #16]
  407aca:	b083      	sub	sp, #12
  407acc:	4688      	mov	r8, r1
  407ace:	4681      	mov	r9, r0
  407ad0:	f101 0514 	add.w	r5, r1, #20
  407ad4:	2400      	movs	r4, #0
  407ad6:	682e      	ldr	r6, [r5, #0]
  407ad8:	3401      	adds	r4, #1
  407ada:	b2b1      	uxth	r1, r6
  407adc:	0c36      	lsrs	r6, r6, #16
  407ade:	fb02 3301 	mla	r3, r2, r1, r3
  407ae2:	fb02 f606 	mul.w	r6, r2, r6
  407ae6:	b299      	uxth	r1, r3
  407ae8:	eb06 4313 	add.w	r3, r6, r3, lsr #16
  407aec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  407af0:	42a7      	cmp	r7, r4
  407af2:	f845 1b04 	str.w	r1, [r5], #4
  407af6:	ea4f 4313 	mov.w	r3, r3, lsr #16
  407afa:	dcec      	bgt.n	407ad6 <__multadd+0x12>
  407afc:	b14b      	cbz	r3, 407b12 <__multadd+0x4e>
  407afe:	f8d8 2008 	ldr.w	r2, [r8, #8]
  407b02:	4297      	cmp	r7, r2
  407b04:	da09      	bge.n	407b1a <__multadd+0x56>
  407b06:	eb08 0287 	add.w	r2, r8, r7, lsl #2
  407b0a:	3701      	adds	r7, #1
  407b0c:	6153      	str	r3, [r2, #20]
  407b0e:	f8c8 7010 	str.w	r7, [r8, #16]
  407b12:	4640      	mov	r0, r8
  407b14:	b003      	add	sp, #12
  407b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407b1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
  407b1e:	4648      	mov	r0, r9
  407b20:	3101      	adds	r1, #1
  407b22:	9301      	str	r3, [sp, #4]
  407b24:	f7ff ff9e 	bl	407a64 <_Balloc>
  407b28:	f8d8 2010 	ldr.w	r2, [r8, #16]
  407b2c:	f108 010c 	add.w	r1, r8, #12
  407b30:	3202      	adds	r2, #2
  407b32:	4604      	mov	r4, r0
  407b34:	0092      	lsls	r2, r2, #2
  407b36:	300c      	adds	r0, #12
  407b38:	f7fb fb96 	bl	403268 <memcpy>
  407b3c:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
  407b40:	f8d8 1004 	ldr.w	r1, [r8, #4]
  407b44:	9b01      	ldr	r3, [sp, #4]
  407b46:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407b4a:	f8c8 0000 	str.w	r0, [r8]
  407b4e:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
  407b52:	46a0      	mov	r8, r4
  407b54:	e7d7      	b.n	407b06 <__multadd+0x42>
  407b56:	bf00      	nop

00407b58 <__hi0bits>:
  407b58:	0c03      	lsrs	r3, r0, #16
  407b5a:	041b      	lsls	r3, r3, #16
  407b5c:	b9b3      	cbnz	r3, 407b8c <__hi0bits+0x34>
  407b5e:	0400      	lsls	r0, r0, #16
  407b60:	2310      	movs	r3, #16
  407b62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  407b66:	bf04      	itt	eq
  407b68:	0200      	lsleq	r0, r0, #8
  407b6a:	3308      	addeq	r3, #8
  407b6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407b70:	bf04      	itt	eq
  407b72:	0100      	lsleq	r0, r0, #4
  407b74:	3304      	addeq	r3, #4
  407b76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  407b7a:	bf04      	itt	eq
  407b7c:	0080      	lsleq	r0, r0, #2
  407b7e:	3302      	addeq	r3, #2
  407b80:	2800      	cmp	r0, #0
  407b82:	db07      	blt.n	407b94 <__hi0bits+0x3c>
  407b84:	0042      	lsls	r2, r0, #1
  407b86:	d403      	bmi.n	407b90 <__hi0bits+0x38>
  407b88:	2020      	movs	r0, #32
  407b8a:	4770      	bx	lr
  407b8c:	2300      	movs	r3, #0
  407b8e:	e7e8      	b.n	407b62 <__hi0bits+0xa>
  407b90:	1c58      	adds	r0, r3, #1
  407b92:	4770      	bx	lr
  407b94:	4618      	mov	r0, r3
  407b96:	4770      	bx	lr

00407b98 <__lo0bits>:
  407b98:	6803      	ldr	r3, [r0, #0]
  407b9a:	f013 0207 	ands.w	r2, r3, #7
  407b9e:	d007      	beq.n	407bb0 <__lo0bits+0x18>
  407ba0:	07d9      	lsls	r1, r3, #31
  407ba2:	d420      	bmi.n	407be6 <__lo0bits+0x4e>
  407ba4:	079a      	lsls	r2, r3, #30
  407ba6:	d420      	bmi.n	407bea <__lo0bits+0x52>
  407ba8:	089b      	lsrs	r3, r3, #2
  407baa:	6003      	str	r3, [r0, #0]
  407bac:	2002      	movs	r0, #2
  407bae:	4770      	bx	lr
  407bb0:	b299      	uxth	r1, r3
  407bb2:	b909      	cbnz	r1, 407bb8 <__lo0bits+0x20>
  407bb4:	0c1b      	lsrs	r3, r3, #16
  407bb6:	2210      	movs	r2, #16
  407bb8:	f013 0fff 	tst.w	r3, #255	; 0xff
  407bbc:	bf04      	itt	eq
  407bbe:	0a1b      	lsreq	r3, r3, #8
  407bc0:	3208      	addeq	r2, #8
  407bc2:	0719      	lsls	r1, r3, #28
  407bc4:	bf04      	itt	eq
  407bc6:	091b      	lsreq	r3, r3, #4
  407bc8:	3204      	addeq	r2, #4
  407bca:	0799      	lsls	r1, r3, #30
  407bcc:	bf04      	itt	eq
  407bce:	089b      	lsreq	r3, r3, #2
  407bd0:	3202      	addeq	r2, #2
  407bd2:	07d9      	lsls	r1, r3, #31
  407bd4:	d404      	bmi.n	407be0 <__lo0bits+0x48>
  407bd6:	085b      	lsrs	r3, r3, #1
  407bd8:	d101      	bne.n	407bde <__lo0bits+0x46>
  407bda:	2020      	movs	r0, #32
  407bdc:	4770      	bx	lr
  407bde:	3201      	adds	r2, #1
  407be0:	6003      	str	r3, [r0, #0]
  407be2:	4610      	mov	r0, r2
  407be4:	4770      	bx	lr
  407be6:	2000      	movs	r0, #0
  407be8:	4770      	bx	lr
  407bea:	085b      	lsrs	r3, r3, #1
  407bec:	6003      	str	r3, [r0, #0]
  407bee:	2001      	movs	r0, #1
  407bf0:	4770      	bx	lr
  407bf2:	bf00      	nop

00407bf4 <__i2b>:
  407bf4:	b510      	push	{r4, lr}
  407bf6:	460c      	mov	r4, r1
  407bf8:	2101      	movs	r1, #1
  407bfa:	f7ff ff33 	bl	407a64 <_Balloc>
  407bfe:	2201      	movs	r2, #1
  407c00:	6144      	str	r4, [r0, #20]
  407c02:	6102      	str	r2, [r0, #16]
  407c04:	bd10      	pop	{r4, pc}
  407c06:	bf00      	nop

00407c08 <__multiply>:
  407c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c0c:	690d      	ldr	r5, [r1, #16]
  407c0e:	f8d2 9010 	ldr.w	r9, [r2, #16]
  407c12:	b085      	sub	sp, #20
  407c14:	454d      	cmp	r5, r9
  407c16:	460c      	mov	r4, r1
  407c18:	4692      	mov	sl, r2
  407c1a:	da04      	bge.n	407c26 <__multiply+0x1e>
  407c1c:	462a      	mov	r2, r5
  407c1e:	4654      	mov	r4, sl
  407c20:	464d      	mov	r5, r9
  407c22:	468a      	mov	sl, r1
  407c24:	4691      	mov	r9, r2
  407c26:	68a3      	ldr	r3, [r4, #8]
  407c28:	eb05 0709 	add.w	r7, r5, r9
  407c2c:	6861      	ldr	r1, [r4, #4]
  407c2e:	429f      	cmp	r7, r3
  407c30:	bfc8      	it	gt
  407c32:	3101      	addgt	r1, #1
  407c34:	f7ff ff16 	bl	407a64 <_Balloc>
  407c38:	f100 0614 	add.w	r6, r0, #20
  407c3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  407c40:	4546      	cmp	r6, r8
  407c42:	9001      	str	r0, [sp, #4]
  407c44:	d205      	bcs.n	407c52 <__multiply+0x4a>
  407c46:	4633      	mov	r3, r6
  407c48:	2000      	movs	r0, #0
  407c4a:	f843 0b04 	str.w	r0, [r3], #4
  407c4e:	4598      	cmp	r8, r3
  407c50:	d8fb      	bhi.n	407c4a <__multiply+0x42>
  407c52:	f10a 0c14 	add.w	ip, sl, #20
  407c56:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  407c5a:	3414      	adds	r4, #20
  407c5c:	45cc      	cmp	ip, r9
  407c5e:	9400      	str	r4, [sp, #0]
  407c60:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  407c64:	d25b      	bcs.n	407d1e <__multiply+0x116>
  407c66:	f8cd 8008 	str.w	r8, [sp, #8]
  407c6a:	9703      	str	r7, [sp, #12]
  407c6c:	46c8      	mov	r8, r9
  407c6e:	f85c 3b04 	ldr.w	r3, [ip], #4
  407c72:	b29c      	uxth	r4, r3
  407c74:	b324      	cbz	r4, 407cc0 <__multiply+0xb8>
  407c76:	9a00      	ldr	r2, [sp, #0]
  407c78:	4633      	mov	r3, r6
  407c7a:	f04f 0900 	mov.w	r9, #0
  407c7e:	e000      	b.n	407c82 <__multiply+0x7a>
  407c80:	460b      	mov	r3, r1
  407c82:	f852 7b04 	ldr.w	r7, [r2], #4
  407c86:	6819      	ldr	r1, [r3, #0]
  407c88:	fa1f fb87 	uxth.w	fp, r7
  407c8c:	fa1f fa81 	uxth.w	sl, r1
  407c90:	0c38      	lsrs	r0, r7, #16
  407c92:	0c09      	lsrs	r1, r1, #16
  407c94:	fb04 aa0b 	mla	sl, r4, fp, sl
  407c98:	fb04 1000 	mla	r0, r4, r0, r1
  407c9c:	44d1      	add	r9, sl
  407c9e:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  407ca2:	fa1f f989 	uxth.w	r9, r9
  407ca6:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  407caa:	4619      	mov	r1, r3
  407cac:	4295      	cmp	r5, r2
  407cae:	ea4f 4910 	mov.w	r9, r0, lsr #16
  407cb2:	f841 7b04 	str.w	r7, [r1], #4
  407cb6:	d8e3      	bhi.n	407c80 <__multiply+0x78>
  407cb8:	f8c3 9004 	str.w	r9, [r3, #4]
  407cbc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  407cc0:	ea5f 4913 	movs.w	r9, r3, lsr #16
  407cc4:	d024      	beq.n	407d10 <__multiply+0x108>
  407cc6:	f8d6 a000 	ldr.w	sl, [r6]
  407cca:	9b00      	ldr	r3, [sp, #0]
  407ccc:	4650      	mov	r0, sl
  407cce:	4631      	mov	r1, r6
  407cd0:	f04f 0b00 	mov.w	fp, #0
  407cd4:	e000      	b.n	407cd8 <__multiply+0xd0>
  407cd6:	4611      	mov	r1, r2
  407cd8:	881a      	ldrh	r2, [r3, #0]
  407cda:	0c00      	lsrs	r0, r0, #16
  407cdc:	fb09 0002 	mla	r0, r9, r2, r0
  407ce0:	fa1f fa8a 	uxth.w	sl, sl
  407ce4:	4483      	add	fp, r0
  407ce6:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  407cea:	460a      	mov	r2, r1
  407cec:	f842 0b04 	str.w	r0, [r2], #4
  407cf0:	f853 7b04 	ldr.w	r7, [r3], #4
  407cf4:	6848      	ldr	r0, [r1, #4]
  407cf6:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407cfa:	b284      	uxth	r4, r0
  407cfc:	fb09 4a0a 	mla	sl, r9, sl, r4
  407d00:	429d      	cmp	r5, r3
  407d02:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  407d06:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  407d0a:	d8e4      	bhi.n	407cd6 <__multiply+0xce>
  407d0c:	f8c1 a004 	str.w	sl, [r1, #4]
  407d10:	45e0      	cmp	r8, ip
  407d12:	f106 0604 	add.w	r6, r6, #4
  407d16:	d8aa      	bhi.n	407c6e <__multiply+0x66>
  407d18:	f8dd 8008 	ldr.w	r8, [sp, #8]
  407d1c:	9f03      	ldr	r7, [sp, #12]
  407d1e:	2f00      	cmp	r7, #0
  407d20:	dd0a      	ble.n	407d38 <__multiply+0x130>
  407d22:	f858 3c04 	ldr.w	r3, [r8, #-4]
  407d26:	f1a8 0804 	sub.w	r8, r8, #4
  407d2a:	b11b      	cbz	r3, 407d34 <__multiply+0x12c>
  407d2c:	e004      	b.n	407d38 <__multiply+0x130>
  407d2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  407d32:	b90b      	cbnz	r3, 407d38 <__multiply+0x130>
  407d34:	3f01      	subs	r7, #1
  407d36:	d1fa      	bne.n	407d2e <__multiply+0x126>
  407d38:	9b01      	ldr	r3, [sp, #4]
  407d3a:	4618      	mov	r0, r3
  407d3c:	611f      	str	r7, [r3, #16]
  407d3e:	b005      	add	sp, #20
  407d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407d44 <__pow5mult>:
  407d44:	f012 0303 	ands.w	r3, r2, #3
  407d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d4c:	4614      	mov	r4, r2
  407d4e:	4607      	mov	r7, r0
  407d50:	460e      	mov	r6, r1
  407d52:	d12c      	bne.n	407dae <__pow5mult+0x6a>
  407d54:	10a4      	asrs	r4, r4, #2
  407d56:	d01c      	beq.n	407d92 <__pow5mult+0x4e>
  407d58:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  407d5a:	2d00      	cmp	r5, #0
  407d5c:	d030      	beq.n	407dc0 <__pow5mult+0x7c>
  407d5e:	f04f 0800 	mov.w	r8, #0
  407d62:	e004      	b.n	407d6e <__pow5mult+0x2a>
  407d64:	1064      	asrs	r4, r4, #1
  407d66:	d014      	beq.n	407d92 <__pow5mult+0x4e>
  407d68:	6828      	ldr	r0, [r5, #0]
  407d6a:	b1a8      	cbz	r0, 407d98 <__pow5mult+0x54>
  407d6c:	4605      	mov	r5, r0
  407d6e:	07e3      	lsls	r3, r4, #31
  407d70:	d5f8      	bpl.n	407d64 <__pow5mult+0x20>
  407d72:	4638      	mov	r0, r7
  407d74:	4631      	mov	r1, r6
  407d76:	462a      	mov	r2, r5
  407d78:	f7ff ff46 	bl	407c08 <__multiply>
  407d7c:	b1ae      	cbz	r6, 407daa <__pow5mult+0x66>
  407d7e:	6872      	ldr	r2, [r6, #4]
  407d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407d82:	1064      	asrs	r4, r4, #1
  407d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407d88:	6031      	str	r1, [r6, #0]
  407d8a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407d8e:	4606      	mov	r6, r0
  407d90:	d1ea      	bne.n	407d68 <__pow5mult+0x24>
  407d92:	4630      	mov	r0, r6
  407d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407d98:	4638      	mov	r0, r7
  407d9a:	4629      	mov	r1, r5
  407d9c:	462a      	mov	r2, r5
  407d9e:	f7ff ff33 	bl	407c08 <__multiply>
  407da2:	6028      	str	r0, [r5, #0]
  407da4:	f8c0 8000 	str.w	r8, [r0]
  407da8:	e7e0      	b.n	407d6c <__pow5mult+0x28>
  407daa:	4606      	mov	r6, r0
  407dac:	e7da      	b.n	407d64 <__pow5mult+0x20>
  407dae:	4a0b      	ldr	r2, [pc, #44]	; (407ddc <__pow5mult+0x98>)
  407db0:	3b01      	subs	r3, #1
  407db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  407db6:	2300      	movs	r3, #0
  407db8:	f7ff fe84 	bl	407ac4 <__multadd>
  407dbc:	4606      	mov	r6, r0
  407dbe:	e7c9      	b.n	407d54 <__pow5mult+0x10>
  407dc0:	2101      	movs	r1, #1
  407dc2:	4638      	mov	r0, r7
  407dc4:	f7ff fe4e 	bl	407a64 <_Balloc>
  407dc8:	f240 2171 	movw	r1, #625	; 0x271
  407dcc:	2201      	movs	r2, #1
  407dce:	2300      	movs	r3, #0
  407dd0:	6141      	str	r1, [r0, #20]
  407dd2:	6102      	str	r2, [r0, #16]
  407dd4:	4605      	mov	r5, r0
  407dd6:	64b8      	str	r0, [r7, #72]	; 0x48
  407dd8:	6003      	str	r3, [r0, #0]
  407dda:	e7c0      	b.n	407d5e <__pow5mult+0x1a>
  407ddc:	0040b858 	.word	0x0040b858

00407de0 <__lshift>:
  407de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407de4:	690b      	ldr	r3, [r1, #16]
  407de6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  407dea:	eb0a 0903 	add.w	r9, sl, r3
  407dee:	688b      	ldr	r3, [r1, #8]
  407df0:	f109 0601 	add.w	r6, r9, #1
  407df4:	429e      	cmp	r6, r3
  407df6:	460f      	mov	r7, r1
  407df8:	4693      	mov	fp, r2
  407dfa:	4680      	mov	r8, r0
  407dfc:	6849      	ldr	r1, [r1, #4]
  407dfe:	dd04      	ble.n	407e0a <__lshift+0x2a>
  407e00:	005b      	lsls	r3, r3, #1
  407e02:	429e      	cmp	r6, r3
  407e04:	f101 0101 	add.w	r1, r1, #1
  407e08:	dcfa      	bgt.n	407e00 <__lshift+0x20>
  407e0a:	4640      	mov	r0, r8
  407e0c:	f7ff fe2a 	bl	407a64 <_Balloc>
  407e10:	f1ba 0f00 	cmp.w	sl, #0
  407e14:	f100 0414 	add.w	r4, r0, #20
  407e18:	dd09      	ble.n	407e2e <__lshift+0x4e>
  407e1a:	2300      	movs	r3, #0
  407e1c:	461a      	mov	r2, r3
  407e1e:	4625      	mov	r5, r4
  407e20:	3301      	adds	r3, #1
  407e22:	4553      	cmp	r3, sl
  407e24:	f845 2b04 	str.w	r2, [r5], #4
  407e28:	d1fa      	bne.n	407e20 <__lshift+0x40>
  407e2a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  407e2e:	693a      	ldr	r2, [r7, #16]
  407e30:	f107 0314 	add.w	r3, r7, #20
  407e34:	f01b 0b1f 	ands.w	fp, fp, #31
  407e38:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  407e3c:	d021      	beq.n	407e82 <__lshift+0xa2>
  407e3e:	f1cb 0a20 	rsb	sl, fp, #32
  407e42:	2200      	movs	r2, #0
  407e44:	e000      	b.n	407e48 <__lshift+0x68>
  407e46:	462c      	mov	r4, r5
  407e48:	6819      	ldr	r1, [r3, #0]
  407e4a:	4625      	mov	r5, r4
  407e4c:	fa01 f10b 	lsl.w	r1, r1, fp
  407e50:	430a      	orrs	r2, r1
  407e52:	f845 2b04 	str.w	r2, [r5], #4
  407e56:	f853 2b04 	ldr.w	r2, [r3], #4
  407e5a:	4563      	cmp	r3, ip
  407e5c:	fa22 f20a 	lsr.w	r2, r2, sl
  407e60:	d3f1      	bcc.n	407e46 <__lshift+0x66>
  407e62:	6062      	str	r2, [r4, #4]
  407e64:	b10a      	cbz	r2, 407e6a <__lshift+0x8a>
  407e66:	f109 0602 	add.w	r6, r9, #2
  407e6a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  407e6e:	687a      	ldr	r2, [r7, #4]
  407e70:	3e01      	subs	r6, #1
  407e72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407e76:	6106      	str	r6, [r0, #16]
  407e78:	6039      	str	r1, [r7, #0]
  407e7a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e82:	f853 2b04 	ldr.w	r2, [r3], #4
  407e86:	459c      	cmp	ip, r3
  407e88:	f844 2b04 	str.w	r2, [r4], #4
  407e8c:	d9ed      	bls.n	407e6a <__lshift+0x8a>
  407e8e:	f853 2b04 	ldr.w	r2, [r3], #4
  407e92:	459c      	cmp	ip, r3
  407e94:	f844 2b04 	str.w	r2, [r4], #4
  407e98:	d8f3      	bhi.n	407e82 <__lshift+0xa2>
  407e9a:	e7e6      	b.n	407e6a <__lshift+0x8a>

00407e9c <__mcmp>:
  407e9c:	6902      	ldr	r2, [r0, #16]
  407e9e:	690b      	ldr	r3, [r1, #16]
  407ea0:	b410      	push	{r4}
  407ea2:	1ad2      	subs	r2, r2, r3
  407ea4:	d115      	bne.n	407ed2 <__mcmp+0x36>
  407ea6:	009b      	lsls	r3, r3, #2
  407ea8:	3014      	adds	r0, #20
  407eaa:	3114      	adds	r1, #20
  407eac:	4419      	add	r1, r3
  407eae:	4403      	add	r3, r0
  407eb0:	e001      	b.n	407eb6 <__mcmp+0x1a>
  407eb2:	4298      	cmp	r0, r3
  407eb4:	d211      	bcs.n	407eda <__mcmp+0x3e>
  407eb6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407eba:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407ebe:	42a2      	cmp	r2, r4
  407ec0:	d0f7      	beq.n	407eb2 <__mcmp+0x16>
  407ec2:	4294      	cmp	r4, r2
  407ec4:	bf94      	ite	ls
  407ec6:	2001      	movls	r0, #1
  407ec8:	f04f 30ff 	movhi.w	r0, #4294967295
  407ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
  407ed0:	4770      	bx	lr
  407ed2:	4610      	mov	r0, r2
  407ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
  407ed8:	4770      	bx	lr
  407eda:	2000      	movs	r0, #0
  407edc:	f85d 4b04 	ldr.w	r4, [sp], #4
  407ee0:	4770      	bx	lr
  407ee2:	bf00      	nop

00407ee4 <__mdiff>:
  407ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407ee8:	460d      	mov	r5, r1
  407eea:	4604      	mov	r4, r0
  407eec:	4611      	mov	r1, r2
  407eee:	4628      	mov	r0, r5
  407ef0:	4616      	mov	r6, r2
  407ef2:	f7ff ffd3 	bl	407e9c <__mcmp>
  407ef6:	1e07      	subs	r7, r0, #0
  407ef8:	d056      	beq.n	407fa8 <__mdiff+0xc4>
  407efa:	db4f      	blt.n	407f9c <__mdiff+0xb8>
  407efc:	f04f 0900 	mov.w	r9, #0
  407f00:	6869      	ldr	r1, [r5, #4]
  407f02:	4620      	mov	r0, r4
  407f04:	f7ff fdae 	bl	407a64 <_Balloc>
  407f08:	692f      	ldr	r7, [r5, #16]
  407f0a:	6932      	ldr	r2, [r6, #16]
  407f0c:	3514      	adds	r5, #20
  407f0e:	3614      	adds	r6, #20
  407f10:	f8c0 900c 	str.w	r9, [r0, #12]
  407f14:	f100 0314 	add.w	r3, r0, #20
  407f18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  407f1c:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  407f20:	2100      	movs	r1, #0
  407f22:	f855 4b04 	ldr.w	r4, [r5], #4
  407f26:	f856 2b04 	ldr.w	r2, [r6], #4
  407f2a:	fa1f fa84 	uxth.w	sl, r4
  407f2e:	448a      	add	sl, r1
  407f30:	fa1f f982 	uxth.w	r9, r2
  407f34:	0c11      	lsrs	r1, r2, #16
  407f36:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  407f3a:	ebc9 020a 	rsb	r2, r9, sl
  407f3e:	eb01 4122 	add.w	r1, r1, r2, asr #16
  407f42:	b292      	uxth	r2, r2
  407f44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  407f48:	45b0      	cmp	r8, r6
  407f4a:	f843 2b04 	str.w	r2, [r3], #4
  407f4e:	ea4f 4121 	mov.w	r1, r1, asr #16
  407f52:	462c      	mov	r4, r5
  407f54:	d8e5      	bhi.n	407f22 <__mdiff+0x3e>
  407f56:	45ac      	cmp	ip, r5
  407f58:	4698      	mov	r8, r3
  407f5a:	d915      	bls.n	407f88 <__mdiff+0xa4>
  407f5c:	f854 6b04 	ldr.w	r6, [r4], #4
  407f60:	b2b2      	uxth	r2, r6
  407f62:	4411      	add	r1, r2
  407f64:	0c36      	lsrs	r6, r6, #16
  407f66:	eb06 4621 	add.w	r6, r6, r1, asr #16
  407f6a:	b289      	uxth	r1, r1
  407f6c:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  407f70:	45a4      	cmp	ip, r4
  407f72:	f843 2b04 	str.w	r2, [r3], #4
  407f76:	ea4f 4126 	mov.w	r1, r6, asr #16
  407f7a:	d8ef      	bhi.n	407f5c <__mdiff+0x78>
  407f7c:	43eb      	mvns	r3, r5
  407f7e:	4463      	add	r3, ip
  407f80:	f023 0303 	bic.w	r3, r3, #3
  407f84:	3304      	adds	r3, #4
  407f86:	4443      	add	r3, r8
  407f88:	3b04      	subs	r3, #4
  407f8a:	b922      	cbnz	r2, 407f96 <__mdiff+0xb2>
  407f8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407f90:	3f01      	subs	r7, #1
  407f92:	2a00      	cmp	r2, #0
  407f94:	d0fa      	beq.n	407f8c <__mdiff+0xa8>
  407f96:	6107      	str	r7, [r0, #16]
  407f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f9c:	462b      	mov	r3, r5
  407f9e:	f04f 0901 	mov.w	r9, #1
  407fa2:	4635      	mov	r5, r6
  407fa4:	461e      	mov	r6, r3
  407fa6:	e7ab      	b.n	407f00 <__mdiff+0x1c>
  407fa8:	4620      	mov	r0, r4
  407faa:	4639      	mov	r1, r7
  407fac:	f7ff fd5a 	bl	407a64 <_Balloc>
  407fb0:	2301      	movs	r3, #1
  407fb2:	6147      	str	r7, [r0, #20]
  407fb4:	6103      	str	r3, [r0, #16]
  407fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407fba:	bf00      	nop

00407fbc <__d2b>:
  407fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407fc0:	2101      	movs	r1, #1
  407fc2:	b083      	sub	sp, #12
  407fc4:	461d      	mov	r5, r3
  407fc6:	f3c3 560a 	ubfx	r6, r3, #20, #11
  407fca:	4614      	mov	r4, r2
  407fcc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407fce:	f7ff fd49 	bl	407a64 <_Balloc>
  407fd2:	f3c5 0313 	ubfx	r3, r5, #0, #20
  407fd6:	4680      	mov	r8, r0
  407fd8:	b10e      	cbz	r6, 407fde <__d2b+0x22>
  407fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407fde:	9301      	str	r3, [sp, #4]
  407fe0:	b324      	cbz	r4, 40802c <__d2b+0x70>
  407fe2:	a802      	add	r0, sp, #8
  407fe4:	f840 4d08 	str.w	r4, [r0, #-8]!
  407fe8:	4668      	mov	r0, sp
  407fea:	f7ff fdd5 	bl	407b98 <__lo0bits>
  407fee:	2800      	cmp	r0, #0
  407ff0:	d135      	bne.n	40805e <__d2b+0xa2>
  407ff2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407ff6:	f8c8 2014 	str.w	r2, [r8, #20]
  407ffa:	2b00      	cmp	r3, #0
  407ffc:	bf0c      	ite	eq
  407ffe:	2401      	moveq	r4, #1
  408000:	2402      	movne	r4, #2
  408002:	f8c8 3018 	str.w	r3, [r8, #24]
  408006:	f8c8 4010 	str.w	r4, [r8, #16]
  40800a:	b9de      	cbnz	r6, 408044 <__d2b+0x88>
  40800c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  408010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  408014:	6038      	str	r0, [r7, #0]
  408016:	6918      	ldr	r0, [r3, #16]
  408018:	f7ff fd9e 	bl	407b58 <__hi0bits>
  40801c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40801e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  408022:	6018      	str	r0, [r3, #0]
  408024:	4640      	mov	r0, r8
  408026:	b003      	add	sp, #12
  408028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40802c:	a801      	add	r0, sp, #4
  40802e:	f7ff fdb3 	bl	407b98 <__lo0bits>
  408032:	9b01      	ldr	r3, [sp, #4]
  408034:	2401      	movs	r4, #1
  408036:	3020      	adds	r0, #32
  408038:	f8c8 3014 	str.w	r3, [r8, #20]
  40803c:	f8c8 4010 	str.w	r4, [r8, #16]
  408040:	2e00      	cmp	r6, #0
  408042:	d0e3      	beq.n	40800c <__d2b+0x50>
  408044:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  408048:	eb09 0300 	add.w	r3, r9, r0
  40804c:	603b      	str	r3, [r7, #0]
  40804e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408050:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408054:	6018      	str	r0, [r3, #0]
  408056:	4640      	mov	r0, r8
  408058:	b003      	add	sp, #12
  40805a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40805e:	9b01      	ldr	r3, [sp, #4]
  408060:	f1c0 0120 	rsb	r1, r0, #32
  408064:	fa03 f101 	lsl.w	r1, r3, r1
  408068:	40c3      	lsrs	r3, r0
  40806a:	9a00      	ldr	r2, [sp, #0]
  40806c:	9301      	str	r3, [sp, #4]
  40806e:	430a      	orrs	r2, r1
  408070:	f8c8 2014 	str.w	r2, [r8, #20]
  408074:	e7c1      	b.n	407ffa <__d2b+0x3e>
  408076:	bf00      	nop

00408078 <_realloc_r>:
  408078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40807c:	460c      	mov	r4, r1
  40807e:	b083      	sub	sp, #12
  408080:	4690      	mov	r8, r2
  408082:	4681      	mov	r9, r0
  408084:	2900      	cmp	r1, #0
  408086:	f000 80ba 	beq.w	4081fe <_realloc_r+0x186>
  40808a:	f7ff fce7 	bl	407a5c <__malloc_lock>
  40808e:	f108 060b 	add.w	r6, r8, #11
  408092:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408096:	2e16      	cmp	r6, #22
  408098:	f023 0503 	bic.w	r5, r3, #3
  40809c:	f1a4 0708 	sub.w	r7, r4, #8
  4080a0:	d84b      	bhi.n	40813a <_realloc_r+0xc2>
  4080a2:	2110      	movs	r1, #16
  4080a4:	460e      	mov	r6, r1
  4080a6:	45b0      	cmp	r8, r6
  4080a8:	d84c      	bhi.n	408144 <_realloc_r+0xcc>
  4080aa:	428d      	cmp	r5, r1
  4080ac:	da51      	bge.n	408152 <_realloc_r+0xda>
  4080ae:	f8df b384 	ldr.w	fp, [pc, #900]	; 408434 <_realloc_r+0x3bc>
  4080b2:	1978      	adds	r0, r7, r5
  4080b4:	f8db e008 	ldr.w	lr, [fp, #8]
  4080b8:	4586      	cmp	lr, r0
  4080ba:	f000 80a6 	beq.w	40820a <_realloc_r+0x192>
  4080be:	6842      	ldr	r2, [r0, #4]
  4080c0:	f022 0c01 	bic.w	ip, r2, #1
  4080c4:	4484      	add	ip, r0
  4080c6:	f8dc c004 	ldr.w	ip, [ip, #4]
  4080ca:	f01c 0f01 	tst.w	ip, #1
  4080ce:	d054      	beq.n	40817a <_realloc_r+0x102>
  4080d0:	2200      	movs	r2, #0
  4080d2:	4610      	mov	r0, r2
  4080d4:	07db      	lsls	r3, r3, #31
  4080d6:	d46f      	bmi.n	4081b8 <_realloc_r+0x140>
  4080d8:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4080dc:	ebc3 0a07 	rsb	sl, r3, r7
  4080e0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4080e4:	f023 0303 	bic.w	r3, r3, #3
  4080e8:	442b      	add	r3, r5
  4080ea:	2800      	cmp	r0, #0
  4080ec:	d062      	beq.n	4081b4 <_realloc_r+0x13c>
  4080ee:	4570      	cmp	r0, lr
  4080f0:	f000 80e9 	beq.w	4082c6 <_realloc_r+0x24e>
  4080f4:	eb02 0e03 	add.w	lr, r2, r3
  4080f8:	458e      	cmp	lr, r1
  4080fa:	db5b      	blt.n	4081b4 <_realloc_r+0x13c>
  4080fc:	68c3      	ldr	r3, [r0, #12]
  4080fe:	6882      	ldr	r2, [r0, #8]
  408100:	46d0      	mov	r8, sl
  408102:	60d3      	str	r3, [r2, #12]
  408104:	609a      	str	r2, [r3, #8]
  408106:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40810a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40810e:	1f2a      	subs	r2, r5, #4
  408110:	2a24      	cmp	r2, #36	; 0x24
  408112:	60cb      	str	r3, [r1, #12]
  408114:	6099      	str	r1, [r3, #8]
  408116:	f200 8123 	bhi.w	408360 <_realloc_r+0x2e8>
  40811a:	2a13      	cmp	r2, #19
  40811c:	f240 80b0 	bls.w	408280 <_realloc_r+0x208>
  408120:	6823      	ldr	r3, [r4, #0]
  408122:	2a1b      	cmp	r2, #27
  408124:	f8ca 3008 	str.w	r3, [sl, #8]
  408128:	6863      	ldr	r3, [r4, #4]
  40812a:	f8ca 300c 	str.w	r3, [sl, #12]
  40812e:	f200 812b 	bhi.w	408388 <_realloc_r+0x310>
  408132:	3408      	adds	r4, #8
  408134:	f10a 0310 	add.w	r3, sl, #16
  408138:	e0a3      	b.n	408282 <_realloc_r+0x20a>
  40813a:	f026 0607 	bic.w	r6, r6, #7
  40813e:	2e00      	cmp	r6, #0
  408140:	4631      	mov	r1, r6
  408142:	dab0      	bge.n	4080a6 <_realloc_r+0x2e>
  408144:	230c      	movs	r3, #12
  408146:	2000      	movs	r0, #0
  408148:	f8c9 3000 	str.w	r3, [r9]
  40814c:	b003      	add	sp, #12
  40814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408152:	46a0      	mov	r8, r4
  408154:	1baa      	subs	r2, r5, r6
  408156:	2a0f      	cmp	r2, #15
  408158:	f003 0301 	and.w	r3, r3, #1
  40815c:	d81a      	bhi.n	408194 <_realloc_r+0x11c>
  40815e:	432b      	orrs	r3, r5
  408160:	607b      	str	r3, [r7, #4]
  408162:	443d      	add	r5, r7
  408164:	686b      	ldr	r3, [r5, #4]
  408166:	f043 0301 	orr.w	r3, r3, #1
  40816a:	606b      	str	r3, [r5, #4]
  40816c:	4648      	mov	r0, r9
  40816e:	f7ff fc77 	bl	407a60 <__malloc_unlock>
  408172:	4640      	mov	r0, r8
  408174:	b003      	add	sp, #12
  408176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40817a:	f022 0203 	bic.w	r2, r2, #3
  40817e:	eb02 0c05 	add.w	ip, r2, r5
  408182:	458c      	cmp	ip, r1
  408184:	dba6      	blt.n	4080d4 <_realloc_r+0x5c>
  408186:	68c2      	ldr	r2, [r0, #12]
  408188:	6881      	ldr	r1, [r0, #8]
  40818a:	46a0      	mov	r8, r4
  40818c:	60ca      	str	r2, [r1, #12]
  40818e:	4665      	mov	r5, ip
  408190:	6091      	str	r1, [r2, #8]
  408192:	e7df      	b.n	408154 <_realloc_r+0xdc>
  408194:	19b9      	adds	r1, r7, r6
  408196:	4333      	orrs	r3, r6
  408198:	f042 0001 	orr.w	r0, r2, #1
  40819c:	607b      	str	r3, [r7, #4]
  40819e:	440a      	add	r2, r1
  4081a0:	6048      	str	r0, [r1, #4]
  4081a2:	6853      	ldr	r3, [r2, #4]
  4081a4:	3108      	adds	r1, #8
  4081a6:	f043 0301 	orr.w	r3, r3, #1
  4081aa:	6053      	str	r3, [r2, #4]
  4081ac:	4648      	mov	r0, r9
  4081ae:	f7fe fe07 	bl	406dc0 <_free_r>
  4081b2:	e7db      	b.n	40816c <_realloc_r+0xf4>
  4081b4:	428b      	cmp	r3, r1
  4081b6:	da33      	bge.n	408220 <_realloc_r+0x1a8>
  4081b8:	4641      	mov	r1, r8
  4081ba:	4648      	mov	r0, r9
  4081bc:	f7ff f902 	bl	4073c4 <_malloc_r>
  4081c0:	4680      	mov	r8, r0
  4081c2:	2800      	cmp	r0, #0
  4081c4:	d0d2      	beq.n	40816c <_realloc_r+0xf4>
  4081c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4081ca:	f1a0 0108 	sub.w	r1, r0, #8
  4081ce:	f023 0201 	bic.w	r2, r3, #1
  4081d2:	443a      	add	r2, r7
  4081d4:	4291      	cmp	r1, r2
  4081d6:	f000 80bc 	beq.w	408352 <_realloc_r+0x2da>
  4081da:	1f2a      	subs	r2, r5, #4
  4081dc:	2a24      	cmp	r2, #36	; 0x24
  4081de:	d86e      	bhi.n	4082be <_realloc_r+0x246>
  4081e0:	2a13      	cmp	r2, #19
  4081e2:	d842      	bhi.n	40826a <_realloc_r+0x1f2>
  4081e4:	4603      	mov	r3, r0
  4081e6:	4622      	mov	r2, r4
  4081e8:	6811      	ldr	r1, [r2, #0]
  4081ea:	6019      	str	r1, [r3, #0]
  4081ec:	6851      	ldr	r1, [r2, #4]
  4081ee:	6059      	str	r1, [r3, #4]
  4081f0:	6892      	ldr	r2, [r2, #8]
  4081f2:	609a      	str	r2, [r3, #8]
  4081f4:	4621      	mov	r1, r4
  4081f6:	4648      	mov	r0, r9
  4081f8:	f7fe fde2 	bl	406dc0 <_free_r>
  4081fc:	e7b6      	b.n	40816c <_realloc_r+0xf4>
  4081fe:	4611      	mov	r1, r2
  408200:	b003      	add	sp, #12
  408202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408206:	f7ff b8dd 	b.w	4073c4 <_malloc_r>
  40820a:	f8de 2004 	ldr.w	r2, [lr, #4]
  40820e:	f106 0c10 	add.w	ip, r6, #16
  408212:	f022 0203 	bic.w	r2, r2, #3
  408216:	1950      	adds	r0, r2, r5
  408218:	4560      	cmp	r0, ip
  40821a:	da3d      	bge.n	408298 <_realloc_r+0x220>
  40821c:	4670      	mov	r0, lr
  40821e:	e759      	b.n	4080d4 <_realloc_r+0x5c>
  408220:	46d0      	mov	r8, sl
  408222:	f858 0f08 	ldr.w	r0, [r8, #8]!
  408226:	f8da 100c 	ldr.w	r1, [sl, #12]
  40822a:	1f2a      	subs	r2, r5, #4
  40822c:	2a24      	cmp	r2, #36	; 0x24
  40822e:	60c1      	str	r1, [r0, #12]
  408230:	6088      	str	r0, [r1, #8]
  408232:	f200 80a0 	bhi.w	408376 <_realloc_r+0x2fe>
  408236:	2a13      	cmp	r2, #19
  408238:	f240 809b 	bls.w	408372 <_realloc_r+0x2fa>
  40823c:	6821      	ldr	r1, [r4, #0]
  40823e:	2a1b      	cmp	r2, #27
  408240:	f8ca 1008 	str.w	r1, [sl, #8]
  408244:	6861      	ldr	r1, [r4, #4]
  408246:	f8ca 100c 	str.w	r1, [sl, #12]
  40824a:	f200 80b2 	bhi.w	4083b2 <_realloc_r+0x33a>
  40824e:	3408      	adds	r4, #8
  408250:	f10a 0210 	add.w	r2, sl, #16
  408254:	6821      	ldr	r1, [r4, #0]
  408256:	461d      	mov	r5, r3
  408258:	6011      	str	r1, [r2, #0]
  40825a:	6861      	ldr	r1, [r4, #4]
  40825c:	4657      	mov	r7, sl
  40825e:	6051      	str	r1, [r2, #4]
  408260:	68a3      	ldr	r3, [r4, #8]
  408262:	6093      	str	r3, [r2, #8]
  408264:	f8da 3004 	ldr.w	r3, [sl, #4]
  408268:	e774      	b.n	408154 <_realloc_r+0xdc>
  40826a:	6823      	ldr	r3, [r4, #0]
  40826c:	2a1b      	cmp	r2, #27
  40826e:	6003      	str	r3, [r0, #0]
  408270:	6863      	ldr	r3, [r4, #4]
  408272:	6043      	str	r3, [r0, #4]
  408274:	d862      	bhi.n	40833c <_realloc_r+0x2c4>
  408276:	f100 0308 	add.w	r3, r0, #8
  40827a:	f104 0208 	add.w	r2, r4, #8
  40827e:	e7b3      	b.n	4081e8 <_realloc_r+0x170>
  408280:	4643      	mov	r3, r8
  408282:	6822      	ldr	r2, [r4, #0]
  408284:	4675      	mov	r5, lr
  408286:	601a      	str	r2, [r3, #0]
  408288:	6862      	ldr	r2, [r4, #4]
  40828a:	4657      	mov	r7, sl
  40828c:	605a      	str	r2, [r3, #4]
  40828e:	68a2      	ldr	r2, [r4, #8]
  408290:	609a      	str	r2, [r3, #8]
  408292:	f8da 3004 	ldr.w	r3, [sl, #4]
  408296:	e75d      	b.n	408154 <_realloc_r+0xdc>
  408298:	1b83      	subs	r3, r0, r6
  40829a:	4437      	add	r7, r6
  40829c:	f043 0301 	orr.w	r3, r3, #1
  4082a0:	f8cb 7008 	str.w	r7, [fp, #8]
  4082a4:	607b      	str	r3, [r7, #4]
  4082a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4082aa:	4648      	mov	r0, r9
  4082ac:	f003 0301 	and.w	r3, r3, #1
  4082b0:	431e      	orrs	r6, r3
  4082b2:	f844 6c04 	str.w	r6, [r4, #-4]
  4082b6:	f7ff fbd3 	bl	407a60 <__malloc_unlock>
  4082ba:	4620      	mov	r0, r4
  4082bc:	e75a      	b.n	408174 <_realloc_r+0xfc>
  4082be:	4621      	mov	r1, r4
  4082c0:	f7ff fb66 	bl	407990 <memmove>
  4082c4:	e796      	b.n	4081f4 <_realloc_r+0x17c>
  4082c6:	eb02 0c03 	add.w	ip, r2, r3
  4082ca:	f106 0210 	add.w	r2, r6, #16
  4082ce:	4594      	cmp	ip, r2
  4082d0:	f6ff af70 	blt.w	4081b4 <_realloc_r+0x13c>
  4082d4:	4657      	mov	r7, sl
  4082d6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4082da:	f8da 300c 	ldr.w	r3, [sl, #12]
  4082de:	1f2a      	subs	r2, r5, #4
  4082e0:	2a24      	cmp	r2, #36	; 0x24
  4082e2:	60cb      	str	r3, [r1, #12]
  4082e4:	6099      	str	r1, [r3, #8]
  4082e6:	f200 8086 	bhi.w	4083f6 <_realloc_r+0x37e>
  4082ea:	2a13      	cmp	r2, #19
  4082ec:	d977      	bls.n	4083de <_realloc_r+0x366>
  4082ee:	6823      	ldr	r3, [r4, #0]
  4082f0:	2a1b      	cmp	r2, #27
  4082f2:	f8ca 3008 	str.w	r3, [sl, #8]
  4082f6:	6863      	ldr	r3, [r4, #4]
  4082f8:	f8ca 300c 	str.w	r3, [sl, #12]
  4082fc:	f200 8084 	bhi.w	408408 <_realloc_r+0x390>
  408300:	3408      	adds	r4, #8
  408302:	f10a 0310 	add.w	r3, sl, #16
  408306:	6822      	ldr	r2, [r4, #0]
  408308:	601a      	str	r2, [r3, #0]
  40830a:	6862      	ldr	r2, [r4, #4]
  40830c:	605a      	str	r2, [r3, #4]
  40830e:	68a2      	ldr	r2, [r4, #8]
  408310:	609a      	str	r2, [r3, #8]
  408312:	ebc6 020c 	rsb	r2, r6, ip
  408316:	eb0a 0306 	add.w	r3, sl, r6
  40831a:	f042 0201 	orr.w	r2, r2, #1
  40831e:	f8cb 3008 	str.w	r3, [fp, #8]
  408322:	605a      	str	r2, [r3, #4]
  408324:	f8da 3004 	ldr.w	r3, [sl, #4]
  408328:	4648      	mov	r0, r9
  40832a:	f003 0301 	and.w	r3, r3, #1
  40832e:	431e      	orrs	r6, r3
  408330:	f8ca 6004 	str.w	r6, [sl, #4]
  408334:	f7ff fb94 	bl	407a60 <__malloc_unlock>
  408338:	4638      	mov	r0, r7
  40833a:	e71b      	b.n	408174 <_realloc_r+0xfc>
  40833c:	68a3      	ldr	r3, [r4, #8]
  40833e:	2a24      	cmp	r2, #36	; 0x24
  408340:	6083      	str	r3, [r0, #8]
  408342:	68e3      	ldr	r3, [r4, #12]
  408344:	60c3      	str	r3, [r0, #12]
  408346:	d02b      	beq.n	4083a0 <_realloc_r+0x328>
  408348:	f100 0310 	add.w	r3, r0, #16
  40834c:	f104 0210 	add.w	r2, r4, #16
  408350:	e74a      	b.n	4081e8 <_realloc_r+0x170>
  408352:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408356:	46a0      	mov	r8, r4
  408358:	f022 0203 	bic.w	r2, r2, #3
  40835c:	4415      	add	r5, r2
  40835e:	e6f9      	b.n	408154 <_realloc_r+0xdc>
  408360:	4621      	mov	r1, r4
  408362:	4640      	mov	r0, r8
  408364:	4675      	mov	r5, lr
  408366:	4657      	mov	r7, sl
  408368:	f7ff fb12 	bl	407990 <memmove>
  40836c:	f8da 3004 	ldr.w	r3, [sl, #4]
  408370:	e6f0      	b.n	408154 <_realloc_r+0xdc>
  408372:	4642      	mov	r2, r8
  408374:	e76e      	b.n	408254 <_realloc_r+0x1dc>
  408376:	4621      	mov	r1, r4
  408378:	4640      	mov	r0, r8
  40837a:	461d      	mov	r5, r3
  40837c:	4657      	mov	r7, sl
  40837e:	f7ff fb07 	bl	407990 <memmove>
  408382:	f8da 3004 	ldr.w	r3, [sl, #4]
  408386:	e6e5      	b.n	408154 <_realloc_r+0xdc>
  408388:	68a3      	ldr	r3, [r4, #8]
  40838a:	2a24      	cmp	r2, #36	; 0x24
  40838c:	f8ca 3010 	str.w	r3, [sl, #16]
  408390:	68e3      	ldr	r3, [r4, #12]
  408392:	f8ca 3014 	str.w	r3, [sl, #20]
  408396:	d018      	beq.n	4083ca <_realloc_r+0x352>
  408398:	3410      	adds	r4, #16
  40839a:	f10a 0318 	add.w	r3, sl, #24
  40839e:	e770      	b.n	408282 <_realloc_r+0x20a>
  4083a0:	6922      	ldr	r2, [r4, #16]
  4083a2:	f100 0318 	add.w	r3, r0, #24
  4083a6:	6102      	str	r2, [r0, #16]
  4083a8:	6961      	ldr	r1, [r4, #20]
  4083aa:	f104 0218 	add.w	r2, r4, #24
  4083ae:	6141      	str	r1, [r0, #20]
  4083b0:	e71a      	b.n	4081e8 <_realloc_r+0x170>
  4083b2:	68a1      	ldr	r1, [r4, #8]
  4083b4:	2a24      	cmp	r2, #36	; 0x24
  4083b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4083ba:	68e1      	ldr	r1, [r4, #12]
  4083bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4083c0:	d00f      	beq.n	4083e2 <_realloc_r+0x36a>
  4083c2:	3410      	adds	r4, #16
  4083c4:	f10a 0218 	add.w	r2, sl, #24
  4083c8:	e744      	b.n	408254 <_realloc_r+0x1dc>
  4083ca:	6922      	ldr	r2, [r4, #16]
  4083cc:	f10a 0320 	add.w	r3, sl, #32
  4083d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4083d4:	6962      	ldr	r2, [r4, #20]
  4083d6:	3418      	adds	r4, #24
  4083d8:	f8ca 201c 	str.w	r2, [sl, #28]
  4083dc:	e751      	b.n	408282 <_realloc_r+0x20a>
  4083de:	463b      	mov	r3, r7
  4083e0:	e791      	b.n	408306 <_realloc_r+0x28e>
  4083e2:	6921      	ldr	r1, [r4, #16]
  4083e4:	f10a 0220 	add.w	r2, sl, #32
  4083e8:	f8ca 1018 	str.w	r1, [sl, #24]
  4083ec:	6961      	ldr	r1, [r4, #20]
  4083ee:	3418      	adds	r4, #24
  4083f0:	f8ca 101c 	str.w	r1, [sl, #28]
  4083f4:	e72e      	b.n	408254 <_realloc_r+0x1dc>
  4083f6:	4621      	mov	r1, r4
  4083f8:	4638      	mov	r0, r7
  4083fa:	f8cd c004 	str.w	ip, [sp, #4]
  4083fe:	f7ff fac7 	bl	407990 <memmove>
  408402:	f8dd c004 	ldr.w	ip, [sp, #4]
  408406:	e784      	b.n	408312 <_realloc_r+0x29a>
  408408:	68a3      	ldr	r3, [r4, #8]
  40840a:	2a24      	cmp	r2, #36	; 0x24
  40840c:	f8ca 3010 	str.w	r3, [sl, #16]
  408410:	68e3      	ldr	r3, [r4, #12]
  408412:	f8ca 3014 	str.w	r3, [sl, #20]
  408416:	d003      	beq.n	408420 <_realloc_r+0x3a8>
  408418:	3410      	adds	r4, #16
  40841a:	f10a 0318 	add.w	r3, sl, #24
  40841e:	e772      	b.n	408306 <_realloc_r+0x28e>
  408420:	6922      	ldr	r2, [r4, #16]
  408422:	f10a 0320 	add.w	r3, sl, #32
  408426:	f8ca 2018 	str.w	r2, [sl, #24]
  40842a:	6962      	ldr	r2, [r4, #20]
  40842c:	3418      	adds	r4, #24
  40842e:	f8ca 201c 	str.w	r2, [sl, #28]
  408432:	e768      	b.n	408306 <_realloc_r+0x28e>
  408434:	20000580 	.word	0x20000580

00408438 <__fpclassifyd>:
  408438:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40843c:	b410      	push	{r4}
  40843e:	d008      	beq.n	408452 <__fpclassifyd+0x1a>
  408440:	4a0f      	ldr	r2, [pc, #60]	; (408480 <__fpclassifyd+0x48>)
  408442:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  408446:	4294      	cmp	r4, r2
  408448:	d80a      	bhi.n	408460 <__fpclassifyd+0x28>
  40844a:	2004      	movs	r0, #4
  40844c:	f85d 4b04 	ldr.w	r4, [sp], #4
  408450:	4770      	bx	lr
  408452:	2800      	cmp	r0, #0
  408454:	bf0c      	ite	eq
  408456:	2002      	moveq	r0, #2
  408458:	2003      	movne	r0, #3
  40845a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40845e:	4770      	bx	lr
  408460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  408464:	d201      	bcs.n	40846a <__fpclassifyd+0x32>
  408466:	2003      	movs	r0, #3
  408468:	e7f7      	b.n	40845a <__fpclassifyd+0x22>
  40846a:	4a06      	ldr	r2, [pc, #24]	; (408484 <__fpclassifyd+0x4c>)
  40846c:	4293      	cmp	r3, r2
  40846e:	d001      	beq.n	408474 <__fpclassifyd+0x3c>
  408470:	2000      	movs	r0, #0
  408472:	e7f2      	b.n	40845a <__fpclassifyd+0x22>
  408474:	f1d0 0001 	rsbs	r0, r0, #1
  408478:	bf38      	it	cc
  40847a:	2000      	movcc	r0, #0
  40847c:	e7ed      	b.n	40845a <__fpclassifyd+0x22>
  40847e:	bf00      	nop
  408480:	7fdfffff 	.word	0x7fdfffff
  408484:	7ff00000 	.word	0x7ff00000

00408488 <_sbrk_r>:
  408488:	b538      	push	{r3, r4, r5, lr}
  40848a:	4c07      	ldr	r4, [pc, #28]	; (4084a8 <_sbrk_r+0x20>)
  40848c:	2300      	movs	r3, #0
  40848e:	4605      	mov	r5, r0
  408490:	4608      	mov	r0, r1
  408492:	6023      	str	r3, [r4, #0]
  408494:	f7f9 f982 	bl	40179c <_sbrk>
  408498:	1c43      	adds	r3, r0, #1
  40849a:	d000      	beq.n	40849e <_sbrk_r+0x16>
  40849c:	bd38      	pop	{r3, r4, r5, pc}
  40849e:	6823      	ldr	r3, [r4, #0]
  4084a0:	2b00      	cmp	r3, #0
  4084a2:	d0fb      	beq.n	40849c <_sbrk_r+0x14>
  4084a4:	602b      	str	r3, [r5, #0]
  4084a6:	bd38      	pop	{r3, r4, r5, pc}
  4084a8:	20003838 	.word	0x20003838

004084ac <__sread>:
  4084ac:	b510      	push	{r4, lr}
  4084ae:	460c      	mov	r4, r1
  4084b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4084b4:	f001 fd42 	bl	409f3c <_read_r>
  4084b8:	2800      	cmp	r0, #0
  4084ba:	db03      	blt.n	4084c4 <__sread+0x18>
  4084bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4084be:	4403      	add	r3, r0
  4084c0:	6523      	str	r3, [r4, #80]	; 0x50
  4084c2:	bd10      	pop	{r4, pc}
  4084c4:	89a3      	ldrh	r3, [r4, #12]
  4084c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4084ca:	81a3      	strh	r3, [r4, #12]
  4084cc:	bd10      	pop	{r4, pc}
  4084ce:	bf00      	nop

004084d0 <__swrite>:
  4084d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4084d4:	460c      	mov	r4, r1
  4084d6:	8989      	ldrh	r1, [r1, #12]
  4084d8:	461d      	mov	r5, r3
  4084da:	05cb      	lsls	r3, r1, #23
  4084dc:	4616      	mov	r6, r2
  4084de:	4607      	mov	r7, r0
  4084e0:	d506      	bpl.n	4084f0 <__swrite+0x20>
  4084e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4084e6:	2200      	movs	r2, #0
  4084e8:	2302      	movs	r3, #2
  4084ea:	f001 fd13 	bl	409f14 <_lseek_r>
  4084ee:	89a1      	ldrh	r1, [r4, #12]
  4084f0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4084f4:	81a1      	strh	r1, [r4, #12]
  4084f6:	4638      	mov	r0, r7
  4084f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4084fc:	4632      	mov	r2, r6
  4084fe:	462b      	mov	r3, r5
  408500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408504:	f001 bbee 	b.w	409ce4 <_write_r>

00408508 <__sseek>:
  408508:	b510      	push	{r4, lr}
  40850a:	460c      	mov	r4, r1
  40850c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408510:	f001 fd00 	bl	409f14 <_lseek_r>
  408514:	89a3      	ldrh	r3, [r4, #12]
  408516:	1c42      	adds	r2, r0, #1
  408518:	bf0e      	itee	eq
  40851a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40851e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408522:	6520      	strne	r0, [r4, #80]	; 0x50
  408524:	81a3      	strh	r3, [r4, #12]
  408526:	bd10      	pop	{r4, pc}

00408528 <__sclose>:
  408528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40852c:	f001 bc72 	b.w	409e14 <_close_r>

00408530 <__ssprint_r>:
  408530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408534:	6894      	ldr	r4, [r2, #8]
  408536:	b083      	sub	sp, #12
  408538:	4692      	mov	sl, r2
  40853a:	4680      	mov	r8, r0
  40853c:	460d      	mov	r5, r1
  40853e:	6816      	ldr	r6, [r2, #0]
  408540:	2c00      	cmp	r4, #0
  408542:	d06f      	beq.n	408624 <__ssprint_r+0xf4>
  408544:	f04f 0b00 	mov.w	fp, #0
  408548:	6808      	ldr	r0, [r1, #0]
  40854a:	688b      	ldr	r3, [r1, #8]
  40854c:	465c      	mov	r4, fp
  40854e:	2c00      	cmp	r4, #0
  408550:	d043      	beq.n	4085da <__ssprint_r+0xaa>
  408552:	429c      	cmp	r4, r3
  408554:	461f      	mov	r7, r3
  408556:	d345      	bcc.n	4085e4 <__ssprint_r+0xb4>
  408558:	89ab      	ldrh	r3, [r5, #12]
  40855a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40855e:	d044      	beq.n	4085ea <__ssprint_r+0xba>
  408560:	696f      	ldr	r7, [r5, #20]
  408562:	6929      	ldr	r1, [r5, #16]
  408564:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  408568:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40856c:	ebc1 0900 	rsb	r9, r1, r0
  408570:	1c62      	adds	r2, r4, #1
  408572:	107f      	asrs	r7, r7, #1
  408574:	444a      	add	r2, r9
  408576:	4297      	cmp	r7, r2
  408578:	bf34      	ite	cc
  40857a:	4617      	movcc	r7, r2
  40857c:	463a      	movcs	r2, r7
  40857e:	055b      	lsls	r3, r3, #21
  408580:	d535      	bpl.n	4085ee <__ssprint_r+0xbe>
  408582:	4611      	mov	r1, r2
  408584:	4640      	mov	r0, r8
  408586:	f7fe ff1d 	bl	4073c4 <_malloc_r>
  40858a:	2800      	cmp	r0, #0
  40858c:	d039      	beq.n	408602 <__ssprint_r+0xd2>
  40858e:	6929      	ldr	r1, [r5, #16]
  408590:	464a      	mov	r2, r9
  408592:	9001      	str	r0, [sp, #4]
  408594:	f7fa fe68 	bl	403268 <memcpy>
  408598:	89aa      	ldrh	r2, [r5, #12]
  40859a:	9b01      	ldr	r3, [sp, #4]
  40859c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4085a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4085a4:	81aa      	strh	r2, [r5, #12]
  4085a6:	ebc9 0207 	rsb	r2, r9, r7
  4085aa:	eb03 0009 	add.w	r0, r3, r9
  4085ae:	616f      	str	r7, [r5, #20]
  4085b0:	612b      	str	r3, [r5, #16]
  4085b2:	6028      	str	r0, [r5, #0]
  4085b4:	60aa      	str	r2, [r5, #8]
  4085b6:	4627      	mov	r7, r4
  4085b8:	46a1      	mov	r9, r4
  4085ba:	464a      	mov	r2, r9
  4085bc:	4659      	mov	r1, fp
  4085be:	f7ff f9e7 	bl	407990 <memmove>
  4085c2:	f8da 2008 	ldr.w	r2, [sl, #8]
  4085c6:	68ab      	ldr	r3, [r5, #8]
  4085c8:	6828      	ldr	r0, [r5, #0]
  4085ca:	1bdb      	subs	r3, r3, r7
  4085cc:	4448      	add	r0, r9
  4085ce:	1b14      	subs	r4, r2, r4
  4085d0:	60ab      	str	r3, [r5, #8]
  4085d2:	6028      	str	r0, [r5, #0]
  4085d4:	f8ca 4008 	str.w	r4, [sl, #8]
  4085d8:	b324      	cbz	r4, 408624 <__ssprint_r+0xf4>
  4085da:	f8d6 b000 	ldr.w	fp, [r6]
  4085de:	6874      	ldr	r4, [r6, #4]
  4085e0:	3608      	adds	r6, #8
  4085e2:	e7b4      	b.n	40854e <__ssprint_r+0x1e>
  4085e4:	4627      	mov	r7, r4
  4085e6:	46a1      	mov	r9, r4
  4085e8:	e7e7      	b.n	4085ba <__ssprint_r+0x8a>
  4085ea:	46b9      	mov	r9, r7
  4085ec:	e7e5      	b.n	4085ba <__ssprint_r+0x8a>
  4085ee:	4640      	mov	r0, r8
  4085f0:	f7ff fd42 	bl	408078 <_realloc_r>
  4085f4:	4603      	mov	r3, r0
  4085f6:	2800      	cmp	r0, #0
  4085f8:	d1d5      	bne.n	4085a6 <__ssprint_r+0x76>
  4085fa:	4640      	mov	r0, r8
  4085fc:	6929      	ldr	r1, [r5, #16]
  4085fe:	f7fe fbdf 	bl	406dc0 <_free_r>
  408602:	89aa      	ldrh	r2, [r5, #12]
  408604:	230c      	movs	r3, #12
  408606:	f8c8 3000 	str.w	r3, [r8]
  40860a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40860e:	2300      	movs	r3, #0
  408610:	f04f 30ff 	mov.w	r0, #4294967295
  408614:	81aa      	strh	r2, [r5, #12]
  408616:	f8ca 3008 	str.w	r3, [sl, #8]
  40861a:	f8ca 3004 	str.w	r3, [sl, #4]
  40861e:	b003      	add	sp, #12
  408620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408624:	4620      	mov	r0, r4
  408626:	f8ca 4004 	str.w	r4, [sl, #4]
  40862a:	b003      	add	sp, #12
  40862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408630 <_vfprintf_r>:
  408630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408634:	b0c9      	sub	sp, #292	; 0x124
  408636:	461c      	mov	r4, r3
  408638:	4689      	mov	r9, r1
  40863a:	920a      	str	r2, [sp, #40]	; 0x28
  40863c:	900d      	str	r0, [sp, #52]	; 0x34
  40863e:	f7fe fe45 	bl	4072cc <_localeconv_r>
  408642:	6800      	ldr	r0, [r0, #0]
  408644:	940f      	str	r4, [sp, #60]	; 0x3c
  408646:	9015      	str	r0, [sp, #84]	; 0x54
  408648:	f7fb f800 	bl	40364c <strlen>
  40864c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40864e:	9018      	str	r0, [sp, #96]	; 0x60
  408650:	b11d      	cbz	r5, 40865a <_vfprintf_r+0x2a>
  408652:	6bab      	ldr	r3, [r5, #56]	; 0x38
  408654:	2b00      	cmp	r3, #0
  408656:	f000 8109 	beq.w	40886c <_vfprintf_r+0x23c>
  40865a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
  40865e:	b293      	uxth	r3, r2
  408660:	049f      	lsls	r7, r3, #18
  408662:	d40a      	bmi.n	40867a <_vfprintf_r+0x4a>
  408664:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
  408668:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40866c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408670:	f8a9 300c 	strh.w	r3, [r9, #12]
  408674:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
  408678:	b29b      	uxth	r3, r3
  40867a:	071e      	lsls	r6, r3, #28
  40867c:	f140 80c0 	bpl.w	408800 <_vfprintf_r+0x1d0>
  408680:	f8d9 2010 	ldr.w	r2, [r9, #16]
  408684:	2a00      	cmp	r2, #0
  408686:	f000 80bb 	beq.w	408800 <_vfprintf_r+0x1d0>
  40868a:	f003 031a 	and.w	r3, r3, #26
  40868e:	2b0a      	cmp	r3, #10
  408690:	f000 80c2 	beq.w	408818 <_vfprintf_r+0x1e8>
  408694:	ac38      	add	r4, sp, #224	; 0xe0
  408696:	46a4      	mov	ip, r4
  408698:	9408      	str	r4, [sp, #32]
  40869a:	942b      	str	r4, [sp, #172]	; 0xac
  40869c:	2500      	movs	r5, #0
  40869e:	2400      	movs	r4, #0
  4086a0:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  4086a4:	2300      	movs	r3, #0
  4086a6:	9311      	str	r3, [sp, #68]	; 0x44
  4086a8:	932d      	str	r3, [sp, #180]	; 0xb4
  4086aa:	932c      	str	r3, [sp, #176]	; 0xb0
  4086ac:	931a      	str	r3, [sp, #104]	; 0x68
  4086ae:	9319      	str	r3, [sp, #100]	; 0x64
  4086b0:	9310      	str	r3, [sp, #64]	; 0x40
  4086b2:	4666      	mov	r6, ip
  4086b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4086b6:	782b      	ldrb	r3, [r5, #0]
  4086b8:	2b00      	cmp	r3, #0
  4086ba:	f000 80db 	beq.w	408874 <_vfprintf_r+0x244>
  4086be:	2b25      	cmp	r3, #37	; 0x25
  4086c0:	f000 80d8 	beq.w	408874 <_vfprintf_r+0x244>
  4086c4:	1c6a      	adds	r2, r5, #1
  4086c6:	e002      	b.n	4086ce <_vfprintf_r+0x9e>
  4086c8:	2b25      	cmp	r3, #37	; 0x25
  4086ca:	f000 808b 	beq.w	4087e4 <_vfprintf_r+0x1b4>
  4086ce:	7813      	ldrb	r3, [r2, #0]
  4086d0:	4614      	mov	r4, r2
  4086d2:	3201      	adds	r2, #1
  4086d4:	2b00      	cmp	r3, #0
  4086d6:	d1f7      	bne.n	4086c8 <_vfprintf_r+0x98>
  4086d8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4086da:	1a25      	subs	r5, r4, r0
  4086dc:	b17d      	cbz	r5, 4086fe <_vfprintf_r+0xce>
  4086de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4086e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4086e2:	3301      	adds	r3, #1
  4086e4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4086e6:	442a      	add	r2, r5
  4086e8:	2b07      	cmp	r3, #7
  4086ea:	e886 0021 	stmia.w	r6, {r0, r5}
  4086ee:	922d      	str	r2, [sp, #180]	; 0xb4
  4086f0:	932c      	str	r3, [sp, #176]	; 0xb0
  4086f2:	f300 80a4 	bgt.w	40883e <_vfprintf_r+0x20e>
  4086f6:	3608      	adds	r6, #8
  4086f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4086fa:	4429      	add	r1, r5
  4086fc:	9110      	str	r1, [sp, #64]	; 0x40
  4086fe:	7823      	ldrb	r3, [r4, #0]
  408700:	2b00      	cmp	r3, #0
  408702:	f000 80a4 	beq.w	40884e <_vfprintf_r+0x21e>
  408706:	2300      	movs	r3, #0
  408708:	1c65      	adds	r5, r4, #1
  40870a:	f894 8001 	ldrb.w	r8, [r4, #1]
  40870e:	f04f 34ff 	mov.w	r4, #4294967295
  408712:	461a      	mov	r2, r3
  408714:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  408718:	930e      	str	r3, [sp, #56]	; 0x38
  40871a:	9309      	str	r3, [sp, #36]	; 0x24
  40871c:	950a      	str	r5, [sp, #40]	; 0x28
  40871e:	940b      	str	r4, [sp, #44]	; 0x2c
  408720:	462b      	mov	r3, r5
  408722:	3301      	adds	r3, #1
  408724:	f1a8 0120 	sub.w	r1, r8, #32
  408728:	2958      	cmp	r1, #88	; 0x58
  40872a:	f200 83f4 	bhi.w	408f16 <_vfprintf_r+0x8e6>
  40872e:	e8df f011 	tbh	[pc, r1, lsl #1]
  408732:	0238      	.short	0x0238
  408734:	03f203f2 	.word	0x03f203f2
  408738:	03f20303 	.word	0x03f20303
  40873c:	03f203f2 	.word	0x03f203f2
  408740:	03f203f2 	.word	0x03f203f2
  408744:	023f03f2 	.word	0x023f03f2
  408748:	03f20234 	.word	0x03f20234
  40874c:	03350060 	.word	0x03350060
  408750:	037603f2 	.word	0x037603f2
  408754:	037d037d 	.word	0x037d037d
  408758:	037d037d 	.word	0x037d037d
  40875c:	037d037d 	.word	0x037d037d
  408760:	037d037d 	.word	0x037d037d
  408764:	03f2037d 	.word	0x03f2037d
  408768:	03f203f2 	.word	0x03f203f2
  40876c:	03f203f2 	.word	0x03f203f2
  408770:	03f203f2 	.word	0x03f203f2
  408774:	03f203f2 	.word	0x03f203f2
  408778:	035203f2 	.word	0x035203f2
  40877c:	03f2039d 	.word	0x03f2039d
  408780:	03f2039d 	.word	0x03f2039d
  408784:	03f203f2 	.word	0x03f203f2
  408788:	038e03f2 	.word	0x038e03f2
  40878c:	03f203f2 	.word	0x03f203f2
  408790:	03f203d0 	.word	0x03f203d0
  408794:	03f203f2 	.word	0x03f203f2
  408798:	03f203f2 	.word	0x03f203f2
  40879c:	03f202a3 	.word	0x03f202a3
  4087a0:	02c303f2 	.word	0x02c303f2
  4087a4:	03f203f2 	.word	0x03f203f2
  4087a8:	03f203f2 	.word	0x03f203f2
  4087ac:	03f203f2 	.word	0x03f203f2
  4087b0:	03f203f2 	.word	0x03f203f2
  4087b4:	03f203f2 	.word	0x03f203f2
  4087b8:	031c030a 	.word	0x031c030a
  4087bc:	039d039d 	.word	0x039d039d
  4087c0:	02d9039d 	.word	0x02d9039d
  4087c4:	03f2031c 	.word	0x03f2031c
  4087c8:	02e203f2 	.word	0x02e203f2
  4087cc:	02ee03f2 	.word	0x02ee03f2
  4087d0:	021c020a 	.word	0x021c020a
  4087d4:	03f2024b 	.word	0x03f2024b
  4087d8:	03f20254 	.word	0x03f20254
  4087dc:	03f200a3 	.word	0x03f200a3
  4087e0:	027b03f2 	.word	0x027b03f2
  4087e4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4087e6:	1a65      	subs	r5, r4, r1
  4087e8:	e778      	b.n	4086dc <_vfprintf_r+0xac>
  4087ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4087ec:	910f      	str	r1, [sp, #60]	; 0x3c
  4087ee:	4264      	negs	r4, r4
  4087f0:	940e      	str	r4, [sp, #56]	; 0x38
  4087f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4087f4:	f045 0504 	orr.w	r5, r5, #4
  4087f8:	9509      	str	r5, [sp, #36]	; 0x24
  4087fa:	f893 8000 	ldrb.w	r8, [r3]
  4087fe:	e790      	b.n	408722 <_vfprintf_r+0xf2>
  408800:	980d      	ldr	r0, [sp, #52]	; 0x34
  408802:	4649      	mov	r1, r9
  408804:	f7fd f8ae 	bl	405964 <__swsetup_r>
  408808:	b9a0      	cbnz	r0, 408834 <_vfprintf_r+0x204>
  40880a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40880e:	f003 031a 	and.w	r3, r3, #26
  408812:	2b0a      	cmp	r3, #10
  408814:	f47f af3e 	bne.w	408694 <_vfprintf_r+0x64>
  408818:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
  40881c:	2b00      	cmp	r3, #0
  40881e:	f6ff af39 	blt.w	408694 <_vfprintf_r+0x64>
  408822:	980d      	ldr	r0, [sp, #52]	; 0x34
  408824:	4649      	mov	r1, r9
  408826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408828:	4623      	mov	r3, r4
  40882a:	f001 f993 	bl	409b54 <__sbprintf>
  40882e:	b049      	add	sp, #292	; 0x124
  408830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408834:	f04f 30ff 	mov.w	r0, #4294967295
  408838:	b049      	add	sp, #292	; 0x124
  40883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40883e:	980d      	ldr	r0, [sp, #52]	; 0x34
  408840:	4649      	mov	r1, r9
  408842:	aa2b      	add	r2, sp, #172	; 0xac
  408844:	f7fc fa10 	bl	404c68 <__sprint_r>
  408848:	b940      	cbnz	r0, 40885c <_vfprintf_r+0x22c>
  40884a:	ae38      	add	r6, sp, #224	; 0xe0
  40884c:	e754      	b.n	4086f8 <_vfprintf_r+0xc8>
  40884e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  408850:	b123      	cbz	r3, 40885c <_vfprintf_r+0x22c>
  408852:	980d      	ldr	r0, [sp, #52]	; 0x34
  408854:	4649      	mov	r1, r9
  408856:	aa2b      	add	r2, sp, #172	; 0xac
  408858:	f7fc fa06 	bl	404c68 <__sprint_r>
  40885c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  408860:	065b      	lsls	r3, r3, #25
  408862:	d4e7      	bmi.n	408834 <_vfprintf_r+0x204>
  408864:	9810      	ldr	r0, [sp, #64]	; 0x40
  408866:	b049      	add	sp, #292	; 0x124
  408868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40886c:	4628      	mov	r0, r5
  40886e:	f7fe f963 	bl	406b38 <__sinit>
  408872:	e6f2      	b.n	40865a <_vfprintf_r+0x2a>
  408874:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408876:	e742      	b.n	4086fe <_vfprintf_r+0xce>
  408878:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40887a:	930a      	str	r3, [sp, #40]	; 0x28
  40887c:	06a2      	lsls	r2, r4, #26
  40887e:	f140 8206 	bpl.w	408c8e <_vfprintf_r+0x65e>
  408882:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408884:	1deb      	adds	r3, r5, #7
  408886:	f023 0307 	bic.w	r3, r3, #7
  40888a:	f103 0c08 	add.w	ip, r3, #8
  40888e:	e9d3 4500 	ldrd	r4, r5, [r3]
  408892:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  408896:	2301      	movs	r3, #1
  408898:	f04f 0a00 	mov.w	sl, #0
  40889c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4088a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4088a2:	2900      	cmp	r1, #0
  4088a4:	db05      	blt.n	4088b2 <_vfprintf_r+0x282>
  4088a6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4088aa:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  4088ae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4088b2:	ea54 0005 	orrs.w	r0, r4, r5
  4088b6:	f040 8347 	bne.w	408f48 <_vfprintf_r+0x918>
  4088ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4088bc:	2900      	cmp	r1, #0
  4088be:	f040 8343 	bne.w	408f48 <_vfprintf_r+0x918>
  4088c2:	2b00      	cmp	r3, #0
  4088c4:	f040 84b9 	bne.w	40923a <_vfprintf_r+0xc0a>
  4088c8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4088cc:	f01c 0f01 	tst.w	ip, #1
  4088d0:	f000 84b3 	beq.w	40923a <_vfprintf_r+0xc0a>
  4088d4:	af48      	add	r7, sp, #288	; 0x120
  4088d6:	2330      	movs	r3, #48	; 0x30
  4088d8:	9d08      	ldr	r5, [sp, #32]
  4088da:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4088de:	1bec      	subs	r4, r5, r7
  4088e0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  4088e4:	2500      	movs	r5, #0
  4088e6:	4564      	cmp	r4, ip
  4088e8:	bfa8      	it	ge
  4088ea:	46a4      	movge	ip, r4
  4088ec:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  4088f0:	9514      	str	r5, [sp, #80]	; 0x50
  4088f2:	f1ba 0f00 	cmp.w	sl, #0
  4088f6:	d002      	beq.n	4088fe <_vfprintf_r+0x2ce>
  4088f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4088fa:	3501      	adds	r5, #1
  4088fc:	950c      	str	r5, [sp, #48]	; 0x30
  4088fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408900:	f013 0302 	ands.w	r3, r3, #2
  408904:	9312      	str	r3, [sp, #72]	; 0x48
  408906:	d002      	beq.n	40890e <_vfprintf_r+0x2de>
  408908:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40890a:	3502      	adds	r5, #2
  40890c:	950c      	str	r5, [sp, #48]	; 0x30
  40890e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408912:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  408916:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  40891a:	f040 8312 	bne.w	408f42 <_vfprintf_r+0x912>
  40891e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408920:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  408924:	ebcc 0b05 	rsb	fp, ip, r5
  408928:	f1bb 0f00 	cmp.w	fp, #0
  40892c:	f340 8309 	ble.w	408f42 <_vfprintf_r+0x912>
  408930:	f1bb 0f10 	cmp.w	fp, #16
  408934:	992d      	ldr	r1, [sp, #180]	; 0xb4
  408936:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  408938:	f8df a528 	ldr.w	sl, [pc, #1320]	; 408e64 <_vfprintf_r+0x834>
  40893c:	dd27      	ble.n	40898e <_vfprintf_r+0x35e>
  40893e:	971b      	str	r7, [sp, #108]	; 0x6c
  408940:	2510      	movs	r5, #16
  408942:	4657      	mov	r7, sl
  408944:	46a2      	mov	sl, r4
  408946:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  408948:	e006      	b.n	408958 <_vfprintf_r+0x328>
  40894a:	f1ab 0b10 	sub.w	fp, fp, #16
  40894e:	f1bb 0f10 	cmp.w	fp, #16
  408952:	f106 0608 	add.w	r6, r6, #8
  408956:	dd17      	ble.n	408988 <_vfprintf_r+0x358>
  408958:	3201      	adds	r2, #1
  40895a:	3110      	adds	r1, #16
  40895c:	2a07      	cmp	r2, #7
  40895e:	912d      	str	r1, [sp, #180]	; 0xb4
  408960:	922c      	str	r2, [sp, #176]	; 0xb0
  408962:	6037      	str	r7, [r6, #0]
  408964:	6075      	str	r5, [r6, #4]
  408966:	ddf0      	ble.n	40894a <_vfprintf_r+0x31a>
  408968:	4620      	mov	r0, r4
  40896a:	4649      	mov	r1, r9
  40896c:	aa2b      	add	r2, sp, #172	; 0xac
  40896e:	f7fc f97b 	bl	404c68 <__sprint_r>
  408972:	2800      	cmp	r0, #0
  408974:	f47f af72 	bne.w	40885c <_vfprintf_r+0x22c>
  408978:	f1ab 0b10 	sub.w	fp, fp, #16
  40897c:	f1bb 0f10 	cmp.w	fp, #16
  408980:	992d      	ldr	r1, [sp, #180]	; 0xb4
  408982:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  408984:	ae38      	add	r6, sp, #224	; 0xe0
  408986:	dce7      	bgt.n	408958 <_vfprintf_r+0x328>
  408988:	4654      	mov	r4, sl
  40898a:	46ba      	mov	sl, r7
  40898c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40898e:	3201      	adds	r2, #1
  408990:	eb0b 0c01 	add.w	ip, fp, r1
  408994:	2a07      	cmp	r2, #7
  408996:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40899a:	922c      	str	r2, [sp, #176]	; 0xb0
  40899c:	e886 0c00 	stmia.w	r6, {sl, fp}
  4089a0:	f300 849a 	bgt.w	4092d8 <_vfprintf_r+0xca8>
  4089a4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4089a8:	3608      	adds	r6, #8
  4089aa:	f1ba 0f00 	cmp.w	sl, #0
  4089ae:	d00f      	beq.n	4089d0 <_vfprintf_r+0x3a0>
  4089b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4089b2:	f10c 0c01 	add.w	ip, ip, #1
  4089b6:	3301      	adds	r3, #1
  4089b8:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  4089bc:	2201      	movs	r2, #1
  4089be:	2b07      	cmp	r3, #7
  4089c0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4089c4:	932c      	str	r3, [sp, #176]	; 0xb0
  4089c6:	e886 0006 	stmia.w	r6, {r1, r2}
  4089ca:	f300 841c 	bgt.w	409206 <_vfprintf_r+0xbd6>
  4089ce:	3608      	adds	r6, #8
  4089d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4089d2:	b173      	cbz	r3, 4089f2 <_vfprintf_r+0x3c2>
  4089d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4089d6:	f10c 0c02 	add.w	ip, ip, #2
  4089da:	3301      	adds	r3, #1
  4089dc:	a924      	add	r1, sp, #144	; 0x90
  4089de:	2202      	movs	r2, #2
  4089e0:	2b07      	cmp	r3, #7
  4089e2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4089e6:	932c      	str	r3, [sp, #176]	; 0xb0
  4089e8:	e886 0006 	stmia.w	r6, {r1, r2}
  4089ec:	f300 8418 	bgt.w	409220 <_vfprintf_r+0xbf0>
  4089f0:	3608      	adds	r6, #8
  4089f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  4089f4:	2d80      	cmp	r5, #128	; 0x80
  4089f6:	f000 8348 	beq.w	40908a <_vfprintf_r+0xa5a>
  4089fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4089fc:	1b15      	subs	r5, r2, r4
  4089fe:	2d00      	cmp	r5, #0
  408a00:	dd3d      	ble.n	408a7e <_vfprintf_r+0x44e>
  408a02:	2d10      	cmp	r5, #16
  408a04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408a06:	f8df a460 	ldr.w	sl, [pc, #1120]	; 408e68 <_vfprintf_r+0x838>
  408a0a:	dd2c      	ble.n	408a66 <_vfprintf_r+0x436>
  408a0c:	4651      	mov	r1, sl
  408a0e:	940b      	str	r4, [sp, #44]	; 0x2c
  408a10:	46aa      	mov	sl, r5
  408a12:	f04f 0b10 	mov.w	fp, #16
  408a16:	4662      	mov	r2, ip
  408a18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  408a1a:	460d      	mov	r5, r1
  408a1c:	e006      	b.n	408a2c <_vfprintf_r+0x3fc>
  408a1e:	f1aa 0a10 	sub.w	sl, sl, #16
  408a22:	f1ba 0f10 	cmp.w	sl, #16
  408a26:	f106 0608 	add.w	r6, r6, #8
  408a2a:	dd17      	ble.n	408a5c <_vfprintf_r+0x42c>
  408a2c:	3301      	adds	r3, #1
  408a2e:	3210      	adds	r2, #16
  408a30:	2b07      	cmp	r3, #7
  408a32:	922d      	str	r2, [sp, #180]	; 0xb4
  408a34:	932c      	str	r3, [sp, #176]	; 0xb0
  408a36:	e886 0820 	stmia.w	r6, {r5, fp}
  408a3a:	ddf0      	ble.n	408a1e <_vfprintf_r+0x3ee>
  408a3c:	4620      	mov	r0, r4
  408a3e:	4649      	mov	r1, r9
  408a40:	aa2b      	add	r2, sp, #172	; 0xac
  408a42:	f7fc f911 	bl	404c68 <__sprint_r>
  408a46:	2800      	cmp	r0, #0
  408a48:	f47f af08 	bne.w	40885c <_vfprintf_r+0x22c>
  408a4c:	f1aa 0a10 	sub.w	sl, sl, #16
  408a50:	f1ba 0f10 	cmp.w	sl, #16
  408a54:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  408a56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408a58:	ae38      	add	r6, sp, #224	; 0xe0
  408a5a:	dce7      	bgt.n	408a2c <_vfprintf_r+0x3fc>
  408a5c:	4694      	mov	ip, r2
  408a5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  408a60:	462a      	mov	r2, r5
  408a62:	4655      	mov	r5, sl
  408a64:	4692      	mov	sl, r2
  408a66:	3301      	adds	r3, #1
  408a68:	44ac      	add	ip, r5
  408a6a:	2b07      	cmp	r3, #7
  408a6c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408a70:	932c      	str	r3, [sp, #176]	; 0xb0
  408a72:	f8c6 a000 	str.w	sl, [r6]
  408a76:	6075      	str	r5, [r6, #4]
  408a78:	f300 83b9 	bgt.w	4091ee <_vfprintf_r+0xbbe>
  408a7c:	3608      	adds	r6, #8
  408a7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408a80:	05eb      	lsls	r3, r5, #23
  408a82:	f100 82a2 	bmi.w	408fca <_vfprintf_r+0x99a>
  408a86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408a88:	44a4      	add	ip, r4
  408a8a:	3301      	adds	r3, #1
  408a8c:	2b07      	cmp	r3, #7
  408a8e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408a92:	6037      	str	r7, [r6, #0]
  408a94:	6074      	str	r4, [r6, #4]
  408a96:	932c      	str	r3, [sp, #176]	; 0xb0
  408a98:	f300 8393 	bgt.w	4091c2 <_vfprintf_r+0xb92>
  408a9c:	3608      	adds	r6, #8
  408a9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408aa0:	0762      	lsls	r2, r4, #29
  408aa2:	d540      	bpl.n	408b26 <_vfprintf_r+0x4f6>
  408aa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  408aa8:	1a2c      	subs	r4, r5, r0
  408aaa:	2c00      	cmp	r4, #0
  408aac:	dd3b      	ble.n	408b26 <_vfprintf_r+0x4f6>
  408aae:	2c10      	cmp	r4, #16
  408ab0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408ab2:	f8df a3b0 	ldr.w	sl, [pc, #944]	; 408e64 <_vfprintf_r+0x834>
  408ab6:	dd22      	ble.n	408afe <_vfprintf_r+0x4ce>
  408ab8:	2510      	movs	r5, #16
  408aba:	4662      	mov	r2, ip
  408abc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  408ac0:	4657      	mov	r7, sl
  408ac2:	e004      	b.n	408ace <_vfprintf_r+0x49e>
  408ac4:	3c10      	subs	r4, #16
  408ac6:	2c10      	cmp	r4, #16
  408ac8:	f106 0608 	add.w	r6, r6, #8
  408acc:	dd15      	ble.n	408afa <_vfprintf_r+0x4ca>
  408ace:	3301      	adds	r3, #1
  408ad0:	3210      	adds	r2, #16
  408ad2:	2b07      	cmp	r3, #7
  408ad4:	922d      	str	r2, [sp, #180]	; 0xb4
  408ad6:	932c      	str	r3, [sp, #176]	; 0xb0
  408ad8:	6037      	str	r7, [r6, #0]
  408ada:	6075      	str	r5, [r6, #4]
  408adc:	ddf2      	ble.n	408ac4 <_vfprintf_r+0x494>
  408ade:	4640      	mov	r0, r8
  408ae0:	4649      	mov	r1, r9
  408ae2:	aa2b      	add	r2, sp, #172	; 0xac
  408ae4:	f7fc f8c0 	bl	404c68 <__sprint_r>
  408ae8:	2800      	cmp	r0, #0
  408aea:	f47f aeb7 	bne.w	40885c <_vfprintf_r+0x22c>
  408aee:	3c10      	subs	r4, #16
  408af0:	2c10      	cmp	r4, #16
  408af2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  408af4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408af6:	ae38      	add	r6, sp, #224	; 0xe0
  408af8:	dce9      	bgt.n	408ace <_vfprintf_r+0x49e>
  408afa:	4694      	mov	ip, r2
  408afc:	46ba      	mov	sl, r7
  408afe:	3301      	adds	r3, #1
  408b00:	44a4      	add	ip, r4
  408b02:	2b07      	cmp	r3, #7
  408b04:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408b08:	932c      	str	r3, [sp, #176]	; 0xb0
  408b0a:	f8c6 a000 	str.w	sl, [r6]
  408b0e:	6074      	str	r4, [r6, #4]
  408b10:	dd09      	ble.n	408b26 <_vfprintf_r+0x4f6>
  408b12:	980d      	ldr	r0, [sp, #52]	; 0x34
  408b14:	4649      	mov	r1, r9
  408b16:	aa2b      	add	r2, sp, #172	; 0xac
  408b18:	f7fc f8a6 	bl	404c68 <__sprint_r>
  408b1c:	2800      	cmp	r0, #0
  408b1e:	f47f ae9d 	bne.w	40885c <_vfprintf_r+0x22c>
  408b22:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  408b26:	9c10      	ldr	r4, [sp, #64]	; 0x40
  408b28:	980c      	ldr	r0, [sp, #48]	; 0x30
  408b2a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408b2c:	42a8      	cmp	r0, r5
  408b2e:	bfac      	ite	ge
  408b30:	1824      	addge	r4, r4, r0
  408b32:	1964      	addlt	r4, r4, r5
  408b34:	9410      	str	r4, [sp, #64]	; 0x40
  408b36:	f1bc 0f00 	cmp.w	ip, #0
  408b3a:	f040 834e 	bne.w	4091da <_vfprintf_r+0xbaa>
  408b3e:	2300      	movs	r3, #0
  408b40:	932c      	str	r3, [sp, #176]	; 0xb0
  408b42:	ae38      	add	r6, sp, #224	; 0xe0
  408b44:	e5b6      	b.n	4086b4 <_vfprintf_r+0x84>
  408b46:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408b4a:	930a      	str	r3, [sp, #40]	; 0x28
  408b4c:	f01c 0320 	ands.w	r3, ip, #32
  408b50:	f000 81ca 	beq.w	408ee8 <_vfprintf_r+0x8b8>
  408b54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  408b56:	1de3      	adds	r3, r4, #7
  408b58:	f023 0307 	bic.w	r3, r3, #7
  408b5c:	f103 0508 	add.w	r5, r3, #8
  408b60:	950f      	str	r5, [sp, #60]	; 0x3c
  408b62:	e9d3 4500 	ldrd	r4, r5, [r3]
  408b66:	2300      	movs	r3, #0
  408b68:	e696      	b.n	408898 <_vfprintf_r+0x268>
  408b6a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408b6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408b70:	930a      	str	r3, [sp, #40]	; 0x28
  408b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408b74:	48b9      	ldr	r0, [pc, #740]	; (408e5c <_vfprintf_r+0x82c>)
  408b76:	3504      	adds	r5, #4
  408b78:	681c      	ldr	r4, [r3, #0]
  408b7a:	f04f 0878 	mov.w	r8, #120	; 0x78
  408b7e:	2330      	movs	r3, #48	; 0x30
  408b80:	f04c 0c02 	orr.w	ip, ip, #2
  408b84:	950f      	str	r5, [sp, #60]	; 0x3c
  408b86:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  408b8a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408b8e:	2500      	movs	r5, #0
  408b90:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  408b94:	901a      	str	r0, [sp, #104]	; 0x68
  408b96:	2302      	movs	r3, #2
  408b98:	e67e      	b.n	408898 <_vfprintf_r+0x268>
  408b9a:	f893 8000 	ldrb.w	r8, [r3]
  408b9e:	222b      	movs	r2, #43	; 0x2b
  408ba0:	e5bf      	b.n	408722 <_vfprintf_r+0xf2>
  408ba2:	f893 8000 	ldrb.w	r8, [r3]
  408ba6:	2a00      	cmp	r2, #0
  408ba8:	f47f adbb 	bne.w	408722 <_vfprintf_r+0xf2>
  408bac:	2220      	movs	r2, #32
  408bae:	e5b8      	b.n	408722 <_vfprintf_r+0xf2>
  408bb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  408bb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408bb4:	6824      	ldr	r4, [r4, #0]
  408bb6:	1d29      	adds	r1, r5, #4
  408bb8:	2c00      	cmp	r4, #0
  408bba:	940e      	str	r4, [sp, #56]	; 0x38
  408bbc:	f6ff ae15 	blt.w	4087ea <_vfprintf_r+0x1ba>
  408bc0:	910f      	str	r1, [sp, #60]	; 0x3c
  408bc2:	f893 8000 	ldrb.w	r8, [r3]
  408bc6:	e5ac      	b.n	408722 <_vfprintf_r+0xf2>
  408bc8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408bcc:	f04c 0c20 	orr.w	ip, ip, #32
  408bd0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408bd4:	f893 8000 	ldrb.w	r8, [r3]
  408bd8:	e5a3      	b.n	408722 <_vfprintf_r+0xf2>
  408bda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  408bdc:	f04f 0a00 	mov.w	sl, #0
  408be0:	6827      	ldr	r7, [r4, #0]
  408be2:	930a      	str	r3, [sp, #40]	; 0x28
  408be4:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  408be8:	1d25      	adds	r5, r4, #4
  408bea:	2f00      	cmp	r7, #0
  408bec:	f000 865c 	beq.w	4098a8 <_vfprintf_r+0x1278>
  408bf0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  408bf2:	4638      	mov	r0, r7
  408bf4:	2c00      	cmp	r4, #0
  408bf6:	f2c0 8607 	blt.w	409808 <_vfprintf_r+0x11d8>
  408bfa:	4651      	mov	r1, sl
  408bfc:	4622      	mov	r2, r4
  408bfe:	f7fe fe7d 	bl	4078fc <memchr>
  408c02:	2800      	cmp	r0, #0
  408c04:	f000 869c 	beq.w	409940 <_vfprintf_r+0x1310>
  408c08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  408c0a:	1bc0      	subs	r0, r0, r7
  408c0c:	42a0      	cmp	r0, r4
  408c0e:	bfb8      	it	lt
  408c10:	4604      	movlt	r4, r0
  408c12:	950f      	str	r5, [sp, #60]	; 0x3c
  408c14:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  408c18:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  408c1c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  408c20:	950c      	str	r5, [sp, #48]	; 0x30
  408c22:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  408c26:	e664      	b.n	4088f2 <_vfprintf_r+0x2c2>
  408c28:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408c2a:	4c8c      	ldr	r4, [pc, #560]	; (408e5c <_vfprintf_r+0x82c>)
  408c2c:	06af      	lsls	r7, r5, #26
  408c2e:	930a      	str	r3, [sp, #40]	; 0x28
  408c30:	941a      	str	r4, [sp, #104]	; 0x68
  408c32:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408c36:	d547      	bpl.n	408cc8 <_vfprintf_r+0x698>
  408c38:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  408c3c:	f10c 0307 	add.w	r3, ip, #7
  408c40:	f023 0307 	bic.w	r3, r3, #7
  408c44:	f103 0408 	add.w	r4, r3, #8
  408c48:	940f      	str	r4, [sp, #60]	; 0x3c
  408c4a:	e9d3 4500 	ldrd	r4, r5, [r3]
  408c4e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408c52:	f01c 0f01 	tst.w	ip, #1
  408c56:	f000 82f4 	beq.w	409242 <_vfprintf_r+0xc12>
  408c5a:	ea54 0005 	orrs.w	r0, r4, r5
  408c5e:	f000 82f0 	beq.w	409242 <_vfprintf_r+0xc12>
  408c62:	2330      	movs	r3, #48	; 0x30
  408c64:	f04c 0c02 	orr.w	ip, ip, #2
  408c68:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  408c6c:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  408c70:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408c74:	2302      	movs	r3, #2
  408c76:	e60f      	b.n	408898 <_vfprintf_r+0x268>
  408c78:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408c7c:	930a      	str	r3, [sp, #40]	; 0x28
  408c7e:	f04c 0c10 	orr.w	ip, ip, #16
  408c82:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408c86:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408c88:	06a2      	lsls	r2, r4, #26
  408c8a:	f53f adfa 	bmi.w	408882 <_vfprintf_r+0x252>
  408c8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408c90:	06e3      	lsls	r3, r4, #27
  408c92:	f100 8330 	bmi.w	4092f6 <_vfprintf_r+0xcc6>
  408c96:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408c9a:	f01c 0f40 	tst.w	ip, #64	; 0x40
  408c9e:	f000 832a 	beq.w	4092f6 <_vfprintf_r+0xcc6>
  408ca2:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  408ca6:	2500      	movs	r5, #0
  408ca8:	f8bc 4000 	ldrh.w	r4, [ip]
  408cac:	f10c 0c04 	add.w	ip, ip, #4
  408cb0:	2301      	movs	r3, #1
  408cb2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  408cb6:	e5ef      	b.n	408898 <_vfprintf_r+0x268>
  408cb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408cba:	4c69      	ldr	r4, [pc, #420]	; (408e60 <_vfprintf_r+0x830>)
  408cbc:	06af      	lsls	r7, r5, #26
  408cbe:	930a      	str	r3, [sp, #40]	; 0x28
  408cc0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408cc4:	941a      	str	r4, [sp, #104]	; 0x68
  408cc6:	d4b7      	bmi.n	408c38 <_vfprintf_r+0x608>
  408cc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408cca:	06ed      	lsls	r5, r5, #27
  408ccc:	f140 84c9 	bpl.w	409662 <_vfprintf_r+0x1032>
  408cd0:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  408cd4:	2500      	movs	r5, #0
  408cd6:	f8dc 4000 	ldr.w	r4, [ip]
  408cda:	f10c 0c04 	add.w	ip, ip, #4
  408cde:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  408ce2:	e7b4      	b.n	408c4e <_vfprintf_r+0x61e>
  408ce4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408ce8:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  408cec:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408cf0:	f893 8000 	ldrb.w	r8, [r3]
  408cf4:	e515      	b.n	408722 <_vfprintf_r+0xf2>
  408cf6:	f893 8000 	ldrb.w	r8, [r3]
  408cfa:	4619      	mov	r1, r3
  408cfc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  408d00:	f000 856d 	beq.w	4097de <_vfprintf_r+0x11ae>
  408d04:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408d06:	f045 0510 	orr.w	r5, r5, #16
  408d0a:	9509      	str	r5, [sp, #36]	; 0x24
  408d0c:	e509      	b.n	408722 <_vfprintf_r+0xf2>
  408d0e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408d12:	930a      	str	r3, [sp, #40]	; 0x28
  408d14:	f01c 0f20 	tst.w	ip, #32
  408d18:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408d1c:	f000 84b0 	beq.w	409680 <_vfprintf_r+0x1050>
  408d20:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  408d22:	6821      	ldr	r1, [r4, #0]
  408d24:	9c10      	ldr	r4, [sp, #64]	; 0x40
  408d26:	17e5      	asrs	r5, r4, #31
  408d28:	462b      	mov	r3, r5
  408d2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408d2c:	4622      	mov	r2, r4
  408d2e:	3504      	adds	r5, #4
  408d30:	950f      	str	r5, [sp, #60]	; 0x3c
  408d32:	e9c1 2300 	strd	r2, r3, [r1]
  408d36:	e4bd      	b.n	4086b4 <_vfprintf_r+0x84>
  408d38:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408d3a:	f045 0501 	orr.w	r5, r5, #1
  408d3e:	9509      	str	r5, [sp, #36]	; 0x24
  408d40:	f893 8000 	ldrb.w	r8, [r3]
  408d44:	e4ed      	b.n	408722 <_vfprintf_r+0xf2>
  408d46:	930a      	str	r3, [sp, #40]	; 0x28
  408d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408d4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408d4c:	681a      	ldr	r2, [r3, #0]
  408d4e:	2401      	movs	r4, #1
  408d50:	2300      	movs	r3, #0
  408d52:	3504      	adds	r5, #4
  408d54:	469a      	mov	sl, r3
  408d56:	940c      	str	r4, [sp, #48]	; 0x30
  408d58:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  408d5c:	950f      	str	r5, [sp, #60]	; 0x3c
  408d5e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  408d62:	930b      	str	r3, [sp, #44]	; 0x2c
  408d64:	9314      	str	r3, [sp, #80]	; 0x50
  408d66:	af2e      	add	r7, sp, #184	; 0xb8
  408d68:	e5c9      	b.n	4088fe <_vfprintf_r+0x2ce>
  408d6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408d6c:	930a      	str	r3, [sp, #40]	; 0x28
  408d6e:	06a5      	lsls	r5, r4, #26
  408d70:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408d74:	d53b      	bpl.n	408dee <_vfprintf_r+0x7be>
  408d76:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408d78:	1de9      	adds	r1, r5, #7
  408d7a:	f021 0107 	bic.w	r1, r1, #7
  408d7e:	e9d1 2300 	ldrd	r2, r3, [r1]
  408d82:	3108      	adds	r1, #8
  408d84:	910f      	str	r1, [sp, #60]	; 0x3c
  408d86:	4614      	mov	r4, r2
  408d88:	461d      	mov	r5, r3
  408d8a:	2a00      	cmp	r2, #0
  408d8c:	f173 0c00 	sbcs.w	ip, r3, #0
  408d90:	f2c0 83ca 	blt.w	409528 <_vfprintf_r+0xef8>
  408d94:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  408d98:	2301      	movs	r3, #1
  408d9a:	e581      	b.n	4088a0 <_vfprintf_r+0x270>
  408d9c:	f893 8000 	ldrb.w	r8, [r3]
  408da0:	1c58      	adds	r0, r3, #1
  408da2:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  408da6:	f000 86ae 	beq.w	409b06 <_vfprintf_r+0x14d6>
  408daa:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
  408dae:	2909      	cmp	r1, #9
  408db0:	bf98      	it	ls
  408db2:	2300      	movls	r3, #0
  408db4:	f200 860c 	bhi.w	4099d0 <_vfprintf_r+0x13a0>
  408db8:	f810 8b01 	ldrb.w	r8, [r0], #1
  408dbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  408dc0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  408dc4:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
  408dc8:	2909      	cmp	r1, #9
  408dca:	d9f5      	bls.n	408db8 <_vfprintf_r+0x788>
  408dcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  408dd0:	930b      	str	r3, [sp, #44]	; 0x2c
  408dd2:	4603      	mov	r3, r0
  408dd4:	e4a6      	b.n	408724 <_vfprintf_r+0xf4>
  408dd6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408dda:	930a      	str	r3, [sp, #40]	; 0x28
  408ddc:	f04c 0c10 	orr.w	ip, ip, #16
  408de0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408de4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408de6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408dea:	06a5      	lsls	r5, r4, #26
  408dec:	d4c3      	bmi.n	408d76 <_vfprintf_r+0x746>
  408dee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408df2:	f01c 0f10 	tst.w	ip, #16
  408df6:	f040 82b0 	bne.w	40935a <_vfprintf_r+0xd2a>
  408dfa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408dfe:	f01c 0f40 	tst.w	ip, #64	; 0x40
  408e02:	f000 82aa 	beq.w	40935a <_vfprintf_r+0xd2a>
  408e06:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  408e0a:	f9bc 4000 	ldrsh.w	r4, [ip]
  408e0e:	f10c 0c04 	add.w	ip, ip, #4
  408e12:	17e5      	asrs	r5, r4, #31
  408e14:	4622      	mov	r2, r4
  408e16:	462b      	mov	r3, r5
  408e18:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  408e1c:	e7b5      	b.n	408d8a <_vfprintf_r+0x75a>
  408e1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408e20:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  408e24:	9509      	str	r5, [sp, #36]	; 0x24
  408e26:	f893 8000 	ldrb.w	r8, [r3]
  408e2a:	e47a      	b.n	408722 <_vfprintf_r+0xf2>
  408e2c:	2400      	movs	r4, #0
  408e2e:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
  408e32:	940e      	str	r4, [sp, #56]	; 0x38
  408e34:	4620      	mov	r0, r4
  408e36:	f813 8b01 	ldrb.w	r8, [r3], #1
  408e3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  408e3e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
  408e42:	f1a8 0130 	sub.w	r1, r8, #48	; 0x30
  408e46:	2909      	cmp	r1, #9
  408e48:	d9f5      	bls.n	408e36 <_vfprintf_r+0x806>
  408e4a:	900e      	str	r0, [sp, #56]	; 0x38
  408e4c:	e46a      	b.n	408724 <_vfprintf_r+0xf4>
  408e4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408e50:	f045 0508 	orr.w	r5, r5, #8
  408e54:	9509      	str	r5, [sp, #36]	; 0x24
  408e56:	f893 8000 	ldrb.w	r8, [r3]
  408e5a:	e462      	b.n	408722 <_vfprintf_r+0xf2>
  408e5c:	0040b6f8 	.word	0x0040b6f8
  408e60:	0040b6e4 	.word	0x0040b6e4
  408e64:	0040b864 	.word	0x0040b864
  408e68:	0040b874 	.word	0x0040b874
  408e6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408e6e:	930a      	str	r3, [sp, #40]	; 0x28
  408e70:	1deb      	adds	r3, r5, #7
  408e72:	f023 0307 	bic.w	r3, r3, #7
  408e76:	f103 0c08 	add.w	ip, r3, #8
  408e7a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408e7e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  408e82:	e9d3 4500 	ldrd	r4, r5, [r3]
  408e86:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  408e8a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408e8e:	f7ff fad3 	bl	408438 <__fpclassifyd>
  408e92:	2801      	cmp	r0, #1
  408e94:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408e98:	f040 8350 	bne.w	40953c <_vfprintf_r+0xf0c>
  408e9c:	2200      	movs	r2, #0
  408e9e:	2300      	movs	r3, #0
  408ea0:	f001 fc8a 	bl	40a7b8 <__aeabi_dcmplt>
  408ea4:	2800      	cmp	r0, #0
  408ea6:	f040 8531 	bne.w	40990c <_vfprintf_r+0x12dc>
  408eaa:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  408eae:	2503      	movs	r5, #3
  408eb0:	950c      	str	r5, [sp, #48]	; 0x30
  408eb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408eb4:	4f9e      	ldr	r7, [pc, #632]	; (409130 <_vfprintf_r+0xb00>)
  408eb6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  408eba:	4b9e      	ldr	r3, [pc, #632]	; (409134 <_vfprintf_r+0xb04>)
  408ebc:	2400      	movs	r4, #0
  408ebe:	9509      	str	r5, [sp, #36]	; 0x24
  408ec0:	2500      	movs	r5, #0
  408ec2:	940b      	str	r4, [sp, #44]	; 0x2c
  408ec4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  408ec8:	bfd8      	it	le
  408eca:	461f      	movle	r7, r3
  408ecc:	2403      	movs	r4, #3
  408ece:	9514      	str	r5, [sp, #80]	; 0x50
  408ed0:	e50f      	b.n	4088f2 <_vfprintf_r+0x2c2>
  408ed2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408ed4:	930a      	str	r3, [sp, #40]	; 0x28
  408ed6:	f045 0510 	orr.w	r5, r5, #16
  408eda:	9509      	str	r5, [sp, #36]	; 0x24
  408edc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408ee0:	f01c 0320 	ands.w	r3, ip, #32
  408ee4:	f47f ae36 	bne.w	408b54 <_vfprintf_r+0x524>
  408ee8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408eec:	f01c 0210 	ands.w	r2, ip, #16
  408ef0:	f040 823b 	bne.w	40936a <_vfprintf_r+0xd3a>
  408ef4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408ef8:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  408efc:	f000 8235 	beq.w	40936a <_vfprintf_r+0xd3a>
  408f00:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  408f04:	4613      	mov	r3, r2
  408f06:	f8bc 4000 	ldrh.w	r4, [ip]
  408f0a:	f10c 0c04 	add.w	ip, ip, #4
  408f0e:	2500      	movs	r5, #0
  408f10:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  408f14:	e4c0      	b.n	408898 <_vfprintf_r+0x268>
  408f16:	930a      	str	r3, [sp, #40]	; 0x28
  408f18:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408f1c:	f1b8 0f00 	cmp.w	r8, #0
  408f20:	f43f ac95 	beq.w	40884e <_vfprintf_r+0x21e>
  408f24:	2300      	movs	r3, #0
  408f26:	f04f 0c01 	mov.w	ip, #1
  408f2a:	469a      	mov	sl, r3
  408f2c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  408f30:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  408f34:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  408f38:	930b      	str	r3, [sp, #44]	; 0x2c
  408f3a:	9314      	str	r3, [sp, #80]	; 0x50
  408f3c:	4664      	mov	r4, ip
  408f3e:	af2e      	add	r7, sp, #184	; 0xb8
  408f40:	e4dd      	b.n	4088fe <_vfprintf_r+0x2ce>
  408f42:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  408f46:	e530      	b.n	4089aa <_vfprintf_r+0x37a>
  408f48:	2b01      	cmp	r3, #1
  408f4a:	f000 80e3 	beq.w	409114 <_vfprintf_r+0xae4>
  408f4e:	2b02      	cmp	r3, #2
  408f50:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  408f54:	d118      	bne.n	408f88 <_vfprintf_r+0x958>
  408f56:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  408f5a:	4619      	mov	r1, r3
  408f5c:	f004 000f 	and.w	r0, r4, #15
  408f60:	0922      	lsrs	r2, r4, #4
  408f62:	f81c 0000 	ldrb.w	r0, [ip, r0]
  408f66:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  408f6a:	092b      	lsrs	r3, r5, #4
  408f6c:	7008      	strb	r0, [r1, #0]
  408f6e:	ea52 0003 	orrs.w	r0, r2, r3
  408f72:	460f      	mov	r7, r1
  408f74:	4614      	mov	r4, r2
  408f76:	461d      	mov	r5, r3
  408f78:	f101 31ff 	add.w	r1, r1, #4294967295
  408f7c:	d1ee      	bne.n	408f5c <_vfprintf_r+0x92c>
  408f7e:	9d08      	ldr	r5, [sp, #32]
  408f80:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  408f84:	1bec      	subs	r4, r5, r7
  408f86:	e4ab      	b.n	4088e0 <_vfprintf_r+0x2b0>
  408f88:	08e0      	lsrs	r0, r4, #3
  408f8a:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  408f8e:	f004 0207 	and.w	r2, r4, #7
  408f92:	08e9      	lsrs	r1, r5, #3
  408f94:	3230      	adds	r2, #48	; 0x30
  408f96:	ea50 0c01 	orrs.w	ip, r0, r1
  408f9a:	461f      	mov	r7, r3
  408f9c:	701a      	strb	r2, [r3, #0]
  408f9e:	4604      	mov	r4, r0
  408fa0:	460d      	mov	r5, r1
  408fa2:	f103 33ff 	add.w	r3, r3, #4294967295
  408fa6:	d1ef      	bne.n	408f88 <_vfprintf_r+0x958>
  408fa8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408faa:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  408fae:	07e0      	lsls	r0, r4, #31
  408fb0:	4639      	mov	r1, r7
  408fb2:	f140 80b8 	bpl.w	409126 <_vfprintf_r+0xaf6>
  408fb6:	2a30      	cmp	r2, #48	; 0x30
  408fb8:	f000 80b5 	beq.w	409126 <_vfprintf_r+0xaf6>
  408fbc:	9d08      	ldr	r5, [sp, #32]
  408fbe:	461f      	mov	r7, r3
  408fc0:	2330      	movs	r3, #48	; 0x30
  408fc2:	1bec      	subs	r4, r5, r7
  408fc4:	f801 3c01 	strb.w	r3, [r1, #-1]
  408fc8:	e48a      	b.n	4088e0 <_vfprintf_r+0x2b0>
  408fca:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  408fce:	f340 80b7 	ble.w	409140 <_vfprintf_r+0xb10>
  408fd2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408fd6:	2200      	movs	r2, #0
  408fd8:	2300      	movs	r3, #0
  408fda:	f8cd c01c 	str.w	ip, [sp, #28]
  408fde:	f001 fbe1 	bl	40a7a4 <__aeabi_dcmpeq>
  408fe2:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408fe6:	2800      	cmp	r0, #0
  408fe8:	f000 812e 	beq.w	409248 <_vfprintf_r+0xc18>
  408fec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408fee:	4952      	ldr	r1, [pc, #328]	; (409138 <_vfprintf_r+0xb08>)
  408ff0:	3301      	adds	r3, #1
  408ff2:	f10c 0c01 	add.w	ip, ip, #1
  408ff6:	2201      	movs	r2, #1
  408ff8:	2b07      	cmp	r3, #7
  408ffa:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408ffe:	932c      	str	r3, [sp, #176]	; 0xb0
  409000:	e886 0006 	stmia.w	r6, {r1, r2}
  409004:	f300 8361 	bgt.w	4096ca <_vfprintf_r+0x109a>
  409008:	3608      	adds	r6, #8
  40900a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40900c:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40900e:	42a3      	cmp	r3, r4
  409010:	db03      	blt.n	40901a <_vfprintf_r+0x9ea>
  409012:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409014:	07ef      	lsls	r7, r5, #31
  409016:	f57f ad42 	bpl.w	408a9e <_vfprintf_r+0x46e>
  40901a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40901c:	9c18      	ldr	r4, [sp, #96]	; 0x60
  40901e:	3301      	adds	r3, #1
  409020:	9d15      	ldr	r5, [sp, #84]	; 0x54
  409022:	44a4      	add	ip, r4
  409024:	2b07      	cmp	r3, #7
  409026:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40902a:	6035      	str	r5, [r6, #0]
  40902c:	6074      	str	r4, [r6, #4]
  40902e:	932c      	str	r3, [sp, #176]	; 0xb0
  409030:	f300 83de 	bgt.w	4097f0 <_vfprintf_r+0x11c0>
  409034:	3608      	adds	r6, #8
  409036:	9d11      	ldr	r5, [sp, #68]	; 0x44
  409038:	1e6c      	subs	r4, r5, #1
  40903a:	2c00      	cmp	r4, #0
  40903c:	f77f ad2f 	ble.w	408a9e <_vfprintf_r+0x46e>
  409040:	2c10      	cmp	r4, #16
  409042:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409044:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 40913c <_vfprintf_r+0xb0c>
  409048:	f340 8198 	ble.w	40937c <_vfprintf_r+0xd4c>
  40904c:	2510      	movs	r5, #16
  40904e:	4662      	mov	r2, ip
  409050:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  409054:	4657      	mov	r7, sl
  409056:	e004      	b.n	409062 <_vfprintf_r+0xa32>
  409058:	3608      	adds	r6, #8
  40905a:	3c10      	subs	r4, #16
  40905c:	2c10      	cmp	r4, #16
  40905e:	f340 818b 	ble.w	409378 <_vfprintf_r+0xd48>
  409062:	3301      	adds	r3, #1
  409064:	3210      	adds	r2, #16
  409066:	2b07      	cmp	r3, #7
  409068:	922d      	str	r2, [sp, #180]	; 0xb4
  40906a:	932c      	str	r3, [sp, #176]	; 0xb0
  40906c:	6037      	str	r7, [r6, #0]
  40906e:	6075      	str	r5, [r6, #4]
  409070:	ddf2      	ble.n	409058 <_vfprintf_r+0xa28>
  409072:	4640      	mov	r0, r8
  409074:	4649      	mov	r1, r9
  409076:	aa2b      	add	r2, sp, #172	; 0xac
  409078:	f7fb fdf6 	bl	404c68 <__sprint_r>
  40907c:	2800      	cmp	r0, #0
  40907e:	f47f abed 	bne.w	40885c <_vfprintf_r+0x22c>
  409082:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  409084:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409086:	ae38      	add	r6, sp, #224	; 0xe0
  409088:	e7e7      	b.n	40905a <_vfprintf_r+0xa2a>
  40908a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40908c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40908e:	1a45      	subs	r5, r0, r1
  409090:	2d00      	cmp	r5, #0
  409092:	f77f acb2 	ble.w	4089fa <_vfprintf_r+0x3ca>
  409096:	2d10      	cmp	r5, #16
  409098:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40909a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 40913c <_vfprintf_r+0xb0c>
  40909e:	dd2c      	ble.n	4090fa <_vfprintf_r+0xaca>
  4090a0:	4651      	mov	r1, sl
  4090a2:	9412      	str	r4, [sp, #72]	; 0x48
  4090a4:	46aa      	mov	sl, r5
  4090a6:	f04f 0b10 	mov.w	fp, #16
  4090aa:	4662      	mov	r2, ip
  4090ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4090ae:	460d      	mov	r5, r1
  4090b0:	e006      	b.n	4090c0 <_vfprintf_r+0xa90>
  4090b2:	f1aa 0a10 	sub.w	sl, sl, #16
  4090b6:	f1ba 0f10 	cmp.w	sl, #16
  4090ba:	f106 0608 	add.w	r6, r6, #8
  4090be:	dd17      	ble.n	4090f0 <_vfprintf_r+0xac0>
  4090c0:	3301      	adds	r3, #1
  4090c2:	3210      	adds	r2, #16
  4090c4:	2b07      	cmp	r3, #7
  4090c6:	922d      	str	r2, [sp, #180]	; 0xb4
  4090c8:	932c      	str	r3, [sp, #176]	; 0xb0
  4090ca:	e886 0820 	stmia.w	r6, {r5, fp}
  4090ce:	ddf0      	ble.n	4090b2 <_vfprintf_r+0xa82>
  4090d0:	4620      	mov	r0, r4
  4090d2:	4649      	mov	r1, r9
  4090d4:	aa2b      	add	r2, sp, #172	; 0xac
  4090d6:	f7fb fdc7 	bl	404c68 <__sprint_r>
  4090da:	2800      	cmp	r0, #0
  4090dc:	f47f abbe 	bne.w	40885c <_vfprintf_r+0x22c>
  4090e0:	f1aa 0a10 	sub.w	sl, sl, #16
  4090e4:	f1ba 0f10 	cmp.w	sl, #16
  4090e8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4090ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4090ec:	ae38      	add	r6, sp, #224	; 0xe0
  4090ee:	dce7      	bgt.n	4090c0 <_vfprintf_r+0xa90>
  4090f0:	4694      	mov	ip, r2
  4090f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4090f4:	462a      	mov	r2, r5
  4090f6:	4655      	mov	r5, sl
  4090f8:	4692      	mov	sl, r2
  4090fa:	3301      	adds	r3, #1
  4090fc:	44ac      	add	ip, r5
  4090fe:	2b07      	cmp	r3, #7
  409100:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  409104:	932c      	str	r3, [sp, #176]	; 0xb0
  409106:	f8c6 a000 	str.w	sl, [r6]
  40910a:	6075      	str	r5, [r6, #4]
  40910c:	f300 81ff 	bgt.w	40950e <_vfprintf_r+0xede>
  409110:	3608      	adds	r6, #8
  409112:	e472      	b.n	4089fa <_vfprintf_r+0x3ca>
  409114:	2d00      	cmp	r5, #0
  409116:	bf08      	it	eq
  409118:	2c0a      	cmpeq	r4, #10
  40911a:	f080 813b 	bcs.w	409394 <_vfprintf_r+0xd64>
  40911e:	3430      	adds	r4, #48	; 0x30
  409120:	af48      	add	r7, sp, #288	; 0x120
  409122:	f807 4d41 	strb.w	r4, [r7, #-65]!
  409126:	9d08      	ldr	r5, [sp, #32]
  409128:	1bec      	subs	r4, r5, r7
  40912a:	f7ff bbd9 	b.w	4088e0 <_vfprintf_r+0x2b0>
  40912e:	bf00      	nop
  409130:	0040b6d8 	.word	0x0040b6d8
  409134:	0040b6d4 	.word	0x0040b6d4
  409138:	0040b714 	.word	0x0040b714
  40913c:	0040b874 	.word	0x0040b874
  409140:	9c11      	ldr	r4, [sp, #68]	; 0x44
  409142:	2c01      	cmp	r4, #1
  409144:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  409146:	f340 81a4 	ble.w	409492 <_vfprintf_r+0xe62>
  40914a:	3401      	adds	r4, #1
  40914c:	f10c 0501 	add.w	r5, ip, #1
  409150:	2301      	movs	r3, #1
  409152:	2c07      	cmp	r4, #7
  409154:	952d      	str	r5, [sp, #180]	; 0xb4
  409156:	942c      	str	r4, [sp, #176]	; 0xb0
  409158:	6037      	str	r7, [r6, #0]
  40915a:	6073      	str	r3, [r6, #4]
  40915c:	f300 81b4 	bgt.w	4094c8 <_vfprintf_r+0xe98>
  409160:	3608      	adds	r6, #8
  409162:	9818      	ldr	r0, [sp, #96]	; 0x60
  409164:	3401      	adds	r4, #1
  409166:	9915      	ldr	r1, [sp, #84]	; 0x54
  409168:	4405      	add	r5, r0
  40916a:	2c07      	cmp	r4, #7
  40916c:	952d      	str	r5, [sp, #180]	; 0xb4
  40916e:	942c      	str	r4, [sp, #176]	; 0xb0
  409170:	6031      	str	r1, [r6, #0]
  409172:	6070      	str	r0, [r6, #4]
  409174:	f300 81b4 	bgt.w	4094e0 <_vfprintf_r+0xeb0>
  409178:	3608      	adds	r6, #8
  40917a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40917e:	2200      	movs	r2, #0
  409180:	2300      	movs	r3, #0
  409182:	f001 fb0f 	bl	40a7a4 <__aeabi_dcmpeq>
  409186:	2800      	cmp	r0, #0
  409188:	f040 80bd 	bne.w	409306 <_vfprintf_r+0xcd6>
  40918c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40918e:	3401      	adds	r4, #1
  409190:	1e53      	subs	r3, r2, #1
  409192:	3701      	adds	r7, #1
  409194:	441d      	add	r5, r3
  409196:	2c07      	cmp	r4, #7
  409198:	942c      	str	r4, [sp, #176]	; 0xb0
  40919a:	952d      	str	r5, [sp, #180]	; 0xb4
  40919c:	6037      	str	r7, [r6, #0]
  40919e:	6073      	str	r3, [r6, #4]
  4091a0:	f300 8186 	bgt.w	4094b0 <_vfprintf_r+0xe80>
  4091a4:	3608      	adds	r6, #8
  4091a6:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  4091aa:	3401      	adds	r4, #1
  4091ac:	44ac      	add	ip, r5
  4091ae:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4091b0:	ab27      	add	r3, sp, #156	; 0x9c
  4091b2:	2c07      	cmp	r4, #7
  4091b4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4091b8:	942c      	str	r4, [sp, #176]	; 0xb0
  4091ba:	e886 0028 	stmia.w	r6, {r3, r5}
  4091be:	f77f ac6d 	ble.w	408a9c <_vfprintf_r+0x46c>
  4091c2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4091c4:	4649      	mov	r1, r9
  4091c6:	aa2b      	add	r2, sp, #172	; 0xac
  4091c8:	f7fb fd4e 	bl	404c68 <__sprint_r>
  4091cc:	2800      	cmp	r0, #0
  4091ce:	f47f ab45 	bne.w	40885c <_vfprintf_r+0x22c>
  4091d2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4091d6:	ae38      	add	r6, sp, #224	; 0xe0
  4091d8:	e461      	b.n	408a9e <_vfprintf_r+0x46e>
  4091da:	980d      	ldr	r0, [sp, #52]	; 0x34
  4091dc:	4649      	mov	r1, r9
  4091de:	aa2b      	add	r2, sp, #172	; 0xac
  4091e0:	f7fb fd42 	bl	404c68 <__sprint_r>
  4091e4:	2800      	cmp	r0, #0
  4091e6:	f43f acaa 	beq.w	408b3e <_vfprintf_r+0x50e>
  4091ea:	f7ff bb37 	b.w	40885c <_vfprintf_r+0x22c>
  4091ee:	980d      	ldr	r0, [sp, #52]	; 0x34
  4091f0:	4649      	mov	r1, r9
  4091f2:	aa2b      	add	r2, sp, #172	; 0xac
  4091f4:	f7fb fd38 	bl	404c68 <__sprint_r>
  4091f8:	2800      	cmp	r0, #0
  4091fa:	f47f ab2f 	bne.w	40885c <_vfprintf_r+0x22c>
  4091fe:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409202:	ae38      	add	r6, sp, #224	; 0xe0
  409204:	e43b      	b.n	408a7e <_vfprintf_r+0x44e>
  409206:	980d      	ldr	r0, [sp, #52]	; 0x34
  409208:	4649      	mov	r1, r9
  40920a:	aa2b      	add	r2, sp, #172	; 0xac
  40920c:	f7fb fd2c 	bl	404c68 <__sprint_r>
  409210:	2800      	cmp	r0, #0
  409212:	f47f ab23 	bne.w	40885c <_vfprintf_r+0x22c>
  409216:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40921a:	ae38      	add	r6, sp, #224	; 0xe0
  40921c:	f7ff bbd8 	b.w	4089d0 <_vfprintf_r+0x3a0>
  409220:	980d      	ldr	r0, [sp, #52]	; 0x34
  409222:	4649      	mov	r1, r9
  409224:	aa2b      	add	r2, sp, #172	; 0xac
  409226:	f7fb fd1f 	bl	404c68 <__sprint_r>
  40922a:	2800      	cmp	r0, #0
  40922c:	f47f ab16 	bne.w	40885c <_vfprintf_r+0x22c>
  409230:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409234:	ae38      	add	r6, sp, #224	; 0xe0
  409236:	f7ff bbdc 	b.w	4089f2 <_vfprintf_r+0x3c2>
  40923a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40923c:	af38      	add	r7, sp, #224	; 0xe0
  40923e:	f7ff bb4f 	b.w	4088e0 <_vfprintf_r+0x2b0>
  409242:	2302      	movs	r3, #2
  409244:	f7ff bb28 	b.w	408898 <_vfprintf_r+0x268>
  409248:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40924a:	2b00      	cmp	r3, #0
  40924c:	f340 8249 	ble.w	4096e2 <_vfprintf_r+0x10b2>
  409250:	9c11      	ldr	r4, [sp, #68]	; 0x44
  409252:	9d14      	ldr	r5, [sp, #80]	; 0x50
  409254:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  409258:	42ac      	cmp	r4, r5
  40925a:	bfa8      	it	ge
  40925c:	462c      	movge	r4, r5
  40925e:	2c00      	cmp	r4, #0
  409260:	44b8      	add	r8, r7
  409262:	dd0b      	ble.n	40927c <_vfprintf_r+0xc4c>
  409264:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409266:	44a4      	add	ip, r4
  409268:	3301      	adds	r3, #1
  40926a:	2b07      	cmp	r3, #7
  40926c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  409270:	6037      	str	r7, [r6, #0]
  409272:	6074      	str	r4, [r6, #4]
  409274:	932c      	str	r3, [sp, #176]	; 0xb0
  409276:	f300 82f0 	bgt.w	40985a <_vfprintf_r+0x122a>
  40927a:	3608      	adds	r6, #8
  40927c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40927e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  409282:	1b2c      	subs	r4, r5, r4
  409284:	2c00      	cmp	r4, #0
  409286:	f340 80ad 	ble.w	4093e4 <_vfprintf_r+0xdb4>
  40928a:	2c10      	cmp	r4, #16
  40928c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40928e:	f8df a6d8 	ldr.w	sl, [pc, #1752]	; 409968 <_vfprintf_r+0x1338>
  409292:	f340 820d 	ble.w	4096b0 <_vfprintf_r+0x1080>
  409296:	4651      	mov	r1, sl
  409298:	2510      	movs	r5, #16
  40929a:	46ba      	mov	sl, r7
  40929c:	4662      	mov	r2, ip
  40929e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  4092a2:	460f      	mov	r7, r1
  4092a4:	e004      	b.n	4092b0 <_vfprintf_r+0xc80>
  4092a6:	3608      	adds	r6, #8
  4092a8:	3c10      	subs	r4, #16
  4092aa:	2c10      	cmp	r4, #16
  4092ac:	f340 81fc 	ble.w	4096a8 <_vfprintf_r+0x1078>
  4092b0:	3301      	adds	r3, #1
  4092b2:	3210      	adds	r2, #16
  4092b4:	2b07      	cmp	r3, #7
  4092b6:	922d      	str	r2, [sp, #180]	; 0xb4
  4092b8:	932c      	str	r3, [sp, #176]	; 0xb0
  4092ba:	6037      	str	r7, [r6, #0]
  4092bc:	6075      	str	r5, [r6, #4]
  4092be:	ddf2      	ble.n	4092a6 <_vfprintf_r+0xc76>
  4092c0:	4658      	mov	r0, fp
  4092c2:	4649      	mov	r1, r9
  4092c4:	aa2b      	add	r2, sp, #172	; 0xac
  4092c6:	f7fb fccf 	bl	404c68 <__sprint_r>
  4092ca:	2800      	cmp	r0, #0
  4092cc:	f47f aac6 	bne.w	40885c <_vfprintf_r+0x22c>
  4092d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4092d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4092d4:	ae38      	add	r6, sp, #224	; 0xe0
  4092d6:	e7e7      	b.n	4092a8 <_vfprintf_r+0xc78>
  4092d8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4092da:	4649      	mov	r1, r9
  4092dc:	aa2b      	add	r2, sp, #172	; 0xac
  4092de:	f7fb fcc3 	bl	404c68 <__sprint_r>
  4092e2:	2800      	cmp	r0, #0
  4092e4:	f47f aaba 	bne.w	40885c <_vfprintf_r+0x22c>
  4092e8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4092ec:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4092f0:	ae38      	add	r6, sp, #224	; 0xe0
  4092f2:	f7ff bb5a 	b.w	4089aa <_vfprintf_r+0x37a>
  4092f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4092f8:	2301      	movs	r3, #1
  4092fa:	682c      	ldr	r4, [r5, #0]
  4092fc:	3504      	adds	r5, #4
  4092fe:	950f      	str	r5, [sp, #60]	; 0x3c
  409300:	2500      	movs	r5, #0
  409302:	f7ff bac9 	b.w	408898 <_vfprintf_r+0x268>
  409306:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409308:	1e5f      	subs	r7, r3, #1
  40930a:	2f00      	cmp	r7, #0
  40930c:	f77f af4b 	ble.w	4091a6 <_vfprintf_r+0xb76>
  409310:	2f10      	cmp	r7, #16
  409312:	f8df a654 	ldr.w	sl, [pc, #1620]	; 409968 <_vfprintf_r+0x1338>
  409316:	f340 80ef 	ble.w	4094f8 <_vfprintf_r+0xec8>
  40931a:	f04f 0810 	mov.w	r8, #16
  40931e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  409322:	e004      	b.n	40932e <_vfprintf_r+0xcfe>
  409324:	3608      	adds	r6, #8
  409326:	3f10      	subs	r7, #16
  409328:	2f10      	cmp	r7, #16
  40932a:	f340 80e5 	ble.w	4094f8 <_vfprintf_r+0xec8>
  40932e:	3401      	adds	r4, #1
  409330:	3510      	adds	r5, #16
  409332:	2c07      	cmp	r4, #7
  409334:	952d      	str	r5, [sp, #180]	; 0xb4
  409336:	942c      	str	r4, [sp, #176]	; 0xb0
  409338:	f8c6 a000 	str.w	sl, [r6]
  40933c:	f8c6 8004 	str.w	r8, [r6, #4]
  409340:	ddf0      	ble.n	409324 <_vfprintf_r+0xcf4>
  409342:	4658      	mov	r0, fp
  409344:	4649      	mov	r1, r9
  409346:	aa2b      	add	r2, sp, #172	; 0xac
  409348:	f7fb fc8e 	bl	404c68 <__sprint_r>
  40934c:	2800      	cmp	r0, #0
  40934e:	f47f aa85 	bne.w	40885c <_vfprintf_r+0x22c>
  409352:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
  409354:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  409356:	ae38      	add	r6, sp, #224	; 0xe0
  409358:	e7e5      	b.n	409326 <_vfprintf_r+0xcf6>
  40935a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40935c:	682c      	ldr	r4, [r5, #0]
  40935e:	3504      	adds	r5, #4
  409360:	950f      	str	r5, [sp, #60]	; 0x3c
  409362:	17e5      	asrs	r5, r4, #31
  409364:	4622      	mov	r2, r4
  409366:	462b      	mov	r3, r5
  409368:	e50f      	b.n	408d8a <_vfprintf_r+0x75a>
  40936a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40936c:	682c      	ldr	r4, [r5, #0]
  40936e:	3504      	adds	r5, #4
  409370:	950f      	str	r5, [sp, #60]	; 0x3c
  409372:	2500      	movs	r5, #0
  409374:	f7ff ba90 	b.w	408898 <_vfprintf_r+0x268>
  409378:	4694      	mov	ip, r2
  40937a:	46ba      	mov	sl, r7
  40937c:	3301      	adds	r3, #1
  40937e:	44a4      	add	ip, r4
  409380:	2b07      	cmp	r3, #7
  409382:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  409386:	932c      	str	r3, [sp, #176]	; 0xb0
  409388:	f8c6 a000 	str.w	sl, [r6]
  40938c:	6074      	str	r4, [r6, #4]
  40938e:	f77f ab85 	ble.w	408a9c <_vfprintf_r+0x46c>
  409392:	e716      	b.n	4091c2 <_vfprintf_r+0xb92>
  409394:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  409398:	4620      	mov	r0, r4
  40939a:	4629      	mov	r1, r5
  40939c:	220a      	movs	r2, #10
  40939e:	2300      	movs	r3, #0
  4093a0:	f001 fa5a 	bl	40a858 <__aeabi_uldivmod>
  4093a4:	3230      	adds	r2, #48	; 0x30
  4093a6:	f88b 2000 	strb.w	r2, [fp]
  4093aa:	4620      	mov	r0, r4
  4093ac:	4629      	mov	r1, r5
  4093ae:	220a      	movs	r2, #10
  4093b0:	2300      	movs	r3, #0
  4093b2:	f001 fa51 	bl	40a858 <__aeabi_uldivmod>
  4093b6:	4604      	mov	r4, r0
  4093b8:	460d      	mov	r5, r1
  4093ba:	ea54 0c05 	orrs.w	ip, r4, r5
  4093be:	465f      	mov	r7, fp
  4093c0:	f10b 3bff 	add.w	fp, fp, #4294967295
  4093c4:	d1e8      	bne.n	409398 <_vfprintf_r+0xd68>
  4093c6:	9d08      	ldr	r5, [sp, #32]
  4093c8:	1bec      	subs	r4, r5, r7
  4093ca:	f7ff ba89 	b.w	4088e0 <_vfprintf_r+0x2b0>
  4093ce:	980d      	ldr	r0, [sp, #52]	; 0x34
  4093d0:	4649      	mov	r1, r9
  4093d2:	aa2b      	add	r2, sp, #172	; 0xac
  4093d4:	f7fb fc48 	bl	404c68 <__sprint_r>
  4093d8:	2800      	cmp	r0, #0
  4093da:	f47f aa3f 	bne.w	40885c <_vfprintf_r+0x22c>
  4093de:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4093e2:	ae38      	add	r6, sp, #224	; 0xe0
  4093e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4093e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4093e8:	442f      	add	r7, r5
  4093ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4093ec:	42ac      	cmp	r4, r5
  4093ee:	db40      	blt.n	409472 <_vfprintf_r+0xe42>
  4093f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4093f2:	07e8      	lsls	r0, r5, #31
  4093f4:	d43d      	bmi.n	409472 <_vfprintf_r+0xe42>
  4093f6:	9811      	ldr	r0, [sp, #68]	; 0x44
  4093f8:	ebc7 0508 	rsb	r5, r7, r8
  4093fc:	1b04      	subs	r4, r0, r4
  4093fe:	42ac      	cmp	r4, r5
  409400:	bfb8      	it	lt
  409402:	4625      	movlt	r5, r4
  409404:	2d00      	cmp	r5, #0
  409406:	dd0b      	ble.n	409420 <_vfprintf_r+0xdf0>
  409408:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40940a:	44ac      	add	ip, r5
  40940c:	3301      	adds	r3, #1
  40940e:	2b07      	cmp	r3, #7
  409410:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  409414:	6037      	str	r7, [r6, #0]
  409416:	6075      	str	r5, [r6, #4]
  409418:	932c      	str	r3, [sp, #176]	; 0xb0
  40941a:	f300 8254 	bgt.w	4098c6 <_vfprintf_r+0x1296>
  40941e:	3608      	adds	r6, #8
  409420:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  409424:	1b64      	subs	r4, r4, r5
  409426:	2c00      	cmp	r4, #0
  409428:	f77f ab39 	ble.w	408a9e <_vfprintf_r+0x46e>
  40942c:	2c10      	cmp	r4, #16
  40942e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409430:	f8df a534 	ldr.w	sl, [pc, #1332]	; 409968 <_vfprintf_r+0x1338>
  409434:	dda2      	ble.n	40937c <_vfprintf_r+0xd4c>
  409436:	2510      	movs	r5, #16
  409438:	4662      	mov	r2, ip
  40943a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40943e:	4657      	mov	r7, sl
  409440:	e003      	b.n	40944a <_vfprintf_r+0xe1a>
  409442:	3608      	adds	r6, #8
  409444:	3c10      	subs	r4, #16
  409446:	2c10      	cmp	r4, #16
  409448:	dd96      	ble.n	409378 <_vfprintf_r+0xd48>
  40944a:	3301      	adds	r3, #1
  40944c:	3210      	adds	r2, #16
  40944e:	2b07      	cmp	r3, #7
  409450:	922d      	str	r2, [sp, #180]	; 0xb4
  409452:	932c      	str	r3, [sp, #176]	; 0xb0
  409454:	6037      	str	r7, [r6, #0]
  409456:	6075      	str	r5, [r6, #4]
  409458:	ddf3      	ble.n	409442 <_vfprintf_r+0xe12>
  40945a:	4640      	mov	r0, r8
  40945c:	4649      	mov	r1, r9
  40945e:	aa2b      	add	r2, sp, #172	; 0xac
  409460:	f7fb fc02 	bl	404c68 <__sprint_r>
  409464:	2800      	cmp	r0, #0
  409466:	f47f a9f9 	bne.w	40885c <_vfprintf_r+0x22c>
  40946a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40946c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40946e:	ae38      	add	r6, sp, #224	; 0xe0
  409470:	e7e8      	b.n	409444 <_vfprintf_r+0xe14>
  409472:	9d18      	ldr	r5, [sp, #96]	; 0x60
  409474:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409476:	44ac      	add	ip, r5
  409478:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40947a:	3301      	adds	r3, #1
  40947c:	6035      	str	r5, [r6, #0]
  40947e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  409480:	2b07      	cmp	r3, #7
  409482:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  409486:	6075      	str	r5, [r6, #4]
  409488:	932c      	str	r3, [sp, #176]	; 0xb0
  40948a:	f300 8200 	bgt.w	40988e <_vfprintf_r+0x125e>
  40948e:	3608      	adds	r6, #8
  409490:	e7b1      	b.n	4093f6 <_vfprintf_r+0xdc6>
  409492:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409494:	07e9      	lsls	r1, r5, #31
  409496:	f53f ae58 	bmi.w	40914a <_vfprintf_r+0xb1a>
  40949a:	3401      	adds	r4, #1
  40949c:	f10c 0501 	add.w	r5, ip, #1
  4094a0:	2301      	movs	r3, #1
  4094a2:	2c07      	cmp	r4, #7
  4094a4:	952d      	str	r5, [sp, #180]	; 0xb4
  4094a6:	942c      	str	r4, [sp, #176]	; 0xb0
  4094a8:	6037      	str	r7, [r6, #0]
  4094aa:	6073      	str	r3, [r6, #4]
  4094ac:	f77f ae7a 	ble.w	4091a4 <_vfprintf_r+0xb74>
  4094b0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4094b2:	4649      	mov	r1, r9
  4094b4:	aa2b      	add	r2, sp, #172	; 0xac
  4094b6:	f7fb fbd7 	bl	404c68 <__sprint_r>
  4094ba:	2800      	cmp	r0, #0
  4094bc:	f47f a9ce 	bne.w	40885c <_vfprintf_r+0x22c>
  4094c0:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
  4094c2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4094c4:	ae38      	add	r6, sp, #224	; 0xe0
  4094c6:	e66e      	b.n	4091a6 <_vfprintf_r+0xb76>
  4094c8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4094ca:	4649      	mov	r1, r9
  4094cc:	aa2b      	add	r2, sp, #172	; 0xac
  4094ce:	f7fb fbcb 	bl	404c68 <__sprint_r>
  4094d2:	2800      	cmp	r0, #0
  4094d4:	f47f a9c2 	bne.w	40885c <_vfprintf_r+0x22c>
  4094d8:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
  4094da:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4094dc:	ae38      	add	r6, sp, #224	; 0xe0
  4094de:	e640      	b.n	409162 <_vfprintf_r+0xb32>
  4094e0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4094e2:	4649      	mov	r1, r9
  4094e4:	aa2b      	add	r2, sp, #172	; 0xac
  4094e6:	f7fb fbbf 	bl	404c68 <__sprint_r>
  4094ea:	2800      	cmp	r0, #0
  4094ec:	f47f a9b6 	bne.w	40885c <_vfprintf_r+0x22c>
  4094f0:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
  4094f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4094f4:	ae38      	add	r6, sp, #224	; 0xe0
  4094f6:	e640      	b.n	40917a <_vfprintf_r+0xb4a>
  4094f8:	3401      	adds	r4, #1
  4094fa:	443d      	add	r5, r7
  4094fc:	2c07      	cmp	r4, #7
  4094fe:	952d      	str	r5, [sp, #180]	; 0xb4
  409500:	942c      	str	r4, [sp, #176]	; 0xb0
  409502:	f8c6 a000 	str.w	sl, [r6]
  409506:	6077      	str	r7, [r6, #4]
  409508:	f77f ae4c 	ble.w	4091a4 <_vfprintf_r+0xb74>
  40950c:	e7d0      	b.n	4094b0 <_vfprintf_r+0xe80>
  40950e:	980d      	ldr	r0, [sp, #52]	; 0x34
  409510:	4649      	mov	r1, r9
  409512:	aa2b      	add	r2, sp, #172	; 0xac
  409514:	f7fb fba8 	bl	404c68 <__sprint_r>
  409518:	2800      	cmp	r0, #0
  40951a:	f47f a99f 	bne.w	40885c <_vfprintf_r+0x22c>
  40951e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409522:	ae38      	add	r6, sp, #224	; 0xe0
  409524:	f7ff ba69 	b.w	4089fa <_vfprintf_r+0x3ca>
  409528:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40952c:	4264      	negs	r4, r4
  40952e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  409532:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  409536:	2301      	movs	r3, #1
  409538:	f7ff b9b2 	b.w	4088a0 <_vfprintf_r+0x270>
  40953c:	f7fe ff7c 	bl	408438 <__fpclassifyd>
  409540:	2800      	cmp	r0, #0
  409542:	f000 811b 	beq.w	40977c <_vfprintf_r+0x114c>
  409546:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409548:	f028 0a20 	bic.w	sl, r8, #32
  40954c:	3501      	adds	r5, #1
  40954e:	f000 826c 	beq.w	409a2a <_vfprintf_r+0x13fa>
  409552:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  409556:	d104      	bne.n	409562 <_vfprintf_r+0xf32>
  409558:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40955a:	2d00      	cmp	r5, #0
  40955c:	bf08      	it	eq
  40955e:	2501      	moveq	r5, #1
  409560:	950b      	str	r5, [sp, #44]	; 0x2c
  409562:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  409566:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40956a:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  40956e:	2b00      	cmp	r3, #0
  409570:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  409574:	f2c0 8250 	blt.w	409a18 <_vfprintf_r+0x13e8>
  409578:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40957c:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  409580:	f04f 0b00 	mov.w	fp, #0
  409584:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  409588:	f000 8234 	beq.w	4099f4 <_vfprintf_r+0x13c4>
  40958c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  409590:	f000 828c 	beq.w	409aac <_vfprintf_r+0x147c>
  409594:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  409598:	bf0a      	itet	eq
  40959a:	9c0b      	ldreq	r4, [sp, #44]	; 0x2c
  40959c:	9d0b      	ldrne	r5, [sp, #44]	; 0x2c
  40959e:	1c65      	addeq	r5, r4, #1
  4095a0:	2002      	movs	r0, #2
  4095a2:	a925      	add	r1, sp, #148	; 0x94
  4095a4:	aa26      	add	r2, sp, #152	; 0x98
  4095a6:	ab29      	add	r3, sp, #164	; 0xa4
  4095a8:	e88d 0021 	stmia.w	sp, {r0, r5}
  4095ac:	9203      	str	r2, [sp, #12]
  4095ae:	9304      	str	r3, [sp, #16]
  4095b0:	9102      	str	r1, [sp, #8]
  4095b2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4095b4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  4095b8:	f7fc fae2 	bl	405b80 <_dtoa_r>
  4095bc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4095c0:	4607      	mov	r7, r0
  4095c2:	d002      	beq.n	4095ca <_vfprintf_r+0xf9a>
  4095c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4095c8:	d105      	bne.n	4095d6 <_vfprintf_r+0xfa6>
  4095ca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4095ce:	f01c 0f01 	tst.w	ip, #1
  4095d2:	f000 823b 	beq.w	409a4c <_vfprintf_r+0x141c>
  4095d6:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  4095da:	eb07 0405 	add.w	r4, r7, r5
  4095de:	f000 81a8 	beq.w	409932 <_vfprintf_r+0x1302>
  4095e2:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4095e6:	2200      	movs	r2, #0
  4095e8:	2300      	movs	r3, #0
  4095ea:	f001 f8db 	bl	40a7a4 <__aeabi_dcmpeq>
  4095ee:	2800      	cmp	r0, #0
  4095f0:	f040 819d 	bne.w	40992e <_vfprintf_r+0x12fe>
  4095f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4095f6:	429c      	cmp	r4, r3
  4095f8:	d906      	bls.n	409608 <_vfprintf_r+0xfd8>
  4095fa:	2130      	movs	r1, #48	; 0x30
  4095fc:	1c5a      	adds	r2, r3, #1
  4095fe:	9229      	str	r2, [sp, #164]	; 0xa4
  409600:	7019      	strb	r1, [r3, #0]
  409602:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  409604:	429c      	cmp	r4, r3
  409606:	d8f9      	bhi.n	4095fc <_vfprintf_r+0xfcc>
  409608:	1bdb      	subs	r3, r3, r7
  40960a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40960e:	9311      	str	r3, [sp, #68]	; 0x44
  409610:	f000 8174 	beq.w	4098fc <_vfprintf_r+0x12cc>
  409614:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  409618:	f340 8294 	ble.w	409b44 <_vfprintf_r+0x1514>
  40961c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  409620:	f000 8206 	beq.w	409a30 <_vfprintf_r+0x1400>
  409624:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409626:	9414      	str	r4, [sp, #80]	; 0x50
  409628:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40962a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40962c:	42ac      	cmp	r4, r5
  40962e:	f300 81d4 	bgt.w	4099da <_vfprintf_r+0x13aa>
  409632:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  409636:	f01c 0f01 	tst.w	ip, #1
  40963a:	f040 8253 	bne.w	409ae4 <_vfprintf_r+0x14b4>
  40963e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  409642:	462c      	mov	r4, r5
  409644:	f04f 0867 	mov.w	r8, #103	; 0x67
  409648:	f1bb 0f00 	cmp.w	fp, #0
  40964c:	f040 8164 	bne.w	409918 <_vfprintf_r+0x12e8>
  409650:	9d12      	ldr	r5, [sp, #72]	; 0x48
  409652:	930c      	str	r3, [sp, #48]	; 0x30
  409654:	9509      	str	r5, [sp, #36]	; 0x24
  409656:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  40965a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40965e:	f7ff b948 	b.w	4088f2 <_vfprintf_r+0x2c2>
  409662:	9c09      	ldr	r4, [sp, #36]	; 0x24
  409664:	0664      	lsls	r4, r4, #25
  409666:	f140 80a6 	bpl.w	4097b6 <_vfprintf_r+0x1186>
  40966a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  40966e:	2500      	movs	r5, #0
  409670:	f8bc 4000 	ldrh.w	r4, [ip]
  409674:	f10c 0c04 	add.w	ip, ip, #4
  409678:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  40967c:	f7ff bae7 	b.w	408c4e <_vfprintf_r+0x61e>
  409680:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  409684:	f01c 0f10 	tst.w	ip, #16
  409688:	f040 808d 	bne.w	4097a6 <_vfprintf_r+0x1176>
  40968c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  409690:	f01c 0f40 	tst.w	ip, #64	; 0x40
  409694:	f000 8126 	beq.w	4098e4 <_vfprintf_r+0x12b4>
  409698:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40969a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40969c:	6823      	ldr	r3, [r4, #0]
  40969e:	3404      	adds	r4, #4
  4096a0:	940f      	str	r4, [sp, #60]	; 0x3c
  4096a2:	801d      	strh	r5, [r3, #0]
  4096a4:	f7ff b806 	b.w	4086b4 <_vfprintf_r+0x84>
  4096a8:	4694      	mov	ip, r2
  4096aa:	463a      	mov	r2, r7
  4096ac:	4657      	mov	r7, sl
  4096ae:	4692      	mov	sl, r2
  4096b0:	3301      	adds	r3, #1
  4096b2:	44a4      	add	ip, r4
  4096b4:	2b07      	cmp	r3, #7
  4096b6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4096ba:	932c      	str	r3, [sp, #176]	; 0xb0
  4096bc:	f8c6 a000 	str.w	sl, [r6]
  4096c0:	6074      	str	r4, [r6, #4]
  4096c2:	f73f ae84 	bgt.w	4093ce <_vfprintf_r+0xd9e>
  4096c6:	3608      	adds	r6, #8
  4096c8:	e68c      	b.n	4093e4 <_vfprintf_r+0xdb4>
  4096ca:	980d      	ldr	r0, [sp, #52]	; 0x34
  4096cc:	4649      	mov	r1, r9
  4096ce:	aa2b      	add	r2, sp, #172	; 0xac
  4096d0:	f7fb faca 	bl	404c68 <__sprint_r>
  4096d4:	2800      	cmp	r0, #0
  4096d6:	f47f a8c1 	bne.w	40885c <_vfprintf_r+0x22c>
  4096da:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4096de:	ae38      	add	r6, sp, #224	; 0xe0
  4096e0:	e493      	b.n	40900a <_vfprintf_r+0x9da>
  4096e2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4096e4:	499c      	ldr	r1, [pc, #624]	; (409958 <_vfprintf_r+0x1328>)
  4096e6:	3201      	adds	r2, #1
  4096e8:	f10c 0c01 	add.w	ip, ip, #1
  4096ec:	2001      	movs	r0, #1
  4096ee:	2a07      	cmp	r2, #7
  4096f0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4096f4:	922c      	str	r2, [sp, #176]	; 0xb0
  4096f6:	6031      	str	r1, [r6, #0]
  4096f8:	6070      	str	r0, [r6, #4]
  4096fa:	dc63      	bgt.n	4097c4 <_vfprintf_r+0x1194>
  4096fc:	3608      	adds	r6, #8
  4096fe:	461c      	mov	r4, r3
  409700:	b92c      	cbnz	r4, 40970e <_vfprintf_r+0x10de>
  409702:	9d11      	ldr	r5, [sp, #68]	; 0x44
  409704:	b91d      	cbnz	r5, 40970e <_vfprintf_r+0x10de>
  409706:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409708:	07ed      	lsls	r5, r5, #31
  40970a:	f57f a9c8 	bpl.w	408a9e <_vfprintf_r+0x46e>
  40970e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409710:	9d15      	ldr	r5, [sp, #84]	; 0x54
  409712:	9a18      	ldr	r2, [sp, #96]	; 0x60
  409714:	3301      	adds	r3, #1
  409716:	6035      	str	r5, [r6, #0]
  409718:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40971a:	4462      	add	r2, ip
  40971c:	2b07      	cmp	r3, #7
  40971e:	922d      	str	r2, [sp, #180]	; 0xb4
  409720:	6075      	str	r5, [r6, #4]
  409722:	932c      	str	r3, [sp, #176]	; 0xb0
  409724:	f300 8147 	bgt.w	4099b6 <_vfprintf_r+0x1386>
  409728:	3608      	adds	r6, #8
  40972a:	4264      	negs	r4, r4
  40972c:	2c00      	cmp	r4, #0
  40972e:	f340 8086 	ble.w	40983e <_vfprintf_r+0x120e>
  409732:	2c10      	cmp	r4, #16
  409734:	f8df a230 	ldr.w	sl, [pc, #560]	; 409968 <_vfprintf_r+0x1338>
  409738:	f340 809e 	ble.w	409878 <_vfprintf_r+0x1248>
  40973c:	4651      	mov	r1, sl
  40973e:	2510      	movs	r5, #16
  409740:	46ba      	mov	sl, r7
  409742:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  409746:	460f      	mov	r7, r1
  409748:	e004      	b.n	409754 <_vfprintf_r+0x1124>
  40974a:	3608      	adds	r6, #8
  40974c:	3c10      	subs	r4, #16
  40974e:	2c10      	cmp	r4, #16
  409750:	f340 808f 	ble.w	409872 <_vfprintf_r+0x1242>
  409754:	3301      	adds	r3, #1
  409756:	3210      	adds	r2, #16
  409758:	2b07      	cmp	r3, #7
  40975a:	922d      	str	r2, [sp, #180]	; 0xb4
  40975c:	932c      	str	r3, [sp, #176]	; 0xb0
  40975e:	6037      	str	r7, [r6, #0]
  409760:	6075      	str	r5, [r6, #4]
  409762:	ddf2      	ble.n	40974a <_vfprintf_r+0x111a>
  409764:	4640      	mov	r0, r8
  409766:	4649      	mov	r1, r9
  409768:	aa2b      	add	r2, sp, #172	; 0xac
  40976a:	f7fb fa7d 	bl	404c68 <__sprint_r>
  40976e:	2800      	cmp	r0, #0
  409770:	f47f a874 	bne.w	40885c <_vfprintf_r+0x22c>
  409774:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  409776:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409778:	ae38      	add	r6, sp, #224	; 0xe0
  40977a:	e7e7      	b.n	40974c <_vfprintf_r+0x111c>
  40977c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40977e:	4f77      	ldr	r7, [pc, #476]	; (40995c <_vfprintf_r+0x132c>)
  409780:	4b77      	ldr	r3, [pc, #476]	; (409960 <_vfprintf_r+0x1330>)
  409782:	f04f 0c03 	mov.w	ip, #3
  409786:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40978a:	9409      	str	r4, [sp, #36]	; 0x24
  40978c:	900b      	str	r0, [sp, #44]	; 0x2c
  40978e:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  409792:	9014      	str	r0, [sp, #80]	; 0x50
  409794:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  409798:	bfd8      	it	le
  40979a:	461f      	movle	r7, r3
  40979c:	4664      	mov	r4, ip
  40979e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4097a2:	f7ff b8a6 	b.w	4088f2 <_vfprintf_r+0x2c2>
  4097a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4097a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4097aa:	6823      	ldr	r3, [r4, #0]
  4097ac:	3404      	adds	r4, #4
  4097ae:	940f      	str	r4, [sp, #60]	; 0x3c
  4097b0:	601d      	str	r5, [r3, #0]
  4097b2:	f7fe bf7f 	b.w	4086b4 <_vfprintf_r+0x84>
  4097b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4097b8:	682c      	ldr	r4, [r5, #0]
  4097ba:	3504      	adds	r5, #4
  4097bc:	950f      	str	r5, [sp, #60]	; 0x3c
  4097be:	2500      	movs	r5, #0
  4097c0:	f7ff ba45 	b.w	408c4e <_vfprintf_r+0x61e>
  4097c4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4097c6:	4649      	mov	r1, r9
  4097c8:	aa2b      	add	r2, sp, #172	; 0xac
  4097ca:	f7fb fa4d 	bl	404c68 <__sprint_r>
  4097ce:	2800      	cmp	r0, #0
  4097d0:	f47f a844 	bne.w	40885c <_vfprintf_r+0x22c>
  4097d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4097d6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4097da:	ae38      	add	r6, sp, #224	; 0xe0
  4097dc:	e790      	b.n	409700 <_vfprintf_r+0x10d0>
  4097de:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4097e0:	3301      	adds	r3, #1
  4097e2:	f044 0420 	orr.w	r4, r4, #32
  4097e6:	9409      	str	r4, [sp, #36]	; 0x24
  4097e8:	f891 8001 	ldrb.w	r8, [r1, #1]
  4097ec:	f7fe bf99 	b.w	408722 <_vfprintf_r+0xf2>
  4097f0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4097f2:	4649      	mov	r1, r9
  4097f4:	aa2b      	add	r2, sp, #172	; 0xac
  4097f6:	f7fb fa37 	bl	404c68 <__sprint_r>
  4097fa:	2800      	cmp	r0, #0
  4097fc:	f47f a82e 	bne.w	40885c <_vfprintf_r+0x22c>
  409800:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409804:	ae38      	add	r6, sp, #224	; 0xe0
  409806:	e416      	b.n	409036 <_vfprintf_r+0xa06>
  409808:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40980c:	f7f9 ff1e 	bl	40364c <strlen>
  409810:	950f      	str	r5, [sp, #60]	; 0x3c
  409812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409814:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  409818:	4604      	mov	r4, r0
  40981a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  40981e:	9514      	str	r5, [sp, #80]	; 0x50
  409820:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  409824:	f7ff b865 	b.w	4088f2 <_vfprintf_r+0x2c2>
  409828:	980d      	ldr	r0, [sp, #52]	; 0x34
  40982a:	4649      	mov	r1, r9
  40982c:	aa2b      	add	r2, sp, #172	; 0xac
  40982e:	f7fb fa1b 	bl	404c68 <__sprint_r>
  409832:	2800      	cmp	r0, #0
  409834:	f47f a812 	bne.w	40885c <_vfprintf_r+0x22c>
  409838:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40983a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40983c:	ae38      	add	r6, sp, #224	; 0xe0
  40983e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  409842:	3301      	adds	r3, #1
  409844:	9c11      	ldr	r4, [sp, #68]	; 0x44
  409846:	4494      	add	ip, r2
  409848:	2b07      	cmp	r3, #7
  40984a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40984e:	932c      	str	r3, [sp, #176]	; 0xb0
  409850:	6037      	str	r7, [r6, #0]
  409852:	6074      	str	r4, [r6, #4]
  409854:	f77f a922 	ble.w	408a9c <_vfprintf_r+0x46c>
  409858:	e4b3      	b.n	4091c2 <_vfprintf_r+0xb92>
  40985a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40985c:	4649      	mov	r1, r9
  40985e:	aa2b      	add	r2, sp, #172	; 0xac
  409860:	f7fb fa02 	bl	404c68 <__sprint_r>
  409864:	2800      	cmp	r0, #0
  409866:	f47e aff9 	bne.w	40885c <_vfprintf_r+0x22c>
  40986a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40986e:	ae38      	add	r6, sp, #224	; 0xe0
  409870:	e504      	b.n	40927c <_vfprintf_r+0xc4c>
  409872:	4639      	mov	r1, r7
  409874:	4657      	mov	r7, sl
  409876:	468a      	mov	sl, r1
  409878:	3301      	adds	r3, #1
  40987a:	4422      	add	r2, r4
  40987c:	2b07      	cmp	r3, #7
  40987e:	922d      	str	r2, [sp, #180]	; 0xb4
  409880:	932c      	str	r3, [sp, #176]	; 0xb0
  409882:	f8c6 a000 	str.w	sl, [r6]
  409886:	6074      	str	r4, [r6, #4]
  409888:	dcce      	bgt.n	409828 <_vfprintf_r+0x11f8>
  40988a:	3608      	adds	r6, #8
  40988c:	e7d7      	b.n	40983e <_vfprintf_r+0x120e>
  40988e:	980d      	ldr	r0, [sp, #52]	; 0x34
  409890:	4649      	mov	r1, r9
  409892:	aa2b      	add	r2, sp, #172	; 0xac
  409894:	f7fb f9e8 	bl	404c68 <__sprint_r>
  409898:	2800      	cmp	r0, #0
  40989a:	f47e afdf 	bne.w	40885c <_vfprintf_r+0x22c>
  40989e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4098a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4098a4:	ae38      	add	r6, sp, #224	; 0xe0
  4098a6:	e5a6      	b.n	4093f6 <_vfprintf_r+0xdc6>
  4098a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4098aa:	46ba      	mov	sl, r7
  4098ac:	2c06      	cmp	r4, #6
  4098ae:	bf28      	it	cs
  4098b0:	2406      	movcs	r4, #6
  4098b2:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4098b6:	970b      	str	r7, [sp, #44]	; 0x2c
  4098b8:	9714      	str	r7, [sp, #80]	; 0x50
  4098ba:	950f      	str	r5, [sp, #60]	; 0x3c
  4098bc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  4098c0:	4f28      	ldr	r7, [pc, #160]	; (409964 <_vfprintf_r+0x1334>)
  4098c2:	f7ff b816 	b.w	4088f2 <_vfprintf_r+0x2c2>
  4098c6:	980d      	ldr	r0, [sp, #52]	; 0x34
  4098c8:	4649      	mov	r1, r9
  4098ca:	aa2b      	add	r2, sp, #172	; 0xac
  4098cc:	f7fb f9cc 	bl	404c68 <__sprint_r>
  4098d0:	2800      	cmp	r0, #0
  4098d2:	f47e afc3 	bne.w	40885c <_vfprintf_r+0x22c>
  4098d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4098d8:	9911      	ldr	r1, [sp, #68]	; 0x44
  4098da:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4098de:	1b0c      	subs	r4, r1, r4
  4098e0:	ae38      	add	r6, sp, #224	; 0xe0
  4098e2:	e59d      	b.n	409420 <_vfprintf_r+0xdf0>
  4098e4:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  4098e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4098ea:	f8dc 3000 	ldr.w	r3, [ip]
  4098ee:	f10c 0c04 	add.w	ip, ip, #4
  4098f2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  4098f6:	601c      	str	r4, [r3, #0]
  4098f8:	f7fe bedc 	b.w	4086b4 <_vfprintf_r+0x84>
  4098fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4098fe:	1cdc      	adds	r4, r3, #3
  409900:	db34      	blt.n	40996c <_vfprintf_r+0x133c>
  409902:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  409904:	429c      	cmp	r4, r3
  409906:	db31      	blt.n	40996c <_vfprintf_r+0x133c>
  409908:	9314      	str	r3, [sp, #80]	; 0x50
  40990a:	e68d      	b.n	409628 <_vfprintf_r+0xff8>
  40990c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  409910:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  409914:	f7ff bacb 	b.w	408eae <_vfprintf_r+0x87e>
  409918:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40991a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40991e:	9509      	str	r5, [sp, #36]	; 0x24
  409920:	2500      	movs	r5, #0
  409922:	930c      	str	r3, [sp, #48]	; 0x30
  409924:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  409928:	950b      	str	r5, [sp, #44]	; 0x2c
  40992a:	f7fe bfe5 	b.w	4088f8 <_vfprintf_r+0x2c8>
  40992e:	4623      	mov	r3, r4
  409930:	e66a      	b.n	409608 <_vfprintf_r+0xfd8>
  409932:	783b      	ldrb	r3, [r7, #0]
  409934:	2b30      	cmp	r3, #48	; 0x30
  409936:	f000 80c0 	beq.w	409aba <_vfprintf_r+0x148a>
  40993a:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40993c:	442c      	add	r4, r5
  40993e:	e650      	b.n	4095e2 <_vfprintf_r+0xfb2>
  409940:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409944:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  409948:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40994a:	950f      	str	r5, [sp, #60]	; 0x3c
  40994c:	900b      	str	r0, [sp, #44]	; 0x2c
  40994e:	9014      	str	r0, [sp, #80]	; 0x50
  409950:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  409954:	f7fe bfcd 	b.w	4088f2 <_vfprintf_r+0x2c2>
  409958:	0040b714 	.word	0x0040b714
  40995c:	0040b6e0 	.word	0x0040b6e0
  409960:	0040b6dc 	.word	0x0040b6dc
  409964:	0040b70c 	.word	0x0040b70c
  409968:	0040b874 	.word	0x0040b874
  40996c:	f1a8 0802 	sub.w	r8, r8, #2
  409970:	1e59      	subs	r1, r3, #1
  409972:	2900      	cmp	r1, #0
  409974:	9125      	str	r1, [sp, #148]	; 0x94
  409976:	bfba      	itte	lt
  409978:	4249      	neglt	r1, r1
  40997a:	232d      	movlt	r3, #45	; 0x2d
  40997c:	232b      	movge	r3, #43	; 0x2b
  40997e:	2909      	cmp	r1, #9
  409980:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  409984:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
  409988:	dc62      	bgt.n	409a50 <_vfprintf_r+0x1420>
  40998a:	2330      	movs	r3, #48	; 0x30
  40998c:	3130      	adds	r1, #48	; 0x30
  40998e:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
  409992:	f88d 109f 	strb.w	r1, [sp, #159]	; 0x9f
  409996:	ab28      	add	r3, sp, #160	; 0xa0
  409998:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40999a:	aa27      	add	r2, sp, #156	; 0x9c
  40999c:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40999e:	1a9a      	subs	r2, r3, r2
  4099a0:	2d01      	cmp	r5, #1
  4099a2:	9219      	str	r2, [sp, #100]	; 0x64
  4099a4:	4414      	add	r4, r2
  4099a6:	f340 80a4 	ble.w	409af2 <_vfprintf_r+0x14c2>
  4099aa:	3401      	adds	r4, #1
  4099ac:	2500      	movs	r5, #0
  4099ae:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4099b2:	9514      	str	r5, [sp, #80]	; 0x50
  4099b4:	e648      	b.n	409648 <_vfprintf_r+0x1018>
  4099b6:	980d      	ldr	r0, [sp, #52]	; 0x34
  4099b8:	4649      	mov	r1, r9
  4099ba:	aa2b      	add	r2, sp, #172	; 0xac
  4099bc:	f7fb f954 	bl	404c68 <__sprint_r>
  4099c0:	2800      	cmp	r0, #0
  4099c2:	f47e af4b 	bne.w	40885c <_vfprintf_r+0x22c>
  4099c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4099c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4099ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4099cc:	ae38      	add	r6, sp, #224	; 0xe0
  4099ce:	e6ac      	b.n	40972a <_vfprintf_r+0x10fa>
  4099d0:	2400      	movs	r4, #0
  4099d2:	4603      	mov	r3, r0
  4099d4:	940b      	str	r4, [sp, #44]	; 0x2c
  4099d6:	f7fe bea5 	b.w	408724 <_vfprintf_r+0xf4>
  4099da:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4099dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4099de:	2c00      	cmp	r4, #0
  4099e0:	bfd4      	ite	le
  4099e2:	f1c4 0402 	rsble	r4, r4, #2
  4099e6:	2401      	movgt	r4, #1
  4099e8:	442c      	add	r4, r5
  4099ea:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4099ee:	f04f 0867 	mov.w	r8, #103	; 0x67
  4099f2:	e629      	b.n	409648 <_vfprintf_r+0x1018>
  4099f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4099f6:	2003      	movs	r0, #3
  4099f8:	a925      	add	r1, sp, #148	; 0x94
  4099fa:	aa26      	add	r2, sp, #152	; 0x98
  4099fc:	ab29      	add	r3, sp, #164	; 0xa4
  4099fe:	9401      	str	r4, [sp, #4]
  409a00:	9000      	str	r0, [sp, #0]
  409a02:	9203      	str	r2, [sp, #12]
  409a04:	9304      	str	r3, [sp, #16]
  409a06:	9102      	str	r1, [sp, #8]
  409a08:	980d      	ldr	r0, [sp, #52]	; 0x34
  409a0a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  409a0e:	f7fc f8b7 	bl	405b80 <_dtoa_r>
  409a12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409a14:	4607      	mov	r7, r0
  409a16:	e5de      	b.n	4095d6 <_vfprintf_r+0xfa6>
  409a18:	9917      	ldr	r1, [sp, #92]	; 0x5c
  409a1a:	9816      	ldr	r0, [sp, #88]	; 0x58
  409a1c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  409a20:	9020      	str	r0, [sp, #128]	; 0x80
  409a22:	9121      	str	r1, [sp, #132]	; 0x84
  409a24:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  409a28:	e5ac      	b.n	409584 <_vfprintf_r+0xf54>
  409a2a:	2406      	movs	r4, #6
  409a2c:	940b      	str	r4, [sp, #44]	; 0x2c
  409a2e:	e598      	b.n	409562 <_vfprintf_r+0xf32>
  409a30:	9d25      	ldr	r5, [sp, #148]	; 0x94
  409a32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  409a34:	2d00      	cmp	r5, #0
  409a36:	9514      	str	r5, [sp, #80]	; 0x50
  409a38:	dd78      	ble.n	409b2c <_vfprintf_r+0x14fc>
  409a3a:	2c00      	cmp	r4, #0
  409a3c:	d14b      	bne.n	409ad6 <_vfprintf_r+0x14a6>
  409a3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409a40:	07e8      	lsls	r0, r5, #31
  409a42:	d448      	bmi.n	409ad6 <_vfprintf_r+0x14a6>
  409a44:	9c14      	ldr	r4, [sp, #80]	; 0x50
  409a46:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409a4a:	e5fd      	b.n	409648 <_vfprintf_r+0x1018>
  409a4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  409a4e:	e5db      	b.n	409608 <_vfprintf_r+0xfd8>
  409a50:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
  409a54:	4d3e      	ldr	r5, [pc, #248]	; (409b50 <_vfprintf_r+0x1520>)
  409a56:	17cb      	asrs	r3, r1, #31
  409a58:	fb85 5001 	smull	r5, r0, r5, r1
  409a5c:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
  409a60:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  409a64:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
  409a68:	2809      	cmp	r0, #9
  409a6a:	4613      	mov	r3, r2
  409a6c:	f101 0230 	add.w	r2, r1, #48	; 0x30
  409a70:	701a      	strb	r2, [r3, #0]
  409a72:	4601      	mov	r1, r0
  409a74:	f103 32ff 	add.w	r2, r3, #4294967295
  409a78:	dcec      	bgt.n	409a54 <_vfprintf_r+0x1424>
  409a7a:	f100 0130 	add.w	r1, r0, #48	; 0x30
  409a7e:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  409a82:	b2c9      	uxtb	r1, r1
  409a84:	4294      	cmp	r4, r2
  409a86:	f803 1c01 	strb.w	r1, [r3, #-1]
  409a8a:	d95d      	bls.n	409b48 <_vfprintf_r+0x1518>
  409a8c:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  409a90:	461a      	mov	r2, r3
  409a92:	e001      	b.n	409a98 <_vfprintf_r+0x1468>
  409a94:	f812 1b01 	ldrb.w	r1, [r2], #1
  409a98:	42a2      	cmp	r2, r4
  409a9a:	f800 1f01 	strb.w	r1, [r0, #1]!
  409a9e:	d1f9      	bne.n	409a94 <_vfprintf_r+0x1464>
  409aa0:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  409aa4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  409aa8:	3bf6      	subs	r3, #246	; 0xf6
  409aaa:	e775      	b.n	409998 <_vfprintf_r+0x1368>
  409aac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409aae:	2003      	movs	r0, #3
  409ab0:	a925      	add	r1, sp, #148	; 0x94
  409ab2:	aa26      	add	r2, sp, #152	; 0x98
  409ab4:	ab29      	add	r3, sp, #164	; 0xa4
  409ab6:	9501      	str	r5, [sp, #4]
  409ab8:	e7a2      	b.n	409a00 <_vfprintf_r+0x13d0>
  409aba:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  409abe:	2200      	movs	r2, #0
  409ac0:	2300      	movs	r3, #0
  409ac2:	f000 fe6f 	bl	40a7a4 <__aeabi_dcmpeq>
  409ac6:	2800      	cmp	r0, #0
  409ac8:	f47f af37 	bne.w	40993a <_vfprintf_r+0x130a>
  409acc:	f1c5 0501 	rsb	r5, r5, #1
  409ad0:	9525      	str	r5, [sp, #148]	; 0x94
  409ad2:	442c      	add	r4, r5
  409ad4:	e585      	b.n	4095e2 <_vfprintf_r+0xfb2>
  409ad6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409ad8:	1c6c      	adds	r4, r5, #1
  409ada:	9d14      	ldr	r5, [sp, #80]	; 0x50
  409adc:	442c      	add	r4, r5
  409ade:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409ae2:	e5b1      	b.n	409648 <_vfprintf_r+0x1018>
  409ae4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  409ae6:	f04f 0867 	mov.w	r8, #103	; 0x67
  409aea:	1c6c      	adds	r4, r5, #1
  409aec:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409af0:	e5aa      	b.n	409648 <_vfprintf_r+0x1018>
  409af2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  409af6:	f01c 0301 	ands.w	r3, ip, #1
  409afa:	f47f af56 	bne.w	4099aa <_vfprintf_r+0x137a>
  409afe:	9314      	str	r3, [sp, #80]	; 0x50
  409b00:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409b04:	e5a0      	b.n	409648 <_vfprintf_r+0x1018>
  409b06:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409b08:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  409b0c:	682d      	ldr	r5, [r5, #0]
  409b0e:	f10c 0104 	add.w	r1, ip, #4
  409b12:	2d00      	cmp	r5, #0
  409b14:	f893 8001 	ldrb.w	r8, [r3, #1]
  409b18:	950b      	str	r5, [sp, #44]	; 0x2c
  409b1a:	910f      	str	r1, [sp, #60]	; 0x3c
  409b1c:	4603      	mov	r3, r0
  409b1e:	f6be ae00 	bge.w	408722 <_vfprintf_r+0xf2>
  409b22:	f04f 34ff 	mov.w	r4, #4294967295
  409b26:	940b      	str	r4, [sp, #44]	; 0x2c
  409b28:	f7fe bdfb 	b.w	408722 <_vfprintf_r+0xf2>
  409b2c:	b92c      	cbnz	r4, 409b3a <_vfprintf_r+0x150a>
  409b2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409b30:	07e9      	lsls	r1, r5, #31
  409b32:	d402      	bmi.n	409b3a <_vfprintf_r+0x150a>
  409b34:	2301      	movs	r3, #1
  409b36:	461c      	mov	r4, r3
  409b38:	e586      	b.n	409648 <_vfprintf_r+0x1018>
  409b3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409b3c:	1cac      	adds	r4, r5, #2
  409b3e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409b42:	e581      	b.n	409648 <_vfprintf_r+0x1018>
  409b44:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409b46:	e713      	b.n	409970 <_vfprintf_r+0x1340>
  409b48:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  409b4c:	e724      	b.n	409998 <_vfprintf_r+0x1368>
  409b4e:	bf00      	nop
  409b50:	66666667 	.word	0x66666667

00409b54 <__sbprintf>:
  409b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409b58:	6e4f      	ldr	r7, [r1, #100]	; 0x64
  409b5a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  409b5e:	4688      	mov	r8, r1
  409b60:	9719      	str	r7, [sp, #100]	; 0x64
  409b62:	f8d8 701c 	ldr.w	r7, [r8, #28]
  409b66:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
  409b6a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
  409b6e:	9707      	str	r7, [sp, #28]
  409b70:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
  409b74:	ac1a      	add	r4, sp, #104	; 0x68
  409b76:	f44f 6580 	mov.w	r5, #1024	; 0x400
  409b7a:	f02a 0a02 	bic.w	sl, sl, #2
  409b7e:	2600      	movs	r6, #0
  409b80:	4669      	mov	r1, sp
  409b82:	9400      	str	r4, [sp, #0]
  409b84:	9404      	str	r4, [sp, #16]
  409b86:	9502      	str	r5, [sp, #8]
  409b88:	9505      	str	r5, [sp, #20]
  409b8a:	f8ad a00c 	strh.w	sl, [sp, #12]
  409b8e:	f8ad 900e 	strh.w	r9, [sp, #14]
  409b92:	9709      	str	r7, [sp, #36]	; 0x24
  409b94:	9606      	str	r6, [sp, #24]
  409b96:	4605      	mov	r5, r0
  409b98:	f7fe fd4a 	bl	408630 <_vfprintf_r>
  409b9c:	1e04      	subs	r4, r0, #0
  409b9e:	db07      	blt.n	409bb0 <__sbprintf+0x5c>
  409ba0:	4628      	mov	r0, r5
  409ba2:	4669      	mov	r1, sp
  409ba4:	f7fc ffac 	bl	406b00 <_fflush_r>
  409ba8:	42b0      	cmp	r0, r6
  409baa:	bf18      	it	ne
  409bac:	f04f 34ff 	movne.w	r4, #4294967295
  409bb0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  409bb4:	065b      	lsls	r3, r3, #25
  409bb6:	d505      	bpl.n	409bc4 <__sbprintf+0x70>
  409bb8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  409bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409bc0:	f8a8 300c 	strh.w	r3, [r8, #12]
  409bc4:	4620      	mov	r0, r4
  409bc6:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  409bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409bce:	bf00      	nop

00409bd0 <__swbuf_r>:
  409bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409bd2:	460d      	mov	r5, r1
  409bd4:	4614      	mov	r4, r2
  409bd6:	4607      	mov	r7, r0
  409bd8:	b110      	cbz	r0, 409be0 <__swbuf_r+0x10>
  409bda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409bdc:	2b00      	cmp	r3, #0
  409bde:	d048      	beq.n	409c72 <__swbuf_r+0xa2>
  409be0:	89a2      	ldrh	r2, [r4, #12]
  409be2:	69a0      	ldr	r0, [r4, #24]
  409be4:	b293      	uxth	r3, r2
  409be6:	60a0      	str	r0, [r4, #8]
  409be8:	0718      	lsls	r0, r3, #28
  409bea:	d538      	bpl.n	409c5e <__swbuf_r+0x8e>
  409bec:	6926      	ldr	r6, [r4, #16]
  409bee:	2e00      	cmp	r6, #0
  409bf0:	d035      	beq.n	409c5e <__swbuf_r+0x8e>
  409bf2:	0499      	lsls	r1, r3, #18
  409bf4:	b2ed      	uxtb	r5, r5
  409bf6:	d515      	bpl.n	409c24 <__swbuf_r+0x54>
  409bf8:	6823      	ldr	r3, [r4, #0]
  409bfa:	6962      	ldr	r2, [r4, #20]
  409bfc:	1b9e      	subs	r6, r3, r6
  409bfe:	4296      	cmp	r6, r2
  409c00:	da1c      	bge.n	409c3c <__swbuf_r+0x6c>
  409c02:	3601      	adds	r6, #1
  409c04:	68a2      	ldr	r2, [r4, #8]
  409c06:	1c59      	adds	r1, r3, #1
  409c08:	3a01      	subs	r2, #1
  409c0a:	60a2      	str	r2, [r4, #8]
  409c0c:	6021      	str	r1, [r4, #0]
  409c0e:	701d      	strb	r5, [r3, #0]
  409c10:	6963      	ldr	r3, [r4, #20]
  409c12:	42b3      	cmp	r3, r6
  409c14:	d01a      	beq.n	409c4c <__swbuf_r+0x7c>
  409c16:	89a3      	ldrh	r3, [r4, #12]
  409c18:	07db      	lsls	r3, r3, #31
  409c1a:	d501      	bpl.n	409c20 <__swbuf_r+0x50>
  409c1c:	2d0a      	cmp	r5, #10
  409c1e:	d015      	beq.n	409c4c <__swbuf_r+0x7c>
  409c20:	4628      	mov	r0, r5
  409c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409c26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  409c2e:	6663      	str	r3, [r4, #100]	; 0x64
  409c30:	6823      	ldr	r3, [r4, #0]
  409c32:	81a2      	strh	r2, [r4, #12]
  409c34:	6962      	ldr	r2, [r4, #20]
  409c36:	1b9e      	subs	r6, r3, r6
  409c38:	4296      	cmp	r6, r2
  409c3a:	dbe2      	blt.n	409c02 <__swbuf_r+0x32>
  409c3c:	4638      	mov	r0, r7
  409c3e:	4621      	mov	r1, r4
  409c40:	f7fc ff5e 	bl	406b00 <_fflush_r>
  409c44:	b940      	cbnz	r0, 409c58 <__swbuf_r+0x88>
  409c46:	6823      	ldr	r3, [r4, #0]
  409c48:	2601      	movs	r6, #1
  409c4a:	e7db      	b.n	409c04 <__swbuf_r+0x34>
  409c4c:	4638      	mov	r0, r7
  409c4e:	4621      	mov	r1, r4
  409c50:	f7fc ff56 	bl	406b00 <_fflush_r>
  409c54:	2800      	cmp	r0, #0
  409c56:	d0e3      	beq.n	409c20 <__swbuf_r+0x50>
  409c58:	f04f 30ff 	mov.w	r0, #4294967295
  409c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409c5e:	4638      	mov	r0, r7
  409c60:	4621      	mov	r1, r4
  409c62:	f7fb fe7f 	bl	405964 <__swsetup_r>
  409c66:	2800      	cmp	r0, #0
  409c68:	d1f6      	bne.n	409c58 <__swbuf_r+0x88>
  409c6a:	89a2      	ldrh	r2, [r4, #12]
  409c6c:	6926      	ldr	r6, [r4, #16]
  409c6e:	b293      	uxth	r3, r2
  409c70:	e7bf      	b.n	409bf2 <__swbuf_r+0x22>
  409c72:	f7fc ff61 	bl	406b38 <__sinit>
  409c76:	e7b3      	b.n	409be0 <__swbuf_r+0x10>

00409c78 <_wcrtomb_r>:
  409c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409c7c:	461e      	mov	r6, r3
  409c7e:	b086      	sub	sp, #24
  409c80:	460c      	mov	r4, r1
  409c82:	4605      	mov	r5, r0
  409c84:	4617      	mov	r7, r2
  409c86:	4b0f      	ldr	r3, [pc, #60]	; (409cc4 <_wcrtomb_r+0x4c>)
  409c88:	b191      	cbz	r1, 409cb0 <_wcrtomb_r+0x38>
  409c8a:	f8d3 8000 	ldr.w	r8, [r3]
  409c8e:	f7fd fb13 	bl	4072b8 <__locale_charset>
  409c92:	9600      	str	r6, [sp, #0]
  409c94:	4603      	mov	r3, r0
  409c96:	4621      	mov	r1, r4
  409c98:	463a      	mov	r2, r7
  409c9a:	4628      	mov	r0, r5
  409c9c:	47c0      	blx	r8
  409c9e:	1c43      	adds	r3, r0, #1
  409ca0:	d103      	bne.n	409caa <_wcrtomb_r+0x32>
  409ca2:	2200      	movs	r2, #0
  409ca4:	238a      	movs	r3, #138	; 0x8a
  409ca6:	6032      	str	r2, [r6, #0]
  409ca8:	602b      	str	r3, [r5, #0]
  409caa:	b006      	add	sp, #24
  409cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409cb0:	681f      	ldr	r7, [r3, #0]
  409cb2:	f7fd fb01 	bl	4072b8 <__locale_charset>
  409cb6:	9600      	str	r6, [sp, #0]
  409cb8:	4603      	mov	r3, r0
  409cba:	4622      	mov	r2, r4
  409cbc:	4628      	mov	r0, r5
  409cbe:	a903      	add	r1, sp, #12
  409cc0:	47b8      	blx	r7
  409cc2:	e7ec      	b.n	409c9e <_wcrtomb_r+0x26>
  409cc4:	20000990 	.word	0x20000990

00409cc8 <__ascii_wctomb>:
  409cc8:	b121      	cbz	r1, 409cd4 <__ascii_wctomb+0xc>
  409cca:	2aff      	cmp	r2, #255	; 0xff
  409ccc:	d804      	bhi.n	409cd8 <__ascii_wctomb+0x10>
  409cce:	700a      	strb	r2, [r1, #0]
  409cd0:	2001      	movs	r0, #1
  409cd2:	4770      	bx	lr
  409cd4:	4608      	mov	r0, r1
  409cd6:	4770      	bx	lr
  409cd8:	238a      	movs	r3, #138	; 0x8a
  409cda:	6003      	str	r3, [r0, #0]
  409cdc:	f04f 30ff 	mov.w	r0, #4294967295
  409ce0:	4770      	bx	lr
  409ce2:	bf00      	nop

00409ce4 <_write_r>:
  409ce4:	b570      	push	{r4, r5, r6, lr}
  409ce6:	4c08      	ldr	r4, [pc, #32]	; (409d08 <_write_r+0x24>)
  409ce8:	4606      	mov	r6, r0
  409cea:	2500      	movs	r5, #0
  409cec:	4608      	mov	r0, r1
  409cee:	4611      	mov	r1, r2
  409cf0:	461a      	mov	r2, r3
  409cf2:	6025      	str	r5, [r4, #0]
  409cf4:	f7f6 fdd8 	bl	4008a8 <_write>
  409cf8:	1c43      	adds	r3, r0, #1
  409cfa:	d000      	beq.n	409cfe <_write_r+0x1a>
  409cfc:	bd70      	pop	{r4, r5, r6, pc}
  409cfe:	6823      	ldr	r3, [r4, #0]
  409d00:	2b00      	cmp	r3, #0
  409d02:	d0fb      	beq.n	409cfc <_write_r+0x18>
  409d04:	6033      	str	r3, [r6, #0]
  409d06:	bd70      	pop	{r4, r5, r6, pc}
  409d08:	20003838 	.word	0x20003838

00409d0c <__register_exitproc>:
  409d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  409d0e:	4c27      	ldr	r4, [pc, #156]	; (409dac <__register_exitproc+0xa0>)
  409d10:	b085      	sub	sp, #20
  409d12:	6826      	ldr	r6, [r4, #0]
  409d14:	4607      	mov	r7, r0
  409d16:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  409d1a:	2c00      	cmp	r4, #0
  409d1c:	d040      	beq.n	409da0 <__register_exitproc+0x94>
  409d1e:	6865      	ldr	r5, [r4, #4]
  409d20:	2d1f      	cmp	r5, #31
  409d22:	dd1e      	ble.n	409d62 <__register_exitproc+0x56>
  409d24:	4822      	ldr	r0, [pc, #136]	; (409db0 <__register_exitproc+0xa4>)
  409d26:	b918      	cbnz	r0, 409d30 <__register_exitproc+0x24>
  409d28:	f04f 30ff 	mov.w	r0, #4294967295
  409d2c:	b005      	add	sp, #20
  409d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d30:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409d34:	9103      	str	r1, [sp, #12]
  409d36:	9202      	str	r2, [sp, #8]
  409d38:	9301      	str	r3, [sp, #4]
  409d3a:	f7fd fb3b 	bl	4073b4 <malloc>
  409d3e:	9903      	ldr	r1, [sp, #12]
  409d40:	4604      	mov	r4, r0
  409d42:	9a02      	ldr	r2, [sp, #8]
  409d44:	9b01      	ldr	r3, [sp, #4]
  409d46:	2800      	cmp	r0, #0
  409d48:	d0ee      	beq.n	409d28 <__register_exitproc+0x1c>
  409d4a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  409d4e:	2000      	movs	r0, #0
  409d50:	6025      	str	r5, [r4, #0]
  409d52:	6060      	str	r0, [r4, #4]
  409d54:	4605      	mov	r5, r0
  409d56:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  409d5a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  409d5e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  409d62:	b93f      	cbnz	r7, 409d74 <__register_exitproc+0x68>
  409d64:	1c6b      	adds	r3, r5, #1
  409d66:	2000      	movs	r0, #0
  409d68:	3502      	adds	r5, #2
  409d6a:	6063      	str	r3, [r4, #4]
  409d6c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
  409d70:	b005      	add	sp, #20
  409d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d74:	2601      	movs	r6, #1
  409d76:	40ae      	lsls	r6, r5
  409d78:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  409d7c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  409d80:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
  409d84:	2f02      	cmp	r7, #2
  409d86:	ea42 0206 	orr.w	r2, r2, r6
  409d8a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
  409d8e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  409d92:	d1e7      	bne.n	409d64 <__register_exitproc+0x58>
  409d94:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  409d98:	431e      	orrs	r6, r3
  409d9a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
  409d9e:	e7e1      	b.n	409d64 <__register_exitproc+0x58>
  409da0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  409da4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  409da8:	e7b9      	b.n	409d1e <__register_exitproc+0x12>
  409daa:	bf00      	nop
  409dac:	0040b6c0 	.word	0x0040b6c0
  409db0:	004073b5 	.word	0x004073b5

00409db4 <_calloc_r>:
  409db4:	b510      	push	{r4, lr}
  409db6:	fb02 f101 	mul.w	r1, r2, r1
  409dba:	f7fd fb03 	bl	4073c4 <_malloc_r>
  409dbe:	4604      	mov	r4, r0
  409dc0:	b168      	cbz	r0, 409dde <_calloc_r+0x2a>
  409dc2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409dc6:	f022 0203 	bic.w	r2, r2, #3
  409dca:	3a04      	subs	r2, #4
  409dcc:	2a24      	cmp	r2, #36	; 0x24
  409dce:	d818      	bhi.n	409e02 <_calloc_r+0x4e>
  409dd0:	2a13      	cmp	r2, #19
  409dd2:	d806      	bhi.n	409de2 <_calloc_r+0x2e>
  409dd4:	4603      	mov	r3, r0
  409dd6:	2200      	movs	r2, #0
  409dd8:	601a      	str	r2, [r3, #0]
  409dda:	605a      	str	r2, [r3, #4]
  409ddc:	609a      	str	r2, [r3, #8]
  409dde:	4620      	mov	r0, r4
  409de0:	bd10      	pop	{r4, pc}
  409de2:	2300      	movs	r3, #0
  409de4:	2a1b      	cmp	r2, #27
  409de6:	6003      	str	r3, [r0, #0]
  409de8:	6043      	str	r3, [r0, #4]
  409dea:	d90f      	bls.n	409e0c <_calloc_r+0x58>
  409dec:	2a24      	cmp	r2, #36	; 0x24
  409dee:	6083      	str	r3, [r0, #8]
  409df0:	60c3      	str	r3, [r0, #12]
  409df2:	bf05      	ittet	eq
  409df4:	6103      	streq	r3, [r0, #16]
  409df6:	6143      	streq	r3, [r0, #20]
  409df8:	f100 0310 	addne.w	r3, r0, #16
  409dfc:	f100 0318 	addeq.w	r3, r0, #24
  409e00:	e7e9      	b.n	409dd6 <_calloc_r+0x22>
  409e02:	2100      	movs	r1, #0
  409e04:	f7f9 faa6 	bl	403354 <memset>
  409e08:	4620      	mov	r0, r4
  409e0a:	bd10      	pop	{r4, pc}
  409e0c:	f100 0308 	add.w	r3, r0, #8
  409e10:	e7e1      	b.n	409dd6 <_calloc_r+0x22>
  409e12:	bf00      	nop

00409e14 <_close_r>:
  409e14:	b538      	push	{r3, r4, r5, lr}
  409e16:	4c07      	ldr	r4, [pc, #28]	; (409e34 <_close_r+0x20>)
  409e18:	2300      	movs	r3, #0
  409e1a:	4605      	mov	r5, r0
  409e1c:	4608      	mov	r0, r1
  409e1e:	6023      	str	r3, [r4, #0]
  409e20:	f7f7 fcd6 	bl	4017d0 <_close>
  409e24:	1c43      	adds	r3, r0, #1
  409e26:	d000      	beq.n	409e2a <_close_r+0x16>
  409e28:	bd38      	pop	{r3, r4, r5, pc}
  409e2a:	6823      	ldr	r3, [r4, #0]
  409e2c:	2b00      	cmp	r3, #0
  409e2e:	d0fb      	beq.n	409e28 <_close_r+0x14>
  409e30:	602b      	str	r3, [r5, #0]
  409e32:	bd38      	pop	{r3, r4, r5, pc}
  409e34:	20003838 	.word	0x20003838

00409e38 <_fclose_r>:
  409e38:	b570      	push	{r4, r5, r6, lr}
  409e3a:	460c      	mov	r4, r1
  409e3c:	4605      	mov	r5, r0
  409e3e:	b131      	cbz	r1, 409e4e <_fclose_r+0x16>
  409e40:	b110      	cbz	r0, 409e48 <_fclose_r+0x10>
  409e42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409e44:	2b00      	cmp	r3, #0
  409e46:	d02f      	beq.n	409ea8 <_fclose_r+0x70>
  409e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409e4c:	b90b      	cbnz	r3, 409e52 <_fclose_r+0x1a>
  409e4e:	2000      	movs	r0, #0
  409e50:	bd70      	pop	{r4, r5, r6, pc}
  409e52:	4628      	mov	r0, r5
  409e54:	4621      	mov	r1, r4
  409e56:	f7fc fe53 	bl	406b00 <_fflush_r>
  409e5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409e5c:	4606      	mov	r6, r0
  409e5e:	b133      	cbz	r3, 409e6e <_fclose_r+0x36>
  409e60:	4628      	mov	r0, r5
  409e62:	69e1      	ldr	r1, [r4, #28]
  409e64:	4798      	blx	r3
  409e66:	2800      	cmp	r0, #0
  409e68:	bfb8      	it	lt
  409e6a:	f04f 36ff 	movlt.w	r6, #4294967295
  409e6e:	89a3      	ldrh	r3, [r4, #12]
  409e70:	061b      	lsls	r3, r3, #24
  409e72:	d41c      	bmi.n	409eae <_fclose_r+0x76>
  409e74:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409e76:	b141      	cbz	r1, 409e8a <_fclose_r+0x52>
  409e78:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409e7c:	4299      	cmp	r1, r3
  409e7e:	d002      	beq.n	409e86 <_fclose_r+0x4e>
  409e80:	4628      	mov	r0, r5
  409e82:	f7fc ff9d 	bl	406dc0 <_free_r>
  409e86:	2300      	movs	r3, #0
  409e88:	6323      	str	r3, [r4, #48]	; 0x30
  409e8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409e8c:	b121      	cbz	r1, 409e98 <_fclose_r+0x60>
  409e8e:	4628      	mov	r0, r5
  409e90:	f7fc ff96 	bl	406dc0 <_free_r>
  409e94:	2300      	movs	r3, #0
  409e96:	6463      	str	r3, [r4, #68]	; 0x44
  409e98:	f7fc fec8 	bl	406c2c <__sfp_lock_acquire>
  409e9c:	2300      	movs	r3, #0
  409e9e:	81a3      	strh	r3, [r4, #12]
  409ea0:	f7fc fec6 	bl	406c30 <__sfp_lock_release>
  409ea4:	4630      	mov	r0, r6
  409ea6:	bd70      	pop	{r4, r5, r6, pc}
  409ea8:	f7fc fe46 	bl	406b38 <__sinit>
  409eac:	e7cc      	b.n	409e48 <_fclose_r+0x10>
  409eae:	4628      	mov	r0, r5
  409eb0:	6921      	ldr	r1, [r4, #16]
  409eb2:	f7fc ff85 	bl	406dc0 <_free_r>
  409eb6:	e7dd      	b.n	409e74 <_fclose_r+0x3c>

00409eb8 <fclose>:
  409eb8:	4b02      	ldr	r3, [pc, #8]	; (409ec4 <fclose+0xc>)
  409eba:	4601      	mov	r1, r0
  409ebc:	6818      	ldr	r0, [r3, #0]
  409ebe:	f7ff bfbb 	b.w	409e38 <_fclose_r>
  409ec2:	bf00      	nop
  409ec4:	20000520 	.word	0x20000520

00409ec8 <_fstat_r>:
  409ec8:	b538      	push	{r3, r4, r5, lr}
  409eca:	4c08      	ldr	r4, [pc, #32]	; (409eec <_fstat_r+0x24>)
  409ecc:	2300      	movs	r3, #0
  409ece:	4605      	mov	r5, r0
  409ed0:	4608      	mov	r0, r1
  409ed2:	4611      	mov	r1, r2
  409ed4:	6023      	str	r3, [r4, #0]
  409ed6:	f7f7 fc7f 	bl	4017d8 <_fstat>
  409eda:	1c43      	adds	r3, r0, #1
  409edc:	d000      	beq.n	409ee0 <_fstat_r+0x18>
  409ede:	bd38      	pop	{r3, r4, r5, pc}
  409ee0:	6823      	ldr	r3, [r4, #0]
  409ee2:	2b00      	cmp	r3, #0
  409ee4:	d0fb      	beq.n	409ede <_fstat_r+0x16>
  409ee6:	602b      	str	r3, [r5, #0]
  409ee8:	bd38      	pop	{r3, r4, r5, pc}
  409eea:	bf00      	nop
  409eec:	20003838 	.word	0x20003838

00409ef0 <_isatty_r>:
  409ef0:	b538      	push	{r3, r4, r5, lr}
  409ef2:	4c07      	ldr	r4, [pc, #28]	; (409f10 <_isatty_r+0x20>)
  409ef4:	2300      	movs	r3, #0
  409ef6:	4605      	mov	r5, r0
  409ef8:	4608      	mov	r0, r1
  409efa:	6023      	str	r3, [r4, #0]
  409efc:	f7f7 fc72 	bl	4017e4 <_isatty>
  409f00:	1c43      	adds	r3, r0, #1
  409f02:	d000      	beq.n	409f06 <_isatty_r+0x16>
  409f04:	bd38      	pop	{r3, r4, r5, pc}
  409f06:	6823      	ldr	r3, [r4, #0]
  409f08:	2b00      	cmp	r3, #0
  409f0a:	d0fb      	beq.n	409f04 <_isatty_r+0x14>
  409f0c:	602b      	str	r3, [r5, #0]
  409f0e:	bd38      	pop	{r3, r4, r5, pc}
  409f10:	20003838 	.word	0x20003838

00409f14 <_lseek_r>:
  409f14:	b570      	push	{r4, r5, r6, lr}
  409f16:	4c08      	ldr	r4, [pc, #32]	; (409f38 <_lseek_r+0x24>)
  409f18:	4606      	mov	r6, r0
  409f1a:	2500      	movs	r5, #0
  409f1c:	4608      	mov	r0, r1
  409f1e:	4611      	mov	r1, r2
  409f20:	461a      	mov	r2, r3
  409f22:	6025      	str	r5, [r4, #0]
  409f24:	f7f7 fc60 	bl	4017e8 <_lseek>
  409f28:	1c43      	adds	r3, r0, #1
  409f2a:	d000      	beq.n	409f2e <_lseek_r+0x1a>
  409f2c:	bd70      	pop	{r4, r5, r6, pc}
  409f2e:	6823      	ldr	r3, [r4, #0]
  409f30:	2b00      	cmp	r3, #0
  409f32:	d0fb      	beq.n	409f2c <_lseek_r+0x18>
  409f34:	6033      	str	r3, [r6, #0]
  409f36:	bd70      	pop	{r4, r5, r6, pc}
  409f38:	20003838 	.word	0x20003838

00409f3c <_read_r>:
  409f3c:	b570      	push	{r4, r5, r6, lr}
  409f3e:	4c08      	ldr	r4, [pc, #32]	; (409f60 <_read_r+0x24>)
  409f40:	4606      	mov	r6, r0
  409f42:	2500      	movs	r5, #0
  409f44:	4608      	mov	r0, r1
  409f46:	4611      	mov	r1, r2
  409f48:	461a      	mov	r2, r3
  409f4a:	6025      	str	r5, [r4, #0]
  409f4c:	f7f6 fc8c 	bl	400868 <_read>
  409f50:	1c43      	adds	r3, r0, #1
  409f52:	d000      	beq.n	409f56 <_read_r+0x1a>
  409f54:	bd70      	pop	{r4, r5, r6, pc}
  409f56:	6823      	ldr	r3, [r4, #0]
  409f58:	2b00      	cmp	r3, #0
  409f5a:	d0fb      	beq.n	409f54 <_read_r+0x18>
  409f5c:	6033      	str	r3, [r6, #0]
  409f5e:	bd70      	pop	{r4, r5, r6, pc}
  409f60:	20003838 	.word	0x20003838

00409f64 <__aeabi_drsub>:
  409f64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  409f68:	e002      	b.n	409f70 <__adddf3>
  409f6a:	bf00      	nop

00409f6c <__aeabi_dsub>:
  409f6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409f70 <__adddf3>:
  409f70:	b530      	push	{r4, r5, lr}
  409f72:	ea4f 0441 	mov.w	r4, r1, lsl #1
  409f76:	ea4f 0543 	mov.w	r5, r3, lsl #1
  409f7a:	ea94 0f05 	teq	r4, r5
  409f7e:	bf08      	it	eq
  409f80:	ea90 0f02 	teqeq	r0, r2
  409f84:	bf1f      	itttt	ne
  409f86:	ea54 0c00 	orrsne.w	ip, r4, r0
  409f8a:	ea55 0c02 	orrsne.w	ip, r5, r2
  409f8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409f92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409f96:	f000 80e2 	beq.w	40a15e <__adddf3+0x1ee>
  409f9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409f9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409fa2:	bfb8      	it	lt
  409fa4:	426d      	neglt	r5, r5
  409fa6:	dd0c      	ble.n	409fc2 <__adddf3+0x52>
  409fa8:	442c      	add	r4, r5
  409faa:	ea80 0202 	eor.w	r2, r0, r2
  409fae:	ea81 0303 	eor.w	r3, r1, r3
  409fb2:	ea82 0000 	eor.w	r0, r2, r0
  409fb6:	ea83 0101 	eor.w	r1, r3, r1
  409fba:	ea80 0202 	eor.w	r2, r0, r2
  409fbe:	ea81 0303 	eor.w	r3, r1, r3
  409fc2:	2d36      	cmp	r5, #54	; 0x36
  409fc4:	bf88      	it	hi
  409fc6:	bd30      	pophi	{r4, r5, pc}
  409fc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409fcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409fd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409fd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  409fd8:	d002      	beq.n	409fe0 <__adddf3+0x70>
  409fda:	4240      	negs	r0, r0
  409fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409fe0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409fe4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409fe8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409fec:	d002      	beq.n	409ff4 <__adddf3+0x84>
  409fee:	4252      	negs	r2, r2
  409ff0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409ff4:	ea94 0f05 	teq	r4, r5
  409ff8:	f000 80a7 	beq.w	40a14a <__adddf3+0x1da>
  409ffc:	f1a4 0401 	sub.w	r4, r4, #1
  40a000:	f1d5 0e20 	rsbs	lr, r5, #32
  40a004:	db0d      	blt.n	40a022 <__adddf3+0xb2>
  40a006:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a00a:	fa22 f205 	lsr.w	r2, r2, r5
  40a00e:	1880      	adds	r0, r0, r2
  40a010:	f141 0100 	adc.w	r1, r1, #0
  40a014:	fa03 f20e 	lsl.w	r2, r3, lr
  40a018:	1880      	adds	r0, r0, r2
  40a01a:	fa43 f305 	asr.w	r3, r3, r5
  40a01e:	4159      	adcs	r1, r3
  40a020:	e00e      	b.n	40a040 <__adddf3+0xd0>
  40a022:	f1a5 0520 	sub.w	r5, r5, #32
  40a026:	f10e 0e20 	add.w	lr, lr, #32
  40a02a:	2a01      	cmp	r2, #1
  40a02c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a030:	bf28      	it	cs
  40a032:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a036:	fa43 f305 	asr.w	r3, r3, r5
  40a03a:	18c0      	adds	r0, r0, r3
  40a03c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a044:	d507      	bpl.n	40a056 <__adddf3+0xe6>
  40a046:	f04f 0e00 	mov.w	lr, #0
  40a04a:	f1dc 0c00 	rsbs	ip, ip, #0
  40a04e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a052:	eb6e 0101 	sbc.w	r1, lr, r1
  40a056:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a05a:	d31b      	bcc.n	40a094 <__adddf3+0x124>
  40a05c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a060:	d30c      	bcc.n	40a07c <__adddf3+0x10c>
  40a062:	0849      	lsrs	r1, r1, #1
  40a064:	ea5f 0030 	movs.w	r0, r0, rrx
  40a068:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a06c:	f104 0401 	add.w	r4, r4, #1
  40a070:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a074:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a078:	f080 809a 	bcs.w	40a1b0 <__adddf3+0x240>
  40a07c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a080:	bf08      	it	eq
  40a082:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a086:	f150 0000 	adcs.w	r0, r0, #0
  40a08a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a08e:	ea41 0105 	orr.w	r1, r1, r5
  40a092:	bd30      	pop	{r4, r5, pc}
  40a094:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a098:	4140      	adcs	r0, r0
  40a09a:	eb41 0101 	adc.w	r1, r1, r1
  40a09e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a0a2:	f1a4 0401 	sub.w	r4, r4, #1
  40a0a6:	d1e9      	bne.n	40a07c <__adddf3+0x10c>
  40a0a8:	f091 0f00 	teq	r1, #0
  40a0ac:	bf04      	itt	eq
  40a0ae:	4601      	moveq	r1, r0
  40a0b0:	2000      	moveq	r0, #0
  40a0b2:	fab1 f381 	clz	r3, r1
  40a0b6:	bf08      	it	eq
  40a0b8:	3320      	addeq	r3, #32
  40a0ba:	f1a3 030b 	sub.w	r3, r3, #11
  40a0be:	f1b3 0220 	subs.w	r2, r3, #32
  40a0c2:	da0c      	bge.n	40a0de <__adddf3+0x16e>
  40a0c4:	320c      	adds	r2, #12
  40a0c6:	dd08      	ble.n	40a0da <__adddf3+0x16a>
  40a0c8:	f102 0c14 	add.w	ip, r2, #20
  40a0cc:	f1c2 020c 	rsb	r2, r2, #12
  40a0d0:	fa01 f00c 	lsl.w	r0, r1, ip
  40a0d4:	fa21 f102 	lsr.w	r1, r1, r2
  40a0d8:	e00c      	b.n	40a0f4 <__adddf3+0x184>
  40a0da:	f102 0214 	add.w	r2, r2, #20
  40a0de:	bfd8      	it	le
  40a0e0:	f1c2 0c20 	rsble	ip, r2, #32
  40a0e4:	fa01 f102 	lsl.w	r1, r1, r2
  40a0e8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a0ec:	bfdc      	itt	le
  40a0ee:	ea41 010c 	orrle.w	r1, r1, ip
  40a0f2:	4090      	lslle	r0, r2
  40a0f4:	1ae4      	subs	r4, r4, r3
  40a0f6:	bfa2      	ittt	ge
  40a0f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a0fc:	4329      	orrge	r1, r5
  40a0fe:	bd30      	popge	{r4, r5, pc}
  40a100:	ea6f 0404 	mvn.w	r4, r4
  40a104:	3c1f      	subs	r4, #31
  40a106:	da1c      	bge.n	40a142 <__adddf3+0x1d2>
  40a108:	340c      	adds	r4, #12
  40a10a:	dc0e      	bgt.n	40a12a <__adddf3+0x1ba>
  40a10c:	f104 0414 	add.w	r4, r4, #20
  40a110:	f1c4 0220 	rsb	r2, r4, #32
  40a114:	fa20 f004 	lsr.w	r0, r0, r4
  40a118:	fa01 f302 	lsl.w	r3, r1, r2
  40a11c:	ea40 0003 	orr.w	r0, r0, r3
  40a120:	fa21 f304 	lsr.w	r3, r1, r4
  40a124:	ea45 0103 	orr.w	r1, r5, r3
  40a128:	bd30      	pop	{r4, r5, pc}
  40a12a:	f1c4 040c 	rsb	r4, r4, #12
  40a12e:	f1c4 0220 	rsb	r2, r4, #32
  40a132:	fa20 f002 	lsr.w	r0, r0, r2
  40a136:	fa01 f304 	lsl.w	r3, r1, r4
  40a13a:	ea40 0003 	orr.w	r0, r0, r3
  40a13e:	4629      	mov	r1, r5
  40a140:	bd30      	pop	{r4, r5, pc}
  40a142:	fa21 f004 	lsr.w	r0, r1, r4
  40a146:	4629      	mov	r1, r5
  40a148:	bd30      	pop	{r4, r5, pc}
  40a14a:	f094 0f00 	teq	r4, #0
  40a14e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a152:	bf06      	itte	eq
  40a154:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a158:	3401      	addeq	r4, #1
  40a15a:	3d01      	subne	r5, #1
  40a15c:	e74e      	b.n	409ffc <__adddf3+0x8c>
  40a15e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a162:	bf18      	it	ne
  40a164:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a168:	d029      	beq.n	40a1be <__adddf3+0x24e>
  40a16a:	ea94 0f05 	teq	r4, r5
  40a16e:	bf08      	it	eq
  40a170:	ea90 0f02 	teqeq	r0, r2
  40a174:	d005      	beq.n	40a182 <__adddf3+0x212>
  40a176:	ea54 0c00 	orrs.w	ip, r4, r0
  40a17a:	bf04      	itt	eq
  40a17c:	4619      	moveq	r1, r3
  40a17e:	4610      	moveq	r0, r2
  40a180:	bd30      	pop	{r4, r5, pc}
  40a182:	ea91 0f03 	teq	r1, r3
  40a186:	bf1e      	ittt	ne
  40a188:	2100      	movne	r1, #0
  40a18a:	2000      	movne	r0, #0
  40a18c:	bd30      	popne	{r4, r5, pc}
  40a18e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a192:	d105      	bne.n	40a1a0 <__adddf3+0x230>
  40a194:	0040      	lsls	r0, r0, #1
  40a196:	4149      	adcs	r1, r1
  40a198:	bf28      	it	cs
  40a19a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a19e:	bd30      	pop	{r4, r5, pc}
  40a1a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a1a4:	bf3c      	itt	cc
  40a1a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a1aa:	bd30      	popcc	{r4, r5, pc}
  40a1ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a1b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a1b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a1b8:	f04f 0000 	mov.w	r0, #0
  40a1bc:	bd30      	pop	{r4, r5, pc}
  40a1be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a1c2:	bf1a      	itte	ne
  40a1c4:	4619      	movne	r1, r3
  40a1c6:	4610      	movne	r0, r2
  40a1c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a1cc:	bf1c      	itt	ne
  40a1ce:	460b      	movne	r3, r1
  40a1d0:	4602      	movne	r2, r0
  40a1d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a1d6:	bf06      	itte	eq
  40a1d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a1dc:	ea91 0f03 	teqeq	r1, r3
  40a1e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a1e4:	bd30      	pop	{r4, r5, pc}
  40a1e6:	bf00      	nop

0040a1e8 <__aeabi_ui2d>:
  40a1e8:	f090 0f00 	teq	r0, #0
  40a1ec:	bf04      	itt	eq
  40a1ee:	2100      	moveq	r1, #0
  40a1f0:	4770      	bxeq	lr
  40a1f2:	b530      	push	{r4, r5, lr}
  40a1f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a1f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a1fc:	f04f 0500 	mov.w	r5, #0
  40a200:	f04f 0100 	mov.w	r1, #0
  40a204:	e750      	b.n	40a0a8 <__adddf3+0x138>
  40a206:	bf00      	nop

0040a208 <__aeabi_i2d>:
  40a208:	f090 0f00 	teq	r0, #0
  40a20c:	bf04      	itt	eq
  40a20e:	2100      	moveq	r1, #0
  40a210:	4770      	bxeq	lr
  40a212:	b530      	push	{r4, r5, lr}
  40a214:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a218:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a21c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a220:	bf48      	it	mi
  40a222:	4240      	negmi	r0, r0
  40a224:	f04f 0100 	mov.w	r1, #0
  40a228:	e73e      	b.n	40a0a8 <__adddf3+0x138>
  40a22a:	bf00      	nop

0040a22c <__aeabi_f2d>:
  40a22c:	0042      	lsls	r2, r0, #1
  40a22e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a232:	ea4f 0131 	mov.w	r1, r1, rrx
  40a236:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a23a:	bf1f      	itttt	ne
  40a23c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a240:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a244:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a248:	4770      	bxne	lr
  40a24a:	f092 0f00 	teq	r2, #0
  40a24e:	bf14      	ite	ne
  40a250:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a254:	4770      	bxeq	lr
  40a256:	b530      	push	{r4, r5, lr}
  40a258:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a25c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a260:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a264:	e720      	b.n	40a0a8 <__adddf3+0x138>
  40a266:	bf00      	nop

0040a268 <__aeabi_ul2d>:
  40a268:	ea50 0201 	orrs.w	r2, r0, r1
  40a26c:	bf08      	it	eq
  40a26e:	4770      	bxeq	lr
  40a270:	b530      	push	{r4, r5, lr}
  40a272:	f04f 0500 	mov.w	r5, #0
  40a276:	e00a      	b.n	40a28e <__aeabi_l2d+0x16>

0040a278 <__aeabi_l2d>:
  40a278:	ea50 0201 	orrs.w	r2, r0, r1
  40a27c:	bf08      	it	eq
  40a27e:	4770      	bxeq	lr
  40a280:	b530      	push	{r4, r5, lr}
  40a282:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a286:	d502      	bpl.n	40a28e <__aeabi_l2d+0x16>
  40a288:	4240      	negs	r0, r0
  40a28a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a28e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a292:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a296:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a29a:	f43f aedc 	beq.w	40a056 <__adddf3+0xe6>
  40a29e:	f04f 0203 	mov.w	r2, #3
  40a2a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a2a6:	bf18      	it	ne
  40a2a8:	3203      	addne	r2, #3
  40a2aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a2ae:	bf18      	it	ne
  40a2b0:	3203      	addne	r2, #3
  40a2b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a2b6:	f1c2 0320 	rsb	r3, r2, #32
  40a2ba:	fa00 fc03 	lsl.w	ip, r0, r3
  40a2be:	fa20 f002 	lsr.w	r0, r0, r2
  40a2c2:	fa01 fe03 	lsl.w	lr, r1, r3
  40a2c6:	ea40 000e 	orr.w	r0, r0, lr
  40a2ca:	fa21 f102 	lsr.w	r1, r1, r2
  40a2ce:	4414      	add	r4, r2
  40a2d0:	e6c1      	b.n	40a056 <__adddf3+0xe6>
  40a2d2:	bf00      	nop

0040a2d4 <__aeabi_dmul>:
  40a2d4:	b570      	push	{r4, r5, r6, lr}
  40a2d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a2da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a2de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a2e2:	bf1d      	ittte	ne
  40a2e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a2e8:	ea94 0f0c 	teqne	r4, ip
  40a2ec:	ea95 0f0c 	teqne	r5, ip
  40a2f0:	f000 f8de 	bleq	40a4b0 <__aeabi_dmul+0x1dc>
  40a2f4:	442c      	add	r4, r5
  40a2f6:	ea81 0603 	eor.w	r6, r1, r3
  40a2fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a2fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a302:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a306:	bf18      	it	ne
  40a308:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a30c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a314:	d038      	beq.n	40a388 <__aeabi_dmul+0xb4>
  40a316:	fba0 ce02 	umull	ip, lr, r0, r2
  40a31a:	f04f 0500 	mov.w	r5, #0
  40a31e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a322:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a326:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a32a:	f04f 0600 	mov.w	r6, #0
  40a32e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a332:	f09c 0f00 	teq	ip, #0
  40a336:	bf18      	it	ne
  40a338:	f04e 0e01 	orrne.w	lr, lr, #1
  40a33c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a340:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a344:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a348:	d204      	bcs.n	40a354 <__aeabi_dmul+0x80>
  40a34a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a34e:	416d      	adcs	r5, r5
  40a350:	eb46 0606 	adc.w	r6, r6, r6
  40a354:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a358:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a35c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a360:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a364:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a368:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a36c:	bf88      	it	hi
  40a36e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a372:	d81e      	bhi.n	40a3b2 <__aeabi_dmul+0xde>
  40a374:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a378:	bf08      	it	eq
  40a37a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a37e:	f150 0000 	adcs.w	r0, r0, #0
  40a382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a386:	bd70      	pop	{r4, r5, r6, pc}
  40a388:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a38c:	ea46 0101 	orr.w	r1, r6, r1
  40a390:	ea40 0002 	orr.w	r0, r0, r2
  40a394:	ea81 0103 	eor.w	r1, r1, r3
  40a398:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a39c:	bfc2      	ittt	gt
  40a39e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a3a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a3a6:	bd70      	popgt	{r4, r5, r6, pc}
  40a3a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a3ac:	f04f 0e00 	mov.w	lr, #0
  40a3b0:	3c01      	subs	r4, #1
  40a3b2:	f300 80ab 	bgt.w	40a50c <__aeabi_dmul+0x238>
  40a3b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a3ba:	bfde      	ittt	le
  40a3bc:	2000      	movle	r0, #0
  40a3be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a3c2:	bd70      	pople	{r4, r5, r6, pc}
  40a3c4:	f1c4 0400 	rsb	r4, r4, #0
  40a3c8:	3c20      	subs	r4, #32
  40a3ca:	da35      	bge.n	40a438 <__aeabi_dmul+0x164>
  40a3cc:	340c      	adds	r4, #12
  40a3ce:	dc1b      	bgt.n	40a408 <__aeabi_dmul+0x134>
  40a3d0:	f104 0414 	add.w	r4, r4, #20
  40a3d4:	f1c4 0520 	rsb	r5, r4, #32
  40a3d8:	fa00 f305 	lsl.w	r3, r0, r5
  40a3dc:	fa20 f004 	lsr.w	r0, r0, r4
  40a3e0:	fa01 f205 	lsl.w	r2, r1, r5
  40a3e4:	ea40 0002 	orr.w	r0, r0, r2
  40a3e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a3ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a3f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a3f4:	fa21 f604 	lsr.w	r6, r1, r4
  40a3f8:	eb42 0106 	adc.w	r1, r2, r6
  40a3fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a400:	bf08      	it	eq
  40a402:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a406:	bd70      	pop	{r4, r5, r6, pc}
  40a408:	f1c4 040c 	rsb	r4, r4, #12
  40a40c:	f1c4 0520 	rsb	r5, r4, #32
  40a410:	fa00 f304 	lsl.w	r3, r0, r4
  40a414:	fa20 f005 	lsr.w	r0, r0, r5
  40a418:	fa01 f204 	lsl.w	r2, r1, r4
  40a41c:	ea40 0002 	orr.w	r0, r0, r2
  40a420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a424:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a428:	f141 0100 	adc.w	r1, r1, #0
  40a42c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a430:	bf08      	it	eq
  40a432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a436:	bd70      	pop	{r4, r5, r6, pc}
  40a438:	f1c4 0520 	rsb	r5, r4, #32
  40a43c:	fa00 f205 	lsl.w	r2, r0, r5
  40a440:	ea4e 0e02 	orr.w	lr, lr, r2
  40a444:	fa20 f304 	lsr.w	r3, r0, r4
  40a448:	fa01 f205 	lsl.w	r2, r1, r5
  40a44c:	ea43 0302 	orr.w	r3, r3, r2
  40a450:	fa21 f004 	lsr.w	r0, r1, r4
  40a454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a458:	fa21 f204 	lsr.w	r2, r1, r4
  40a45c:	ea20 0002 	bic.w	r0, r0, r2
  40a460:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a464:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a468:	bf08      	it	eq
  40a46a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a46e:	bd70      	pop	{r4, r5, r6, pc}
  40a470:	f094 0f00 	teq	r4, #0
  40a474:	d10f      	bne.n	40a496 <__aeabi_dmul+0x1c2>
  40a476:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a47a:	0040      	lsls	r0, r0, #1
  40a47c:	eb41 0101 	adc.w	r1, r1, r1
  40a480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a484:	bf08      	it	eq
  40a486:	3c01      	subeq	r4, #1
  40a488:	d0f7      	beq.n	40a47a <__aeabi_dmul+0x1a6>
  40a48a:	ea41 0106 	orr.w	r1, r1, r6
  40a48e:	f095 0f00 	teq	r5, #0
  40a492:	bf18      	it	ne
  40a494:	4770      	bxne	lr
  40a496:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a49a:	0052      	lsls	r2, r2, #1
  40a49c:	eb43 0303 	adc.w	r3, r3, r3
  40a4a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a4a4:	bf08      	it	eq
  40a4a6:	3d01      	subeq	r5, #1
  40a4a8:	d0f7      	beq.n	40a49a <__aeabi_dmul+0x1c6>
  40a4aa:	ea43 0306 	orr.w	r3, r3, r6
  40a4ae:	4770      	bx	lr
  40a4b0:	ea94 0f0c 	teq	r4, ip
  40a4b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a4b8:	bf18      	it	ne
  40a4ba:	ea95 0f0c 	teqne	r5, ip
  40a4be:	d00c      	beq.n	40a4da <__aeabi_dmul+0x206>
  40a4c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a4c4:	bf18      	it	ne
  40a4c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a4ca:	d1d1      	bne.n	40a470 <__aeabi_dmul+0x19c>
  40a4cc:	ea81 0103 	eor.w	r1, r1, r3
  40a4d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a4d4:	f04f 0000 	mov.w	r0, #0
  40a4d8:	bd70      	pop	{r4, r5, r6, pc}
  40a4da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a4de:	bf06      	itte	eq
  40a4e0:	4610      	moveq	r0, r2
  40a4e2:	4619      	moveq	r1, r3
  40a4e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a4e8:	d019      	beq.n	40a51e <__aeabi_dmul+0x24a>
  40a4ea:	ea94 0f0c 	teq	r4, ip
  40a4ee:	d102      	bne.n	40a4f6 <__aeabi_dmul+0x222>
  40a4f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a4f4:	d113      	bne.n	40a51e <__aeabi_dmul+0x24a>
  40a4f6:	ea95 0f0c 	teq	r5, ip
  40a4fa:	d105      	bne.n	40a508 <__aeabi_dmul+0x234>
  40a4fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a500:	bf1c      	itt	ne
  40a502:	4610      	movne	r0, r2
  40a504:	4619      	movne	r1, r3
  40a506:	d10a      	bne.n	40a51e <__aeabi_dmul+0x24a>
  40a508:	ea81 0103 	eor.w	r1, r1, r3
  40a50c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a510:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a518:	f04f 0000 	mov.w	r0, #0
  40a51c:	bd70      	pop	{r4, r5, r6, pc}
  40a51e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a522:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a526:	bd70      	pop	{r4, r5, r6, pc}

0040a528 <__aeabi_ddiv>:
  40a528:	b570      	push	{r4, r5, r6, lr}
  40a52a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a52e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a532:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a536:	bf1d      	ittte	ne
  40a538:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a53c:	ea94 0f0c 	teqne	r4, ip
  40a540:	ea95 0f0c 	teqne	r5, ip
  40a544:	f000 f8a7 	bleq	40a696 <__aeabi_ddiv+0x16e>
  40a548:	eba4 0405 	sub.w	r4, r4, r5
  40a54c:	ea81 0e03 	eor.w	lr, r1, r3
  40a550:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a554:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a558:	f000 8088 	beq.w	40a66c <__aeabi_ddiv+0x144>
  40a55c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a560:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a564:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a568:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a56c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a570:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a574:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a578:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a57c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a580:	429d      	cmp	r5, r3
  40a582:	bf08      	it	eq
  40a584:	4296      	cmpeq	r6, r2
  40a586:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a58a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a58e:	d202      	bcs.n	40a596 <__aeabi_ddiv+0x6e>
  40a590:	085b      	lsrs	r3, r3, #1
  40a592:	ea4f 0232 	mov.w	r2, r2, rrx
  40a596:	1ab6      	subs	r6, r6, r2
  40a598:	eb65 0503 	sbc.w	r5, r5, r3
  40a59c:	085b      	lsrs	r3, r3, #1
  40a59e:	ea4f 0232 	mov.w	r2, r2, rrx
  40a5a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a5a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a5aa:	ebb6 0e02 	subs.w	lr, r6, r2
  40a5ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a5b2:	bf22      	ittt	cs
  40a5b4:	1ab6      	subcs	r6, r6, r2
  40a5b6:	4675      	movcs	r5, lr
  40a5b8:	ea40 000c 	orrcs.w	r0, r0, ip
  40a5bc:	085b      	lsrs	r3, r3, #1
  40a5be:	ea4f 0232 	mov.w	r2, r2, rrx
  40a5c2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a5c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a5ca:	bf22      	ittt	cs
  40a5cc:	1ab6      	subcs	r6, r6, r2
  40a5ce:	4675      	movcs	r5, lr
  40a5d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a5d4:	085b      	lsrs	r3, r3, #1
  40a5d6:	ea4f 0232 	mov.w	r2, r2, rrx
  40a5da:	ebb6 0e02 	subs.w	lr, r6, r2
  40a5de:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a5e2:	bf22      	ittt	cs
  40a5e4:	1ab6      	subcs	r6, r6, r2
  40a5e6:	4675      	movcs	r5, lr
  40a5e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a5ec:	085b      	lsrs	r3, r3, #1
  40a5ee:	ea4f 0232 	mov.w	r2, r2, rrx
  40a5f2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a5f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a5fa:	bf22      	ittt	cs
  40a5fc:	1ab6      	subcs	r6, r6, r2
  40a5fe:	4675      	movcs	r5, lr
  40a600:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a604:	ea55 0e06 	orrs.w	lr, r5, r6
  40a608:	d018      	beq.n	40a63c <__aeabi_ddiv+0x114>
  40a60a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a60e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a612:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a616:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a61a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a61e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a622:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a626:	d1c0      	bne.n	40a5aa <__aeabi_ddiv+0x82>
  40a628:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a62c:	d10b      	bne.n	40a646 <__aeabi_ddiv+0x11e>
  40a62e:	ea41 0100 	orr.w	r1, r1, r0
  40a632:	f04f 0000 	mov.w	r0, #0
  40a636:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a63a:	e7b6      	b.n	40a5aa <__aeabi_ddiv+0x82>
  40a63c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a640:	bf04      	itt	eq
  40a642:	4301      	orreq	r1, r0
  40a644:	2000      	moveq	r0, #0
  40a646:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a64a:	bf88      	it	hi
  40a64c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a650:	f63f aeaf 	bhi.w	40a3b2 <__aeabi_dmul+0xde>
  40a654:	ebb5 0c03 	subs.w	ip, r5, r3
  40a658:	bf04      	itt	eq
  40a65a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a65e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a662:	f150 0000 	adcs.w	r0, r0, #0
  40a666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a66a:	bd70      	pop	{r4, r5, r6, pc}
  40a66c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a670:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a674:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a678:	bfc2      	ittt	gt
  40a67a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a67e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a682:	bd70      	popgt	{r4, r5, r6, pc}
  40a684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a688:	f04f 0e00 	mov.w	lr, #0
  40a68c:	3c01      	subs	r4, #1
  40a68e:	e690      	b.n	40a3b2 <__aeabi_dmul+0xde>
  40a690:	ea45 0e06 	orr.w	lr, r5, r6
  40a694:	e68d      	b.n	40a3b2 <__aeabi_dmul+0xde>
  40a696:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a69a:	ea94 0f0c 	teq	r4, ip
  40a69e:	bf08      	it	eq
  40a6a0:	ea95 0f0c 	teqeq	r5, ip
  40a6a4:	f43f af3b 	beq.w	40a51e <__aeabi_dmul+0x24a>
  40a6a8:	ea94 0f0c 	teq	r4, ip
  40a6ac:	d10a      	bne.n	40a6c4 <__aeabi_ddiv+0x19c>
  40a6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a6b2:	f47f af34 	bne.w	40a51e <__aeabi_dmul+0x24a>
  40a6b6:	ea95 0f0c 	teq	r5, ip
  40a6ba:	f47f af25 	bne.w	40a508 <__aeabi_dmul+0x234>
  40a6be:	4610      	mov	r0, r2
  40a6c0:	4619      	mov	r1, r3
  40a6c2:	e72c      	b.n	40a51e <__aeabi_dmul+0x24a>
  40a6c4:	ea95 0f0c 	teq	r5, ip
  40a6c8:	d106      	bne.n	40a6d8 <__aeabi_ddiv+0x1b0>
  40a6ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a6ce:	f43f aefd 	beq.w	40a4cc <__aeabi_dmul+0x1f8>
  40a6d2:	4610      	mov	r0, r2
  40a6d4:	4619      	mov	r1, r3
  40a6d6:	e722      	b.n	40a51e <__aeabi_dmul+0x24a>
  40a6d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a6dc:	bf18      	it	ne
  40a6de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a6e2:	f47f aec5 	bne.w	40a470 <__aeabi_dmul+0x19c>
  40a6e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a6ea:	f47f af0d 	bne.w	40a508 <__aeabi_dmul+0x234>
  40a6ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a6f2:	f47f aeeb 	bne.w	40a4cc <__aeabi_dmul+0x1f8>
  40a6f6:	e712      	b.n	40a51e <__aeabi_dmul+0x24a>

0040a6f8 <__gedf2>:
  40a6f8:	f04f 3cff 	mov.w	ip, #4294967295
  40a6fc:	e006      	b.n	40a70c <__cmpdf2+0x4>
  40a6fe:	bf00      	nop

0040a700 <__ledf2>:
  40a700:	f04f 0c01 	mov.w	ip, #1
  40a704:	e002      	b.n	40a70c <__cmpdf2+0x4>
  40a706:	bf00      	nop

0040a708 <__cmpdf2>:
  40a708:	f04f 0c01 	mov.w	ip, #1
  40a70c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a718:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a71c:	bf18      	it	ne
  40a71e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a722:	d01b      	beq.n	40a75c <__cmpdf2+0x54>
  40a724:	b001      	add	sp, #4
  40a726:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a72a:	bf0c      	ite	eq
  40a72c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a730:	ea91 0f03 	teqne	r1, r3
  40a734:	bf02      	ittt	eq
  40a736:	ea90 0f02 	teqeq	r0, r2
  40a73a:	2000      	moveq	r0, #0
  40a73c:	4770      	bxeq	lr
  40a73e:	f110 0f00 	cmn.w	r0, #0
  40a742:	ea91 0f03 	teq	r1, r3
  40a746:	bf58      	it	pl
  40a748:	4299      	cmppl	r1, r3
  40a74a:	bf08      	it	eq
  40a74c:	4290      	cmpeq	r0, r2
  40a74e:	bf2c      	ite	cs
  40a750:	17d8      	asrcs	r0, r3, #31
  40a752:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a756:	f040 0001 	orr.w	r0, r0, #1
  40a75a:	4770      	bx	lr
  40a75c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a764:	d102      	bne.n	40a76c <__cmpdf2+0x64>
  40a766:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a76a:	d107      	bne.n	40a77c <__cmpdf2+0x74>
  40a76c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a770:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a774:	d1d6      	bne.n	40a724 <__cmpdf2+0x1c>
  40a776:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a77a:	d0d3      	beq.n	40a724 <__cmpdf2+0x1c>
  40a77c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a780:	4770      	bx	lr
  40a782:	bf00      	nop

0040a784 <__aeabi_cdrcmple>:
  40a784:	4684      	mov	ip, r0
  40a786:	4610      	mov	r0, r2
  40a788:	4662      	mov	r2, ip
  40a78a:	468c      	mov	ip, r1
  40a78c:	4619      	mov	r1, r3
  40a78e:	4663      	mov	r3, ip
  40a790:	e000      	b.n	40a794 <__aeabi_cdcmpeq>
  40a792:	bf00      	nop

0040a794 <__aeabi_cdcmpeq>:
  40a794:	b501      	push	{r0, lr}
  40a796:	f7ff ffb7 	bl	40a708 <__cmpdf2>
  40a79a:	2800      	cmp	r0, #0
  40a79c:	bf48      	it	mi
  40a79e:	f110 0f00 	cmnmi.w	r0, #0
  40a7a2:	bd01      	pop	{r0, pc}

0040a7a4 <__aeabi_dcmpeq>:
  40a7a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a7a8:	f7ff fff4 	bl	40a794 <__aeabi_cdcmpeq>
  40a7ac:	bf0c      	ite	eq
  40a7ae:	2001      	moveq	r0, #1
  40a7b0:	2000      	movne	r0, #0
  40a7b2:	f85d fb08 	ldr.w	pc, [sp], #8
  40a7b6:	bf00      	nop

0040a7b8 <__aeabi_dcmplt>:
  40a7b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a7bc:	f7ff ffea 	bl	40a794 <__aeabi_cdcmpeq>
  40a7c0:	bf34      	ite	cc
  40a7c2:	2001      	movcc	r0, #1
  40a7c4:	2000      	movcs	r0, #0
  40a7c6:	f85d fb08 	ldr.w	pc, [sp], #8
  40a7ca:	bf00      	nop

0040a7cc <__aeabi_dcmple>:
  40a7cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a7d0:	f7ff ffe0 	bl	40a794 <__aeabi_cdcmpeq>
  40a7d4:	bf94      	ite	ls
  40a7d6:	2001      	movls	r0, #1
  40a7d8:	2000      	movhi	r0, #0
  40a7da:	f85d fb08 	ldr.w	pc, [sp], #8
  40a7de:	bf00      	nop

0040a7e0 <__aeabi_dcmpge>:
  40a7e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a7e4:	f7ff ffce 	bl	40a784 <__aeabi_cdrcmple>
  40a7e8:	bf94      	ite	ls
  40a7ea:	2001      	movls	r0, #1
  40a7ec:	2000      	movhi	r0, #0
  40a7ee:	f85d fb08 	ldr.w	pc, [sp], #8
  40a7f2:	bf00      	nop

0040a7f4 <__aeabi_dcmpgt>:
  40a7f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a7f8:	f7ff ffc4 	bl	40a784 <__aeabi_cdrcmple>
  40a7fc:	bf34      	ite	cc
  40a7fe:	2001      	movcc	r0, #1
  40a800:	2000      	movcs	r0, #0
  40a802:	f85d fb08 	ldr.w	pc, [sp], #8
  40a806:	bf00      	nop

0040a808 <__aeabi_d2iz>:
  40a808:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a80c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a810:	d215      	bcs.n	40a83e <__aeabi_d2iz+0x36>
  40a812:	d511      	bpl.n	40a838 <__aeabi_d2iz+0x30>
  40a814:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a818:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a81c:	d912      	bls.n	40a844 <__aeabi_d2iz+0x3c>
  40a81e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a826:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a82a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a82e:	fa23 f002 	lsr.w	r0, r3, r2
  40a832:	bf18      	it	ne
  40a834:	4240      	negne	r0, r0
  40a836:	4770      	bx	lr
  40a838:	f04f 0000 	mov.w	r0, #0
  40a83c:	4770      	bx	lr
  40a83e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a842:	d105      	bne.n	40a850 <__aeabi_d2iz+0x48>
  40a844:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a848:	bf08      	it	eq
  40a84a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a84e:	4770      	bx	lr
  40a850:	f04f 0000 	mov.w	r0, #0
  40a854:	4770      	bx	lr
  40a856:	bf00      	nop

0040a858 <__aeabi_uldivmod>:
  40a858:	b94b      	cbnz	r3, 40a86e <__aeabi_uldivmod+0x16>
  40a85a:	b942      	cbnz	r2, 40a86e <__aeabi_uldivmod+0x16>
  40a85c:	2900      	cmp	r1, #0
  40a85e:	bf08      	it	eq
  40a860:	2800      	cmpeq	r0, #0
  40a862:	d002      	beq.n	40a86a <__aeabi_uldivmod+0x12>
  40a864:	f04f 31ff 	mov.w	r1, #4294967295
  40a868:	4608      	mov	r0, r1
  40a86a:	f000 b83b 	b.w	40a8e4 <__aeabi_idiv0>
  40a86e:	b082      	sub	sp, #8
  40a870:	46ec      	mov	ip, sp
  40a872:	e92d 5000 	stmdb	sp!, {ip, lr}
  40a876:	f000 f81d 	bl	40a8b4 <__gnu_uldivmod_helper>
  40a87a:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a87e:	b002      	add	sp, #8
  40a880:	bc0c      	pop	{r2, r3}
  40a882:	4770      	bx	lr

0040a884 <__gnu_ldivmod_helper>:
  40a884:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  40a888:	9e08      	ldr	r6, [sp, #32]
  40a88a:	4614      	mov	r4, r2
  40a88c:	461d      	mov	r5, r3
  40a88e:	4680      	mov	r8, r0
  40a890:	4689      	mov	r9, r1
  40a892:	f000 f829 	bl	40a8e8 <__divdi3>
  40a896:	fb04 f301 	mul.w	r3, r4, r1
  40a89a:	fba4 ab00 	umull	sl, fp, r4, r0
  40a89e:	fb00 3205 	mla	r2, r0, r5, r3
  40a8a2:	4493      	add	fp, r2
  40a8a4:	ebb8 080a 	subs.w	r8, r8, sl
  40a8a8:	eb69 090b 	sbc.w	r9, r9, fp
  40a8ac:	e9c6 8900 	strd	r8, r9, [r6]
  40a8b0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0040a8b4 <__gnu_uldivmod_helper>:
  40a8b4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  40a8b8:	9e08      	ldr	r6, [sp, #32]
  40a8ba:	4614      	mov	r4, r2
  40a8bc:	461d      	mov	r5, r3
  40a8be:	4680      	mov	r8, r0
  40a8c0:	4689      	mov	r9, r1
  40a8c2:	f000 f961 	bl	40ab88 <__udivdi3>
  40a8c6:	fb00 f505 	mul.w	r5, r0, r5
  40a8ca:	fba0 ab04 	umull	sl, fp, r0, r4
  40a8ce:	fb04 5401 	mla	r4, r4, r1, r5
  40a8d2:	44a3      	add	fp, r4
  40a8d4:	ebb8 080a 	subs.w	r8, r8, sl
  40a8d8:	eb69 090b 	sbc.w	r9, r9, fp
  40a8dc:	e9c6 8900 	strd	r8, r9, [r6]
  40a8e0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0040a8e4 <__aeabi_idiv0>:
  40a8e4:	4770      	bx	lr
  40a8e6:	bf00      	nop

0040a8e8 <__divdi3>:
  40a8e8:	2900      	cmp	r1, #0
  40a8ea:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a8ee:	f2c0 80a1 	blt.w	40aa34 <__divdi3+0x14c>
  40a8f2:	2400      	movs	r4, #0
  40a8f4:	2b00      	cmp	r3, #0
  40a8f6:	f2c0 8098 	blt.w	40aa2a <__divdi3+0x142>
  40a8fa:	4615      	mov	r5, r2
  40a8fc:	4606      	mov	r6, r0
  40a8fe:	460f      	mov	r7, r1
  40a900:	2b00      	cmp	r3, #0
  40a902:	d13f      	bne.n	40a984 <__divdi3+0x9c>
  40a904:	428a      	cmp	r2, r1
  40a906:	d958      	bls.n	40a9ba <__divdi3+0xd2>
  40a908:	fab2 f382 	clz	r3, r2
  40a90c:	b14b      	cbz	r3, 40a922 <__divdi3+0x3a>
  40a90e:	f1c3 0220 	rsb	r2, r3, #32
  40a912:	fa01 f703 	lsl.w	r7, r1, r3
  40a916:	fa20 f202 	lsr.w	r2, r0, r2
  40a91a:	409d      	lsls	r5, r3
  40a91c:	fa00 f603 	lsl.w	r6, r0, r3
  40a920:	4317      	orrs	r7, r2
  40a922:	0c29      	lsrs	r1, r5, #16
  40a924:	fbb7 f2f1 	udiv	r2, r7, r1
  40a928:	fb01 7712 	mls	r7, r1, r2, r7
  40a92c:	b2a8      	uxth	r0, r5
  40a92e:	fb00 f302 	mul.w	r3, r0, r2
  40a932:	ea4f 4c16 	mov.w	ip, r6, lsr #16
  40a936:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
  40a93a:	42bb      	cmp	r3, r7
  40a93c:	d909      	bls.n	40a952 <__divdi3+0x6a>
  40a93e:	197f      	adds	r7, r7, r5
  40a940:	f102 3cff 	add.w	ip, r2, #4294967295
  40a944:	f080 8105 	bcs.w	40ab52 <__divdi3+0x26a>
  40a948:	42bb      	cmp	r3, r7
  40a94a:	f240 8102 	bls.w	40ab52 <__divdi3+0x26a>
  40a94e:	3a02      	subs	r2, #2
  40a950:	442f      	add	r7, r5
  40a952:	1aff      	subs	r7, r7, r3
  40a954:	fbb7 f3f1 	udiv	r3, r7, r1
  40a958:	fb01 7113 	mls	r1, r1, r3, r7
  40a95c:	fb00 f003 	mul.w	r0, r0, r3
  40a960:	b2b6      	uxth	r6, r6
  40a962:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  40a966:	4288      	cmp	r0, r1
  40a968:	d908      	bls.n	40a97c <__divdi3+0x94>
  40a96a:	1949      	adds	r1, r1, r5
  40a96c:	f103 37ff 	add.w	r7, r3, #4294967295
  40a970:	f080 80f1 	bcs.w	40ab56 <__divdi3+0x26e>
  40a974:	4288      	cmp	r0, r1
  40a976:	f240 80ee 	bls.w	40ab56 <__divdi3+0x26e>
  40a97a:	3b02      	subs	r3, #2
  40a97c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40a980:	2300      	movs	r3, #0
  40a982:	e003      	b.n	40a98c <__divdi3+0xa4>
  40a984:	428b      	cmp	r3, r1
  40a986:	d90a      	bls.n	40a99e <__divdi3+0xb6>
  40a988:	2300      	movs	r3, #0
  40a98a:	461a      	mov	r2, r3
  40a98c:	4610      	mov	r0, r2
  40a98e:	4619      	mov	r1, r3
  40a990:	b114      	cbz	r4, 40a998 <__divdi3+0xb0>
  40a992:	4240      	negs	r0, r0
  40a994:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a998:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a99c:	4770      	bx	lr
  40a99e:	fab3 f883 	clz	r8, r3
  40a9a2:	f1b8 0f00 	cmp.w	r8, #0
  40a9a6:	f040 8088 	bne.w	40aaba <__divdi3+0x1d2>
  40a9aa:	428b      	cmp	r3, r1
  40a9ac:	d302      	bcc.n	40a9b4 <__divdi3+0xcc>
  40a9ae:	4282      	cmp	r2, r0
  40a9b0:	f200 80e2 	bhi.w	40ab78 <__divdi3+0x290>
  40a9b4:	2300      	movs	r3, #0
  40a9b6:	2201      	movs	r2, #1
  40a9b8:	e7e8      	b.n	40a98c <__divdi3+0xa4>
  40a9ba:	b912      	cbnz	r2, 40a9c2 <__divdi3+0xda>
  40a9bc:	2301      	movs	r3, #1
  40a9be:	fbb3 f5f2 	udiv	r5, r3, r2
  40a9c2:	fab5 f285 	clz	r2, r5
  40a9c6:	2a00      	cmp	r2, #0
  40a9c8:	d13a      	bne.n	40aa40 <__divdi3+0x158>
  40a9ca:	1b7f      	subs	r7, r7, r5
  40a9cc:	0c28      	lsrs	r0, r5, #16
  40a9ce:	fa1f fc85 	uxth.w	ip, r5
  40a9d2:	2301      	movs	r3, #1
  40a9d4:	fbb7 f1f0 	udiv	r1, r7, r0
  40a9d8:	fb00 7711 	mls	r7, r0, r1, r7
  40a9dc:	fb0c f201 	mul.w	r2, ip, r1
  40a9e0:	ea4f 4816 	mov.w	r8, r6, lsr #16
  40a9e4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40a9e8:	42ba      	cmp	r2, r7
  40a9ea:	d907      	bls.n	40a9fc <__divdi3+0x114>
  40a9ec:	197f      	adds	r7, r7, r5
  40a9ee:	f101 38ff 	add.w	r8, r1, #4294967295
  40a9f2:	d202      	bcs.n	40a9fa <__divdi3+0x112>
  40a9f4:	42ba      	cmp	r2, r7
  40a9f6:	f200 80c4 	bhi.w	40ab82 <__divdi3+0x29a>
  40a9fa:	4641      	mov	r1, r8
  40a9fc:	1abf      	subs	r7, r7, r2
  40a9fe:	fbb7 f2f0 	udiv	r2, r7, r0
  40aa02:	fb00 7012 	mls	r0, r0, r2, r7
  40aa06:	fb0c fc02 	mul.w	ip, ip, r2
  40aa0a:	b2b6      	uxth	r6, r6
  40aa0c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  40aa10:	4584      	cmp	ip, r0
  40aa12:	d907      	bls.n	40aa24 <__divdi3+0x13c>
  40aa14:	1940      	adds	r0, r0, r5
  40aa16:	f102 37ff 	add.w	r7, r2, #4294967295
  40aa1a:	d202      	bcs.n	40aa22 <__divdi3+0x13a>
  40aa1c:	4584      	cmp	ip, r0
  40aa1e:	f200 80ae 	bhi.w	40ab7e <__divdi3+0x296>
  40aa22:	463a      	mov	r2, r7
  40aa24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40aa28:	e7b0      	b.n	40a98c <__divdi3+0xa4>
  40aa2a:	43e4      	mvns	r4, r4
  40aa2c:	4252      	negs	r2, r2
  40aa2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40aa32:	e762      	b.n	40a8fa <__divdi3+0x12>
  40aa34:	4240      	negs	r0, r0
  40aa36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40aa3a:	f04f 34ff 	mov.w	r4, #4294967295
  40aa3e:	e759      	b.n	40a8f4 <__divdi3+0xc>
  40aa40:	4095      	lsls	r5, r2
  40aa42:	f1c2 0920 	rsb	r9, r2, #32
  40aa46:	fa27 f109 	lsr.w	r1, r7, r9
  40aa4a:	fa26 f909 	lsr.w	r9, r6, r9
  40aa4e:	4097      	lsls	r7, r2
  40aa50:	0c28      	lsrs	r0, r5, #16
  40aa52:	fbb1 f8f0 	udiv	r8, r1, r0
  40aa56:	fb00 1118 	mls	r1, r0, r8, r1
  40aa5a:	fa1f fc85 	uxth.w	ip, r5
  40aa5e:	fb0c f308 	mul.w	r3, ip, r8
  40aa62:	ea49 0907 	orr.w	r9, r9, r7
  40aa66:	ea4f 4719 	mov.w	r7, r9, lsr #16
  40aa6a:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
  40aa6e:	428b      	cmp	r3, r1
  40aa70:	fa06 f602 	lsl.w	r6, r6, r2
  40aa74:	d908      	bls.n	40aa88 <__divdi3+0x1a0>
  40aa76:	1949      	adds	r1, r1, r5
  40aa78:	f108 32ff 	add.w	r2, r8, #4294967295
  40aa7c:	d27a      	bcs.n	40ab74 <__divdi3+0x28c>
  40aa7e:	428b      	cmp	r3, r1
  40aa80:	d978      	bls.n	40ab74 <__divdi3+0x28c>
  40aa82:	f1a8 0802 	sub.w	r8, r8, #2
  40aa86:	4429      	add	r1, r5
  40aa88:	1ac9      	subs	r1, r1, r3
  40aa8a:	fbb1 f3f0 	udiv	r3, r1, r0
  40aa8e:	fb00 1713 	mls	r7, r0, r3, r1
  40aa92:	fb0c f203 	mul.w	r2, ip, r3
  40aa96:	fa1f f989 	uxth.w	r9, r9
  40aa9a:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
  40aa9e:	42ba      	cmp	r2, r7
  40aaa0:	d907      	bls.n	40aab2 <__divdi3+0x1ca>
  40aaa2:	197f      	adds	r7, r7, r5
  40aaa4:	f103 31ff 	add.w	r1, r3, #4294967295
  40aaa8:	d260      	bcs.n	40ab6c <__divdi3+0x284>
  40aaaa:	42ba      	cmp	r2, r7
  40aaac:	d95e      	bls.n	40ab6c <__divdi3+0x284>
  40aaae:	3b02      	subs	r3, #2
  40aab0:	442f      	add	r7, r5
  40aab2:	1abf      	subs	r7, r7, r2
  40aab4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40aab8:	e78c      	b.n	40a9d4 <__divdi3+0xec>
  40aaba:	f1c8 0220 	rsb	r2, r8, #32
  40aabe:	fa25 f102 	lsr.w	r1, r5, r2
  40aac2:	fa03 fc08 	lsl.w	ip, r3, r8
  40aac6:	fa27 f302 	lsr.w	r3, r7, r2
  40aaca:	fa20 f202 	lsr.w	r2, r0, r2
  40aace:	fa07 f708 	lsl.w	r7, r7, r8
  40aad2:	ea41 0c0c 	orr.w	ip, r1, ip
  40aad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
  40aada:	fbb3 f1f9 	udiv	r1, r3, r9
  40aade:	fb09 3311 	mls	r3, r9, r1, r3
  40aae2:	fa1f fa8c 	uxth.w	sl, ip
  40aae6:	fb0a fb01 	mul.w	fp, sl, r1
  40aaea:	4317      	orrs	r7, r2
  40aaec:	0c3a      	lsrs	r2, r7, #16
  40aaee:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  40aaf2:	459b      	cmp	fp, r3
  40aaf4:	fa05 f008 	lsl.w	r0, r5, r8
  40aaf8:	d908      	bls.n	40ab0c <__divdi3+0x224>
  40aafa:	eb13 030c 	adds.w	r3, r3, ip
  40aafe:	f101 32ff 	add.w	r2, r1, #4294967295
  40ab02:	d235      	bcs.n	40ab70 <__divdi3+0x288>
  40ab04:	459b      	cmp	fp, r3
  40ab06:	d933      	bls.n	40ab70 <__divdi3+0x288>
  40ab08:	3902      	subs	r1, #2
  40ab0a:	4463      	add	r3, ip
  40ab0c:	ebcb 0303 	rsb	r3, fp, r3
  40ab10:	fbb3 f2f9 	udiv	r2, r3, r9
  40ab14:	fb09 3312 	mls	r3, r9, r2, r3
  40ab18:	fb0a fa02 	mul.w	sl, sl, r2
  40ab1c:	b2bf      	uxth	r7, r7
  40ab1e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40ab22:	45ba      	cmp	sl, r7
  40ab24:	d908      	bls.n	40ab38 <__divdi3+0x250>
  40ab26:	eb17 070c 	adds.w	r7, r7, ip
  40ab2a:	f102 33ff 	add.w	r3, r2, #4294967295
  40ab2e:	d21b      	bcs.n	40ab68 <__divdi3+0x280>
  40ab30:	45ba      	cmp	sl, r7
  40ab32:	d919      	bls.n	40ab68 <__divdi3+0x280>
  40ab34:	3a02      	subs	r2, #2
  40ab36:	4467      	add	r7, ip
  40ab38:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40ab3c:	fba5 0100 	umull	r0, r1, r5, r0
  40ab40:	ebca 0707 	rsb	r7, sl, r7
  40ab44:	428f      	cmp	r7, r1
  40ab46:	f04f 0300 	mov.w	r3, #0
  40ab4a:	d30a      	bcc.n	40ab62 <__divdi3+0x27a>
  40ab4c:	d005      	beq.n	40ab5a <__divdi3+0x272>
  40ab4e:	462a      	mov	r2, r5
  40ab50:	e71c      	b.n	40a98c <__divdi3+0xa4>
  40ab52:	4662      	mov	r2, ip
  40ab54:	e6fd      	b.n	40a952 <__divdi3+0x6a>
  40ab56:	463b      	mov	r3, r7
  40ab58:	e710      	b.n	40a97c <__divdi3+0x94>
  40ab5a:	fa06 f608 	lsl.w	r6, r6, r8
  40ab5e:	4286      	cmp	r6, r0
  40ab60:	d2f5      	bcs.n	40ab4e <__divdi3+0x266>
  40ab62:	1e6a      	subs	r2, r5, #1
  40ab64:	2300      	movs	r3, #0
  40ab66:	e711      	b.n	40a98c <__divdi3+0xa4>
  40ab68:	461a      	mov	r2, r3
  40ab6a:	e7e5      	b.n	40ab38 <__divdi3+0x250>
  40ab6c:	460b      	mov	r3, r1
  40ab6e:	e7a0      	b.n	40aab2 <__divdi3+0x1ca>
  40ab70:	4611      	mov	r1, r2
  40ab72:	e7cb      	b.n	40ab0c <__divdi3+0x224>
  40ab74:	4690      	mov	r8, r2
  40ab76:	e787      	b.n	40aa88 <__divdi3+0x1a0>
  40ab78:	4643      	mov	r3, r8
  40ab7a:	4642      	mov	r2, r8
  40ab7c:	e706      	b.n	40a98c <__divdi3+0xa4>
  40ab7e:	3a02      	subs	r2, #2
  40ab80:	e750      	b.n	40aa24 <__divdi3+0x13c>
  40ab82:	3902      	subs	r1, #2
  40ab84:	442f      	add	r7, r5
  40ab86:	e739      	b.n	40a9fc <__divdi3+0x114>

0040ab88 <__udivdi3>:
  40ab88:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40ab8c:	4614      	mov	r4, r2
  40ab8e:	4605      	mov	r5, r0
  40ab90:	460e      	mov	r6, r1
  40ab92:	2b00      	cmp	r3, #0
  40ab94:	d143      	bne.n	40ac1e <__udivdi3+0x96>
  40ab96:	428a      	cmp	r2, r1
  40ab98:	d953      	bls.n	40ac42 <__udivdi3+0xba>
  40ab9a:	fab2 f782 	clz	r7, r2
  40ab9e:	b157      	cbz	r7, 40abb6 <__udivdi3+0x2e>
  40aba0:	f1c7 0620 	rsb	r6, r7, #32
  40aba4:	fa20 f606 	lsr.w	r6, r0, r6
  40aba8:	fa01 f307 	lsl.w	r3, r1, r7
  40abac:	fa02 f407 	lsl.w	r4, r2, r7
  40abb0:	fa00 f507 	lsl.w	r5, r0, r7
  40abb4:	431e      	orrs	r6, r3
  40abb6:	0c21      	lsrs	r1, r4, #16
  40abb8:	fbb6 f2f1 	udiv	r2, r6, r1
  40abbc:	fb01 6612 	mls	r6, r1, r2, r6
  40abc0:	b2a0      	uxth	r0, r4
  40abc2:	fb00 f302 	mul.w	r3, r0, r2
  40abc6:	0c2f      	lsrs	r7, r5, #16
  40abc8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40abcc:	42b3      	cmp	r3, r6
  40abce:	d909      	bls.n	40abe4 <__udivdi3+0x5c>
  40abd0:	1936      	adds	r6, r6, r4
  40abd2:	f102 37ff 	add.w	r7, r2, #4294967295
  40abd6:	f080 80fd 	bcs.w	40add4 <__udivdi3+0x24c>
  40abda:	42b3      	cmp	r3, r6
  40abdc:	f240 80fa 	bls.w	40add4 <__udivdi3+0x24c>
  40abe0:	3a02      	subs	r2, #2
  40abe2:	4426      	add	r6, r4
  40abe4:	1af6      	subs	r6, r6, r3
  40abe6:	fbb6 f3f1 	udiv	r3, r6, r1
  40abea:	fb01 6113 	mls	r1, r1, r3, r6
  40abee:	fb00 f003 	mul.w	r0, r0, r3
  40abf2:	b2ad      	uxth	r5, r5
  40abf4:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  40abf8:	4288      	cmp	r0, r1
  40abfa:	d908      	bls.n	40ac0e <__udivdi3+0x86>
  40abfc:	1909      	adds	r1, r1, r4
  40abfe:	f103 36ff 	add.w	r6, r3, #4294967295
  40ac02:	f080 80e9 	bcs.w	40add8 <__udivdi3+0x250>
  40ac06:	4288      	cmp	r0, r1
  40ac08:	f240 80e6 	bls.w	40add8 <__udivdi3+0x250>
  40ac0c:	3b02      	subs	r3, #2
  40ac0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40ac12:	2300      	movs	r3, #0
  40ac14:	4610      	mov	r0, r2
  40ac16:	4619      	mov	r1, r3
  40ac18:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40ac1c:	4770      	bx	lr
  40ac1e:	428b      	cmp	r3, r1
  40ac20:	d84c      	bhi.n	40acbc <__udivdi3+0x134>
  40ac22:	fab3 f683 	clz	r6, r3
  40ac26:	2e00      	cmp	r6, #0
  40ac28:	d14f      	bne.n	40acca <__udivdi3+0x142>
  40ac2a:	428b      	cmp	r3, r1
  40ac2c:	d302      	bcc.n	40ac34 <__udivdi3+0xac>
  40ac2e:	4282      	cmp	r2, r0
  40ac30:	f200 80dd 	bhi.w	40adee <__udivdi3+0x266>
  40ac34:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40ac38:	2300      	movs	r3, #0
  40ac3a:	2201      	movs	r2, #1
  40ac3c:	4610      	mov	r0, r2
  40ac3e:	4619      	mov	r1, r3
  40ac40:	4770      	bx	lr
  40ac42:	b912      	cbnz	r2, 40ac4a <__udivdi3+0xc2>
  40ac44:	2401      	movs	r4, #1
  40ac46:	fbb4 f4f2 	udiv	r4, r4, r2
  40ac4a:	fab4 f284 	clz	r2, r4
  40ac4e:	2a00      	cmp	r2, #0
  40ac50:	f040 8082 	bne.w	40ad58 <__udivdi3+0x1d0>
  40ac54:	1b09      	subs	r1, r1, r4
  40ac56:	0c26      	lsrs	r6, r4, #16
  40ac58:	b2a7      	uxth	r7, r4
  40ac5a:	2301      	movs	r3, #1
  40ac5c:	fbb1 f0f6 	udiv	r0, r1, r6
  40ac60:	fb06 1110 	mls	r1, r6, r0, r1
  40ac64:	fb07 f200 	mul.w	r2, r7, r0
  40ac68:	ea4f 4c15 	mov.w	ip, r5, lsr #16
  40ac6c:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
  40ac70:	428a      	cmp	r2, r1
  40ac72:	d907      	bls.n	40ac84 <__udivdi3+0xfc>
  40ac74:	1909      	adds	r1, r1, r4
  40ac76:	f100 3cff 	add.w	ip, r0, #4294967295
  40ac7a:	d202      	bcs.n	40ac82 <__udivdi3+0xfa>
  40ac7c:	428a      	cmp	r2, r1
  40ac7e:	f200 80c8 	bhi.w	40ae12 <__udivdi3+0x28a>
  40ac82:	4660      	mov	r0, ip
  40ac84:	1a89      	subs	r1, r1, r2
  40ac86:	fbb1 f2f6 	udiv	r2, r1, r6
  40ac8a:	fb06 1112 	mls	r1, r6, r2, r1
  40ac8e:	fb07 f702 	mul.w	r7, r7, r2
  40ac92:	b2ad      	uxth	r5, r5
  40ac94:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  40ac98:	42af      	cmp	r7, r5
  40ac9a:	d908      	bls.n	40acae <__udivdi3+0x126>
  40ac9c:	192c      	adds	r4, r5, r4
  40ac9e:	f102 31ff 	add.w	r1, r2, #4294967295
  40aca2:	f080 809b 	bcs.w	40addc <__udivdi3+0x254>
  40aca6:	42a7      	cmp	r7, r4
  40aca8:	f240 8098 	bls.w	40addc <__udivdi3+0x254>
  40acac:	3a02      	subs	r2, #2
  40acae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40acb2:	4610      	mov	r0, r2
  40acb4:	4619      	mov	r1, r3
  40acb6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40acba:	4770      	bx	lr
  40acbc:	2300      	movs	r3, #0
  40acbe:	461a      	mov	r2, r3
  40acc0:	4610      	mov	r0, r2
  40acc2:	4619      	mov	r1, r3
  40acc4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40acc8:	4770      	bx	lr
  40acca:	f1c6 0520 	rsb	r5, r6, #32
  40acce:	fa22 f705 	lsr.w	r7, r2, r5
  40acd2:	fa03 f406 	lsl.w	r4, r3, r6
  40acd6:	fa21 f305 	lsr.w	r3, r1, r5
  40acda:	fa01 fb06 	lsl.w	fp, r1, r6
  40acde:	fa20 f505 	lsr.w	r5, r0, r5
  40ace2:	433c      	orrs	r4, r7
  40ace4:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40ace8:	fbb3 fcf8 	udiv	ip, r3, r8
  40acec:	fb08 331c 	mls	r3, r8, ip, r3
  40acf0:	fa1f f984 	uxth.w	r9, r4
  40acf4:	fb09 fa0c 	mul.w	sl, r9, ip
  40acf8:	ea45 0b0b 	orr.w	fp, r5, fp
  40acfc:	ea4f 451b 	mov.w	r5, fp, lsr #16
  40ad00:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  40ad04:	459a      	cmp	sl, r3
  40ad06:	fa02 f206 	lsl.w	r2, r2, r6
  40ad0a:	d904      	bls.n	40ad16 <__udivdi3+0x18e>
  40ad0c:	191b      	adds	r3, r3, r4
  40ad0e:	f10c 35ff 	add.w	r5, ip, #4294967295
  40ad12:	d36f      	bcc.n	40adf4 <__udivdi3+0x26c>
  40ad14:	46ac      	mov	ip, r5
  40ad16:	ebca 0303 	rsb	r3, sl, r3
  40ad1a:	fbb3 f5f8 	udiv	r5, r3, r8
  40ad1e:	fb08 3315 	mls	r3, r8, r5, r3
  40ad22:	fb09 f905 	mul.w	r9, r9, r5
  40ad26:	fa1f fb8b 	uxth.w	fp, fp
  40ad2a:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
  40ad2e:	45b9      	cmp	r9, r7
  40ad30:	d904      	bls.n	40ad3c <__udivdi3+0x1b4>
  40ad32:	193f      	adds	r7, r7, r4
  40ad34:	f105 33ff 	add.w	r3, r5, #4294967295
  40ad38:	d362      	bcc.n	40ae00 <__udivdi3+0x278>
  40ad3a:	461d      	mov	r5, r3
  40ad3c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  40ad40:	fbac 2302 	umull	r2, r3, ip, r2
  40ad44:	ebc9 0707 	rsb	r7, r9, r7
  40ad48:	429f      	cmp	r7, r3
  40ad4a:	f04f 0500 	mov.w	r5, #0
  40ad4e:	d34a      	bcc.n	40ade6 <__udivdi3+0x25e>
  40ad50:	d046      	beq.n	40ade0 <__udivdi3+0x258>
  40ad52:	4662      	mov	r2, ip
  40ad54:	462b      	mov	r3, r5
  40ad56:	e75d      	b.n	40ac14 <__udivdi3+0x8c>
  40ad58:	4094      	lsls	r4, r2
  40ad5a:	f1c2 0920 	rsb	r9, r2, #32
  40ad5e:	fa21 fc09 	lsr.w	ip, r1, r9
  40ad62:	4091      	lsls	r1, r2
  40ad64:	fa20 f909 	lsr.w	r9, r0, r9
  40ad68:	0c26      	lsrs	r6, r4, #16
  40ad6a:	fbbc f8f6 	udiv	r8, ip, r6
  40ad6e:	fb06 cc18 	mls	ip, r6, r8, ip
  40ad72:	b2a7      	uxth	r7, r4
  40ad74:	fb07 f308 	mul.w	r3, r7, r8
  40ad78:	ea49 0901 	orr.w	r9, r9, r1
  40ad7c:	ea4f 4119 	mov.w	r1, r9, lsr #16
  40ad80:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
  40ad84:	4563      	cmp	r3, ip
  40ad86:	fa00 f502 	lsl.w	r5, r0, r2
  40ad8a:	d909      	bls.n	40ada0 <__udivdi3+0x218>
  40ad8c:	eb1c 0c04 	adds.w	ip, ip, r4
  40ad90:	f108 32ff 	add.w	r2, r8, #4294967295
  40ad94:	d23b      	bcs.n	40ae0e <__udivdi3+0x286>
  40ad96:	4563      	cmp	r3, ip
  40ad98:	d939      	bls.n	40ae0e <__udivdi3+0x286>
  40ad9a:	f1a8 0802 	sub.w	r8, r8, #2
  40ad9e:	44a4      	add	ip, r4
  40ada0:	ebc3 0c0c 	rsb	ip, r3, ip
  40ada4:	fbbc f3f6 	udiv	r3, ip, r6
  40ada8:	fb06 c113 	mls	r1, r6, r3, ip
  40adac:	fb07 f203 	mul.w	r2, r7, r3
  40adb0:	fa1f f989 	uxth.w	r9, r9
  40adb4:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
  40adb8:	428a      	cmp	r2, r1
  40adba:	d907      	bls.n	40adcc <__udivdi3+0x244>
  40adbc:	1909      	adds	r1, r1, r4
  40adbe:	f103 30ff 	add.w	r0, r3, #4294967295
  40adc2:	d222      	bcs.n	40ae0a <__udivdi3+0x282>
  40adc4:	428a      	cmp	r2, r1
  40adc6:	d920      	bls.n	40ae0a <__udivdi3+0x282>
  40adc8:	3b02      	subs	r3, #2
  40adca:	4421      	add	r1, r4
  40adcc:	1a89      	subs	r1, r1, r2
  40adce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40add2:	e743      	b.n	40ac5c <__udivdi3+0xd4>
  40add4:	463a      	mov	r2, r7
  40add6:	e705      	b.n	40abe4 <__udivdi3+0x5c>
  40add8:	4633      	mov	r3, r6
  40adda:	e718      	b.n	40ac0e <__udivdi3+0x86>
  40addc:	460a      	mov	r2, r1
  40adde:	e766      	b.n	40acae <__udivdi3+0x126>
  40ade0:	40b0      	lsls	r0, r6
  40ade2:	4290      	cmp	r0, r2
  40ade4:	d2b5      	bcs.n	40ad52 <__udivdi3+0x1ca>
  40ade6:	f10c 32ff 	add.w	r2, ip, #4294967295
  40adea:	2300      	movs	r3, #0
  40adec:	e712      	b.n	40ac14 <__udivdi3+0x8c>
  40adee:	4633      	mov	r3, r6
  40adf0:	4632      	mov	r2, r6
  40adf2:	e70f      	b.n	40ac14 <__udivdi3+0x8c>
  40adf4:	459a      	cmp	sl, r3
  40adf6:	d98d      	bls.n	40ad14 <__udivdi3+0x18c>
  40adf8:	f1ac 0c02 	sub.w	ip, ip, #2
  40adfc:	4423      	add	r3, r4
  40adfe:	e78a      	b.n	40ad16 <__udivdi3+0x18e>
  40ae00:	45b9      	cmp	r9, r7
  40ae02:	d99a      	bls.n	40ad3a <__udivdi3+0x1b2>
  40ae04:	3d02      	subs	r5, #2
  40ae06:	4427      	add	r7, r4
  40ae08:	e798      	b.n	40ad3c <__udivdi3+0x1b4>
  40ae0a:	4603      	mov	r3, r0
  40ae0c:	e7de      	b.n	40adcc <__udivdi3+0x244>
  40ae0e:	4690      	mov	r8, r2
  40ae10:	e7c6      	b.n	40ada0 <__udivdi3+0x218>
  40ae12:	3802      	subs	r0, #2
  40ae14:	4421      	add	r1, r4
  40ae16:	e735      	b.n	40ac84 <__udivdi3+0xfc>

0040ae18 <all_twi_definitions>:
  40ae18:	8000 4001 8100 4001 0013 0000 0013 0000     ...@...@........

0040ae28 <all_uart_definitions>:
  40ae28:	0600 400e 0700 400e 0008 0000 0008 0000     ...@...@........

0040ae38 <p_uc_charset10x14>:
	...
  40ae54:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
  40ae64:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
  40ae74:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
  40ae84:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
  40ae94:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
  40aea4:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
  40aeb4:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
  40aec4:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
  40aedc:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
  40aeec:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
  40aefc:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
  40af0c:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
  40af1c:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
  40af2c:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
  40af3c:	0003 0003 0003 0003 0003 0003 0003 0003     ................
  40af4c:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
  40af64:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
  40af74:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
  40af84:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
  40af94:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
  40afa4:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
  40afb4:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
  40afc4:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
  40afd4:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
  40afe4:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
  40aff4:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
  40b004:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
  40b014:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
  40b024:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
  40b034:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
  40b044:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
  40b054:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
  40b064:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
  40b074:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
  40b084:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
  40b094:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
  40b0a4:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
  40b0b4:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
  40b0c4:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
  40b0d4:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
  40b0e4:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
  40b0f4:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  40b104:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
  40b114:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
  40b124:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
  40b134:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
  40b144:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
  40b154:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
  40b164:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
  40b174:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
  40b184:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
  40b194:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
  40b1a4:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
  40b1b4:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
  40b1c4:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
  40b1d4:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
  40b1e4:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  40b1f4:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
  40b204:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
  40b214:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
  40b224:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
  40b234:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
  40b244:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
  40b254:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
  40b264:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
  40b274:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
  40b284:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
  40b294:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
  40b2a4:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
  40b2b4:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
  40b2c4:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
  40b2d4:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
  40b2e4:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
  40b2f4:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
  40b304:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
  40b314:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
  40b324:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
  40b334:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
  40b344:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
  40b354:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
  40b364:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
  40b374:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  40b384:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
  40b394:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
  40b3a4:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
  40b3b4:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
  40b3c4:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
  40b3d4:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
  40b3e4:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
  40b3f4:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
  40b404:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
  40b414:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
  40b424:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
  40b434:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
  40b444:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
  40b454:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
  40b464:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  40b474:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
  40b484:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
  40b494:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
  40b4a4:	8003 0007 000e 000c 000c 000e 0007 0003     ................
  40b4b4:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
  40b4c4:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
  40b4d4:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
  40b4e4:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
  40b4f4:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
  40b504:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
  40b514:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
  40b524:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
  40b534:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
  40b544:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
  40b554:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
  40b564:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
  40b574:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
  40b584:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
  40b594:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
  40b5a4:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
  40b5b4:	fcff fcff 7325 0909 6325 2509 0975 7525     ....%s..%c.%u.%u
  40b5c4:	2509 0d75 000a 0000 4449 454c 0000 0000     .%u.....IDLE....
  40b5d4:	6d54 2072 7653 0063 4c09 6465 2131 0000     Tmr Svc..Led1!..
  40b5e4:	4c09 6465 2130 0000 2d2d 202d 754e 626d     .Led0!..--- Numb
  40b5f4:	7265 6f20 2066 6154 6b73 3a73 2520 0075     er of Tasks: %u.
  40b604:	614e 656d 0909 7453 7461 0965 7250 6f69     Name..State.Prio
  40b614:	0972 7453 6361 096b 754e 006d 7473 6361     r.Stack.Num.stac
  40b624:	206b 766f 7265 6c66 776f 2520 2078 7325     k overflow %x %s
  40b634:	0a0d 0000 6f43 736e 6c6f 2065 4b4f 0a21     ....Console OK!.
  40b644:	0000 0000 4d49 2055 7246 6565 5452 534f     ....IMU FreeRTOS
  40b654:	0000 0000 6f4d 696e 6f74 0072 6146 6c69     ....Monitor.Fail
  40b664:	6465 7420 206f 7263 6165 6574 4d20 6e6f     ed to create Mon
  40b674:	7469 726f 7420 7361 0d6b 000a 654c 3064     itor task...Led0
  40b684:	0000 0000 6146 6c69 6465 7420 206f 7263     ....Failed to cr
  40b694:	6165 6574 7420 7365 2074 656c 2064 6174     eate test led ta
  40b6a4:	6b73 0a0d 0000 0000 654c 3164 0000 0000     sk......Led1....
  40b6b4:	6954 656d 0072 0000 0043 0000               Timer...C...

0040b6c0 <_global_impure_ptr>:
  40b6c0:	00f8 2000                                   ... 

0040b6c4 <zeroes.6763>:
  40b6c4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40b6d4:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  40b6e4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40b6f4:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40b704:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  40b714:	0030 0000                                   0...

0040b718 <blanks.6762>:
  40b718:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b728 <zeroes.6721>:
  40b728:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040b738 <blanks.6720>:
  40b738:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40b748:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40b758:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

0040b768 <__mprec_tens>:
  40b768:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40b778:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40b788:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40b798:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40b7a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40b7b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40b7c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40b7d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40b7e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40b7f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40b808:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40b818:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40b828:	9db4 79d9 7843 44ea                         ...yCx.D

0040b830 <__mprec_bigtens>:
  40b830:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40b840:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40b850:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040b858 <p05.5269>:
  40b858:	0005 0000 0019 0000 007d 0000               ........}...

0040b864 <blanks.6777>:
  40b864:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b874 <zeroes.6778>:
  40b874:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040b884 <_init>:
  40b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b886:	bf00      	nop
  40b888:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b88a:	bc08      	pop	{r3}
  40b88c:	469e      	mov	lr, r3
  40b88e:	4770      	bx	lr

0040b890 <__init_array_start>:
  40b890:	00405a29 	.word	0x00405a29

0040b894 <__frame_dummy_init_array_entry>:
  40b894:	004000e9                                ..@.

0040b898 <_fini>:
  40b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b89a:	bf00      	nop
  40b89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b89e:	bc08      	pop	{r3}
  40b8a0:	469e      	mov	lr, r3
  40b8a2:	4770      	bx	lr

0040b8a4 <__fini_array_start>:
  40b8a4:	004000c5 	.word	0x004000c5

Disassembly of section .relocate:

20000000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC->EEFC_FMR = EEFC_FMR_FWS(3);
20000000:	f44f 7240 	mov.w	r2, #768	; 0x300
20000004:	4b1f      	ldr	r3, [pc, #124]	; (20000084 <SystemInit+0x84>)
20000006:	601a      	str	r2, [r3, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000008:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
2000000c:	6a1b      	ldr	r3, [r3, #32]
2000000e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000012:	d107      	bne.n	20000024 <SystemInit+0x24>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000014:	4a1c      	ldr	r2, [pc, #112]	; (20000088 <SystemInit+0x88>)
20000016:	4b1d      	ldr	r3, [pc, #116]	; (2000008c <SystemInit+0x8c>)
20000018:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2000001a:	461a      	mov	r2, r3
2000001c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000001e:	f013 0f01 	tst.w	r3, #1
20000022:	d0fb      	beq.n	2000001c <SystemInit+0x1c>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000024:	4a1a      	ldr	r2, [pc, #104]	; (20000090 <SystemInit+0x90>)
20000026:	4b19      	ldr	r3, [pc, #100]	; (2000008c <SystemInit+0x8c>)
20000028:	621a      	str	r2, [r3, #32]
	CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2000002a:	461a      	mov	r2, r3
2000002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000002e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000032:	d0fb      	beq.n	2000002c <SystemInit+0x2c>
	}
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000034:	4b15      	ldr	r3, [pc, #84]	; (2000008c <SystemInit+0x8c>)
20000036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000038:	f022 0203 	bic.w	r2, r2, #3
2000003c:	f042 0201 	orr.w	r2, r2, #1
20000040:	631a      	str	r2, [r3, #48]	; 0x30
		                    PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000042:	461a      	mov	r2, r3
20000044:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000046:	f013 0f08 	tst.w	r3, #8
2000004a:	d0fb      	beq.n	20000044 <SystemInit+0x44>
	}

	/* Initialize PLL */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2000004c:	4a11      	ldr	r2, [pc, #68]	; (20000094 <SystemInit+0x94>)
2000004e:	4b0f      	ldr	r3, [pc, #60]	; (2000008c <SystemInit+0x8c>)
20000050:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000052:	461a      	mov	r2, r3
20000054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000056:	f013 0f02 	tst.w	r3, #2
2000005a:	d0fb      	beq.n	20000054 <SystemInit+0x54>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | 
2000005c:	2211      	movs	r2, #17
2000005e:	4b0b      	ldr	r3, [pc, #44]	; (2000008c <SystemInit+0x8c>)
20000060:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000062:	461a      	mov	r2, r3
20000064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000066:	f013 0f08 	tst.w	r3, #8
2000006a:	d0fb      	beq.n	20000064 <SystemInit+0x64>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000006c:	2212      	movs	r2, #18
2000006e:	4b07      	ldr	r3, [pc, #28]	; (2000008c <SystemInit+0x8c>)
20000070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000072:	461a      	mov	r2, r3
20000074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000076:	f013 0f08 	tst.w	r3, #8
2000007a:	d0fb      	beq.n	20000074 <SystemInit+0x74>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000007c:	4a06      	ldr	r2, [pc, #24]	; (20000098 <SystemInit+0x98>)
2000007e:	4b07      	ldr	r3, [pc, #28]	; (2000009c <SystemInit+0x9c>)
20000080:	601a      	str	r2, [r3, #0]
20000082:	4770      	bx	lr
20000084:	400e0a00 	.word	0x400e0a00
20000088:	00370809 	.word	0x00370809
2000008c:	400e0400 	.word	0x400e0400
20000090:	01370809 	.word	0x01370809
20000094:	20073f01 	.word	0x20073f01
20000098:	02dc6c00 	.word	0x02dc6c00
2000009c:	200000e4 	.word	0x200000e4

200000a0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000a0:	4b0c      	ldr	r3, [pc, #48]	; (200000d4 <system_init_flash+0x34>)
200000a2:	4298      	cmp	r0, r3
200000a4:	d803      	bhi.n	200000ae <system_init_flash+0xe>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
200000a6:	2200      	movs	r2, #0
200000a8:	4b0b      	ldr	r3, [pc, #44]	; (200000d8 <system_init_flash+0x38>)
200000aa:	601a      	str	r2, [r3, #0]
200000ac:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ae:	4b0b      	ldr	r3, [pc, #44]	; (200000dc <system_init_flash+0x3c>)
200000b0:	4298      	cmp	r0, r3
200000b2:	d804      	bhi.n	200000be <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
200000b4:	f44f 7280 	mov.w	r2, #256	; 0x100
200000b8:	4b07      	ldr	r3, [pc, #28]	; (200000d8 <system_init_flash+0x38>)
200000ba:	601a      	str	r2, [r3, #0]
200000bc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000be:	4b08      	ldr	r3, [pc, #32]	; (200000e0 <system_init_flash+0x40>)
200000c0:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
200000c2:	bf94      	ite	ls
200000c4:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
200000c8:	f44f 7240 	movhi.w	r2, #768	; 0x300
200000cc:	4b02      	ldr	r3, [pc, #8]	; (200000d8 <system_init_flash+0x38>)
200000ce:	601a      	str	r2, [r3, #0]
200000d0:	4770      	bx	lr
200000d2:	bf00      	nop
200000d4:	01406f3f 	.word	0x01406f3f
200000d8:	400e0a00 	.word	0x400e0a00
200000dc:	01e847ff 	.word	0x01e847ff
200000e0:	02dc6bff 	.word	0x02dc6bff

200000e4 <SystemCoreClock>:
200000e4:	003d0900                                ..=.

200000e8 <uxCriticalNesting>:
200000e8:	aaaaaaaa                                ....

200000ec <xFreeBytesRemaining>:
200000ec:	000029a8                                .)..

200000f0 <xNextTaskUnblockTime>:
200000f0:	ffffffff 00000000                       ........

200000f8 <impure_data>:
200000f8:	00000000 200003e4 2000044c 200004b4     ....... L.. ... 
	...
2000012c:	0040b6bc 00000000 00000000 00000000     ..@.............
	...
200001a0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200001b0:	0005deec 0000000b 00000000 00000000     ................
	...

20000520 <_impure_ptr>:
20000520:	200000f8                                ... 

20000524 <lconv>:
20000524:	0040b760 0040b6a8 0040b6a8 0040b6a8     `.@...@...@...@.
20000534:	0040b6a8 0040b6a8 0040b6a8 0040b6a8     ..@...@...@...@.
20000544:	0040b6a8 0040b6a8 ffffffff ffffffff     ..@...@.........
20000554:	ffffffff 0000ffff                       ........

2000055c <lc_ctype_charset>:
2000055c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2000057c <__mb_cur_max>:
2000057c:	00000001                                ....

20000580 <__malloc_av_>:
	...
20000588:	20000580 20000580 20000588 20000588     ... ... ... ... 
20000598:	20000590 20000590 20000598 20000598     ... ... ... ... 
200005a8:	200005a0 200005a0 200005a8 200005a8     ... ... ... ... 
200005b8:	200005b0 200005b0 200005b8 200005b8     ... ... ... ... 
200005c8:	200005c0 200005c0 200005c8 200005c8     ... ... ... ... 
200005d8:	200005d0 200005d0 200005d8 200005d8     ... ... ... ... 
200005e8:	200005e0 200005e0 200005e8 200005e8     ... ... ... ... 
200005f8:	200005f0 200005f0 200005f8 200005f8     ... ... ... ... 
20000608:	20000600 20000600 20000608 20000608     ... ... ... ... 
20000618:	20000610 20000610 20000618 20000618     ... ... ... ... 
20000628:	20000620 20000620 20000628 20000628      ..  .. (.. (.. 
20000638:	20000630 20000630 20000638 20000638     0.. 0.. 8.. 8.. 
20000648:	20000640 20000640 20000648 20000648     @.. @.. H.. H.. 
20000658:	20000650 20000650 20000658 20000658     P.. P.. X.. X.. 
20000668:	20000660 20000660 20000668 20000668     `.. `.. h.. h.. 
20000678:	20000670 20000670 20000678 20000678     p.. p.. x.. x.. 
20000688:	20000680 20000680 20000688 20000688     ... ... ... ... 
20000698:	20000690 20000690 20000698 20000698     ... ... ... ... 
200006a8:	200006a0 200006a0 200006a8 200006a8     ... ... ... ... 
200006b8:	200006b0 200006b0 200006b8 200006b8     ... ... ... ... 
200006c8:	200006c0 200006c0 200006c8 200006c8     ... ... ... ... 
200006d8:	200006d0 200006d0 200006d8 200006d8     ... ... ... ... 
200006e8:	200006e0 200006e0 200006e8 200006e8     ... ... ... ... 
200006f8:	200006f0 200006f0 200006f8 200006f8     ... ... ... ... 
20000708:	20000700 20000700 20000708 20000708     ... ... ... ... 
20000718:	20000710 20000710 20000718 20000718     ... ... ... ... 
20000728:	20000720 20000720 20000728 20000728      ..  .. (.. (.. 
20000738:	20000730 20000730 20000738 20000738     0.. 0.. 8.. 8.. 
20000748:	20000740 20000740 20000748 20000748     @.. @.. H.. H.. 
20000758:	20000750 20000750 20000758 20000758     P.. P.. X.. X.. 
20000768:	20000760 20000760 20000768 20000768     `.. `.. h.. h.. 
20000778:	20000770 20000770 20000778 20000778     p.. p.. x.. x.. 
20000788:	20000780 20000780 20000788 20000788     ... ... ... ... 
20000798:	20000790 20000790 20000798 20000798     ... ... ... ... 
200007a8:	200007a0 200007a0 200007a8 200007a8     ... ... ... ... 
200007b8:	200007b0 200007b0 200007b8 200007b8     ... ... ... ... 
200007c8:	200007c0 200007c0 200007c8 200007c8     ... ... ... ... 
200007d8:	200007d0 200007d0 200007d8 200007d8     ... ... ... ... 
200007e8:	200007e0 200007e0 200007e8 200007e8     ... ... ... ... 
200007f8:	200007f0 200007f0 200007f8 200007f8     ... ... ... ... 
20000808:	20000800 20000800 20000808 20000808     ... ... ... ... 
20000818:	20000810 20000810 20000818 20000818     ... ... ... ... 
20000828:	20000820 20000820 20000828 20000828      ..  .. (.. (.. 
20000838:	20000830 20000830 20000838 20000838     0.. 0.. 8.. 8.. 
20000848:	20000840 20000840 20000848 20000848     @.. @.. H.. H.. 
20000858:	20000850 20000850 20000858 20000858     P.. P.. X.. X.. 
20000868:	20000860 20000860 20000868 20000868     `.. `.. h.. h.. 
20000878:	20000870 20000870 20000878 20000878     p.. p.. x.. x.. 
20000888:	20000880 20000880 20000888 20000888     ... ... ... ... 
20000898:	20000890 20000890 20000898 20000898     ... ... ... ... 
200008a8:	200008a0 200008a0 200008a8 200008a8     ... ... ... ... 
200008b8:	200008b0 200008b0 200008b8 200008b8     ... ... ... ... 
200008c8:	200008c0 200008c0 200008c8 200008c8     ... ... ... ... 
200008d8:	200008d0 200008d0 200008d8 200008d8     ... ... ... ... 
200008e8:	200008e0 200008e0 200008e8 200008e8     ... ... ... ... 
200008f8:	200008f0 200008f0 200008f8 200008f8     ... ... ... ... 
20000908:	20000900 20000900 20000908 20000908     ... ... ... ... 
20000918:	20000910 20000910 20000918 20000918     ... ... ... ... 
20000928:	20000920 20000920 20000928 20000928      ..  .. (.. (.. 
20000938:	20000930 20000930 20000938 20000938     0.. 0.. 8.. 8.. 
20000948:	20000940 20000940 20000948 20000948     @.. @.. H.. H.. 
20000958:	20000950 20000950 20000958 20000958     P.. P.. X.. X.. 
20000968:	20000960 20000960 20000968 20000968     `.. `.. h.. h.. 
20000978:	20000970 20000970 20000978 20000978     p.. p.. x.. x.. 

20000988 <__malloc_trim_threshold>:
20000988:	00020000                                ....

2000098c <__malloc_sbrk_base>:
2000098c:	ffffffff                                ....

20000990 <__wctomb>:
20000990:	00409cc9                                ..@.
